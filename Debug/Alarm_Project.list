
Alarm_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a020  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  0800a1b0  0800a1b0  0001a1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6e4  0800a6e4  00020484  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6e4  0800a6e4  0001a6e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6ec  0800a6ec  00020484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6ec  0800a6ec  0001a6ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6f0  0800a6f0  0001a6f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000484  20000000  0800a6f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000033d4  20000484  0800ab78  00020484  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003858  0800ab78  00023858  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020484  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022f37  00000000  00000000  000204b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b38  00000000  00000000  000433eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d10  00000000  00000000  00047f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b28  00000000  00000000  00049c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b9e5  00000000  00000000  0004b760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022a70  00000000  00000000  00077145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101c7a  00000000  00000000  00099bb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019b82f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008774  00000000  00000000  0019b880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000484 	.word	0x20000484
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a198 	.word	0x0800a198

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000488 	.word	0x20000488
 80001cc:	0800a198 	.word	0x0800a198

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <Alarm_Create>:
#define ALARM_MAX 32
ALARM ALARMS[ALARM_MAX];
int alarmcount = 0;

void Alarm_Create(char name[20] , DateTime * datetime)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	6039      	str	r1, [r7, #0]
	if(alarmcount == 0){
 80005ae:	4b29      	ldr	r3, [pc, #164]	; (8000654 <Alarm_Create+0xb0>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d143      	bne.n	800063e <Alarm_Create+0x9a>
		strcpy(ALARMS[alarmcount].name ,name);
 80005b6:	4b27      	ldr	r3, [pc, #156]	; (8000654 <Alarm_Create+0xb0>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	019b      	lsls	r3, r3, #6
 80005bc:	4a26      	ldr	r2, [pc, #152]	; (8000658 <Alarm_Create+0xb4>)
 80005be:	4413      	add	r3, r2
 80005c0:	6879      	ldr	r1, [r7, #4]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f008 f8fd 	bl	80087c2 <strcpy>
		ALARMS[alarmcount].datetime.min = datetime->min;
 80005c8:	4b22      	ldr	r3, [pc, #136]	; (8000654 <Alarm_Create+0xb0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	683a      	ldr	r2, [r7, #0]
 80005ce:	6852      	ldr	r2, [r2, #4]
 80005d0:	4921      	ldr	r1, [pc, #132]	; (8000658 <Alarm_Create+0xb4>)
 80005d2:	019b      	lsls	r3, r3, #6
 80005d4:	440b      	add	r3, r1
 80005d6:	3318      	adds	r3, #24
 80005d8:	601a      	str	r2, [r3, #0]
		ALARMS[alarmcount].datetime.hours = datetime->hours;
 80005da:	4b1e      	ldr	r3, [pc, #120]	; (8000654 <Alarm_Create+0xb0>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	683a      	ldr	r2, [r7, #0]
 80005e0:	6892      	ldr	r2, [r2, #8]
 80005e2:	491d      	ldr	r1, [pc, #116]	; (8000658 <Alarm_Create+0xb4>)
 80005e4:	019b      	lsls	r3, r3, #6
 80005e6:	440b      	add	r3, r1
 80005e8:	331c      	adds	r3, #28
 80005ea:	601a      	str	r2, [r3, #0]
		ALARMS[alarmcount].datetime.weekDay = datetime->weekDay;
 80005ec:	4b19      	ldr	r3, [pc, #100]	; (8000654 <Alarm_Create+0xb0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	68d2      	ldr	r2, [r2, #12]
 80005f4:	4918      	ldr	r1, [pc, #96]	; (8000658 <Alarm_Create+0xb4>)
 80005f6:	019b      	lsls	r3, r3, #6
 80005f8:	440b      	add	r3, r1
 80005fa:	3320      	adds	r3, #32
 80005fc:	601a      	str	r2, [r3, #0]
		ALARMS[alarmcount].datetime.day = datetime->day;
 80005fe:	4b15      	ldr	r3, [pc, #84]	; (8000654 <Alarm_Create+0xb0>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	683a      	ldr	r2, [r7, #0]
 8000604:	6912      	ldr	r2, [r2, #16]
 8000606:	4914      	ldr	r1, [pc, #80]	; (8000658 <Alarm_Create+0xb4>)
 8000608:	019b      	lsls	r3, r3, #6
 800060a:	440b      	add	r3, r1
 800060c:	3324      	adds	r3, #36	; 0x24
 800060e:	601a      	str	r2, [r3, #0]
		ALARMS[alarmcount].datetime.month = datetime->month;
 8000610:	4b10      	ldr	r3, [pc, #64]	; (8000654 <Alarm_Create+0xb0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	683a      	ldr	r2, [r7, #0]
 8000616:	6952      	ldr	r2, [r2, #20]
 8000618:	490f      	ldr	r1, [pc, #60]	; (8000658 <Alarm_Create+0xb4>)
 800061a:	019b      	lsls	r3, r3, #6
 800061c:	440b      	add	r3, r1
 800061e:	3328      	adds	r3, #40	; 0x28
 8000620:	601a      	str	r2, [r3, #0]
		ALARMS[alarmcount].datetime.year = datetime->year;
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <Alarm_Create+0xb0>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	683a      	ldr	r2, [r7, #0]
 8000628:	6992      	ldr	r2, [r2, #24]
 800062a:	490b      	ldr	r1, [pc, #44]	; (8000658 <Alarm_Create+0xb4>)
 800062c:	019b      	lsls	r3, r3, #6
 800062e:	440b      	add	r3, r1
 8000630:	332c      	adds	r3, #44	; 0x2c
 8000632:	601a      	str	r2, [r3, #0]
		alarmcount++;
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <Alarm_Create+0xb0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	3301      	adds	r3, #1
 800063a:	4a06      	ldr	r2, [pc, #24]	; (8000654 <Alarm_Create+0xb0>)
 800063c:	6013      	str	r3, [r2, #0]
	}
	 if (alarmcount == ALARM_MAX)
 800063e:	4b05      	ldr	r3, [pc, #20]	; (8000654 <Alarm_Create+0xb0>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2b20      	cmp	r3, #32
 8000644:	d102      	bne.n	800064c <Alarm_Create+0xa8>
		 printf("Cant add anymore alarms pls try again later \r\n");
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <Alarm_Create+0xb8>)
 8000648:	f008 f842 	bl	80086d0 <puts>

	 return;
 800064c:	bf00      	nop
			alarmcount++;
			break;
		}
	 pageErase ();
	 pageProgram ();
}
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000ca0 	.word	0x20000ca0
 8000658:	200004a0 	.word	0x200004a0
 800065c:	0800a1b0 	.word	0x0800a1b0

08000660 <Alarm_List>:
void Alarm_Delete_All()
{
	pageErase ();
}
void Alarm_List()
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
	for(int i=0;i<alarmcount;i++){
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	e00a      	b.n	8000682 <Alarm_List+0x22>
		printf("alarm name is %s",ALARMS[i].name);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	019b      	lsls	r3, r3, #6
 8000670:	4a09      	ldr	r2, [pc, #36]	; (8000698 <Alarm_List+0x38>)
 8000672:	4413      	add	r3, r2
 8000674:	4619      	mov	r1, r3
 8000676:	4809      	ldr	r0, [pc, #36]	; (800069c <Alarm_List+0x3c>)
 8000678:	f007 ffa4 	bl	80085c4 <iprintf>
	for(int i=0;i<alarmcount;i++){
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	3301      	adds	r3, #1
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <Alarm_List+0x40>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	429a      	cmp	r2, r3
 800068a:	dbef      	blt.n	800066c <Alarm_List+0xc>
	}
}
 800068c:	bf00      	nop
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	200004a0 	.word	0x200004a0
 800069c:	0800a208 	.word	0x0800a208
 80006a0:	20000ca0 	.word	0x20000ca0

080006a4 <led_init>:
#include <stdlib.h>
#include "main.h"
#include "LED.h"

void led_init(LED* led,GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,int num)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	4613      	mov	r3, r2
 80006b2:	80fb      	strh	r3, [r7, #6]
	led->GPIO_Pin=GPIO_Pin;
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	88fa      	ldrh	r2, [r7, #6]
 80006b8:	809a      	strh	r2, [r3, #4]
	led->GPIOx = GPIOx;
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	68ba      	ldr	r2, [r7, #8]
 80006be:	601a      	str	r2, [r3, #0]
	led->delay = num;
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	683a      	ldr	r2, [r7, #0]
 80006c4:	609a      	str	r2, [r3, #8]
}
 80006c6:	bf00      	nop
 80006c8:	3714      	adds	r7, #20
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <rtcInit>:
		334,
		365
};

void rtcInit(Rtc * rtc, I2C_HandleTypeDef * hi2c, uint32_t devAddr)
{
 80006d2:	b480      	push	{r7}
 80006d4:	b085      	sub	sp, #20
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	60f8      	str	r0, [r7, #12]
 80006da:	60b9      	str	r1, [r7, #8]
 80006dc:	607a      	str	r2, [r7, #4]
	rtc->hi2c = hi2c;
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	68ba      	ldr	r2, [r7, #8]
 80006e2:	601a      	str	r2, [r3, #0]
	rtc->devAddr = devAddr;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	711a      	strb	r2, [r3, #4]
}
 80006ec:	bf00      	nop
 80006ee:	3714      	adds	r7, #20
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <bcdToInt>:
	HAL_I2C_Mem_Read(rtc->hi2c, rtc->devAddr, 0, 1, &sec, 1, 0xFF);
	return (sec & RTC_START_STOP) == 0;
}

static int bcdToInt(uint8_t bcd)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
	return (bcd >> 4) * 10 + (bcd & 0x0F);
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	091b      	lsrs	r3, r3, #4
 8000706:	b2db      	uxtb	r3, r3
 8000708:	461a      	mov	r2, r3
 800070a:	4613      	mov	r3, r2
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	4413      	add	r3, r2
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	461a      	mov	r2, r3
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	f003 030f 	and.w	r3, r3, #15
 800071a:	4413      	add	r3, r2
}
 800071c:	4618      	mov	r0, r3
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <rtcGetTime>:

	return ((value / 10) << 4) | (value % 10);
}

void rtcGetTime(Rtc * rtc, DateTime * dateTime)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af04      	add	r7, sp, #16
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
	uint8_t buffer[RTC_DATE_TIME_SIZE];
	HAL_I2C_Mem_Read(rtc->hi2c, rtc->devAddr, 0, 1, buffer, RTC_DATE_TIME_SIZE, 0xFF);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	6818      	ldr	r0, [r3, #0]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	791b      	ldrb	r3, [r3, #4]
 800073a:	b299      	uxth	r1, r3
 800073c:	23ff      	movs	r3, #255	; 0xff
 800073e:	9302      	str	r3, [sp, #8]
 8000740:	2307      	movs	r3, #7
 8000742:	9301      	str	r3, [sp, #4]
 8000744:	f107 0308 	add.w	r3, r7, #8
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2301      	movs	r3, #1
 800074c:	2200      	movs	r2, #0
 800074e:	f001 fc57 	bl	8002000 <HAL_I2C_Mem_Read>

	// remove stop bit if set
	buffer[0] &= ~RTC_START_STOP;
 8000752:	7a3b      	ldrb	r3, [r7, #8]
 8000754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000758:	b2db      	uxtb	r3, r3
 800075a:	723b      	strb	r3, [r7, #8]
	dateTime->sec = bcdToInt(buffer[0]);
 800075c:	7a3b      	ldrb	r3, [r7, #8]
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ffca 	bl	80006f8 <bcdToInt>
 8000764:	4602      	mov	r2, r0
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	601a      	str	r2, [r3, #0]
	dateTime->min = bcdToInt(buffer[1]);
 800076a:	7a7b      	ldrb	r3, [r7, #9]
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ffc3 	bl	80006f8 <bcdToInt>
 8000772:	4602      	mov	r2, r0
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	605a      	str	r2, [r3, #4]
	dateTime->hours = bcdToInt(buffer[2]);
 8000778:	7abb      	ldrb	r3, [r7, #10]
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff ffbc 	bl	80006f8 <bcdToInt>
 8000780:	4602      	mov	r2, r0
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	609a      	str	r2, [r3, #8]
	dateTime->weekDay = buffer[3] & 0x07;
 8000786:	7afb      	ldrb	r3, [r7, #11]
 8000788:	f003 0207 	and.w	r2, r3, #7
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	60da      	str	r2, [r3, #12]
	dateTime->day = bcdToInt(buffer[4]);
 8000790:	7b3b      	ldrb	r3, [r7, #12]
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff ffb0 	bl	80006f8 <bcdToInt>
 8000798:	4602      	mov	r2, r0
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	611a      	str	r2, [r3, #16]
	dateTime->month = bcdToInt(buffer[5]);
 800079e:	7b7b      	ldrb	r3, [r7, #13]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ffa9 	bl	80006f8 <bcdToInt>
 80007a6:	4602      	mov	r2, r0
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	615a      	str	r2, [r3, #20]
	dateTime->year = bcdToInt(buffer[6]);
 80007ac:	7bbb      	ldrb	r3, [r7, #14]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff ffa2 	bl	80006f8 <bcdToInt>
 80007b4:	4602      	mov	r2, r0
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	619a      	str	r2, [r3, #24]
}
 80007ba:	bf00      	nop
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <commTask>:
	arry[funcounter].CommandName = CommandName;
	arry[funcounter].obj = obj;
	funcounter++;
}

int commTask() {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10);
 80007ca:	1db9      	adds	r1, r7, #6
 80007cc:	230a      	movs	r3, #10
 80007ce:	2201      	movs	r2, #1
 80007d0:	4836      	ldr	r0, [pc, #216]	; (80008ac <commTask+0xe8>)
 80007d2:	f004 fbe7 	bl	8004fa4 <HAL_UART_Receive>
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK) {
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d020      	beq.n	8000822 <commTask+0x5e>
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0) {
 80007e0:	4b32      	ldr	r3, [pc, #200]	; (80008ac <commTask+0xe8>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d011      	beq.n	8000812 <commTask+0x4e>
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 80007ee:	4b2f      	ldr	r3, [pc, #188]	; (80008ac <commTask+0xe8>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2208      	movs	r2, #8
 80007f4:	621a      	str	r2, [r3, #32]
		}

		// here we have a time to print the command
		while (cmdprint < cmdcount) {
 80007f6:	e00c      	b.n	8000812 <commTask+0x4e>
			HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 80007f8:	4b2d      	ldr	r3, [pc, #180]	; (80008b0 <commTask+0xec>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	1c5a      	adds	r2, r3, #1
 80007fe:	492c      	ldr	r1, [pc, #176]	; (80008b0 <commTask+0xec>)
 8000800:	600a      	str	r2, [r1, #0]
 8000802:	4a2c      	ldr	r2, [pc, #176]	; (80008b4 <commTask+0xf0>)
 8000804:	1899      	adds	r1, r3, r2
 8000806:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800080a:	2201      	movs	r2, #1
 800080c:	4827      	ldr	r0, [pc, #156]	; (80008ac <commTask+0xe8>)
 800080e:	f004 fb35 	bl	8004e7c <HAL_UART_Transmit>
		while (cmdprint < cmdcount) {
 8000812:	4b27      	ldr	r3, [pc, #156]	; (80008b0 <commTask+0xec>)
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	4b28      	ldr	r3, [pc, #160]	; (80008b8 <commTask+0xf4>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	429a      	cmp	r2, r3
 800081c:	dbec      	blt.n	80007f8 <commTask+0x34>
		}

		return 0;
 800081e:	2300      	movs	r3, #0
 8000820:	e03f      	b.n	80008a2 <commTask+0xde>
	}

	if (ch != '\r' && ch != '\n') {
 8000822:	79bb      	ldrb	r3, [r7, #6]
 8000824:	2b0d      	cmp	r3, #13
 8000826:	d023      	beq.n	8000870 <commTask+0xac>
 8000828:	79bb      	ldrb	r3, [r7, #6]
 800082a:	2b0a      	cmp	r3, #10
 800082c:	d020      	beq.n	8000870 <commTask+0xac>
		//HAL_UART_Transmit(&huart2, &ch, 1, 0xFFFF);

		if (cmdcount >= MAX_BUFFER_LENGTH) {
 800082e:	4b22      	ldr	r3, [pc, #136]	; (80008b8 <commTask+0xf4>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2b63      	cmp	r3, #99	; 0x63
 8000834:	dd05      	ble.n	8000842 <commTask+0x7e>
			cmdcount = 0;
 8000836:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <commTask+0xf4>)
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
			cmdprint = 0;
 800083c:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <commTask+0xec>)
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 8000842:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <commTask+0xf4>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	1c5a      	adds	r2, r3, #1
 8000848:	491b      	ldr	r1, [pc, #108]	; (80008b8 <commTask+0xf4>)
 800084a:	600a      	str	r2, [r1, #0]
 800084c:	79b9      	ldrb	r1, [r7, #6]
 800084e:	4a19      	ldr	r2, [pc, #100]	; (80008b4 <commTask+0xf0>)
 8000850:	54d1      	strb	r1, [r2, r3]
		return 0;
 8000852:	2300      	movs	r3, #0
 8000854:	e025      	b.n	80008a2 <commTask+0xde>
	}

	// here we have a time to print the command
	while (cmdprint < cmdcount) {
		HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8000856:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <commTask+0xec>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	1c5a      	adds	r2, r3, #1
 800085c:	4914      	ldr	r1, [pc, #80]	; (80008b0 <commTask+0xec>)
 800085e:	600a      	str	r2, [r1, #0]
 8000860:	4a14      	ldr	r2, [pc, #80]	; (80008b4 <commTask+0xf0>)
 8000862:	1899      	adds	r1, r3, r2
 8000864:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000868:	2201      	movs	r2, #1
 800086a:	4810      	ldr	r0, [pc, #64]	; (80008ac <commTask+0xe8>)
 800086c:	f004 fb06 	bl	8004e7c <HAL_UART_Transmit>
	while (cmdprint < cmdcount) {
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <commTask+0xec>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <commTask+0xf4>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	429a      	cmp	r2, r3
 800087a:	dbec      	blt.n	8000856 <commTask+0x92>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n", 2, 0xFFFF);
 800087c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000880:	2202      	movs	r2, #2
 8000882:	490e      	ldr	r1, [pc, #56]	; (80008bc <commTask+0xf8>)
 8000884:	4809      	ldr	r0, [pc, #36]	; (80008ac <commTask+0xe8>)
 8000886:	f004 faf9 	bl	8004e7c <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <commTask+0xf4>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a09      	ldr	r2, [pc, #36]	; (80008b4 <commTask+0xf0>)
 8000890:	2100      	movs	r1, #0
 8000892:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <commTask+0xf4>)
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
	cmdprint = 0;
 800089a:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <commTask+0xec>)
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
	return 1;
 80008a0:	2301      	movs	r3, #1
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000db4 	.word	0x20000db4
 80008b0:	20000d0c 	.word	0x20000d0c
 80008b4:	20000ca4 	.word	0x20000ca4
 80008b8:	20000d08 	.word	0x20000d08
 80008bc:	0800a21c 	.word	0x0800a21c

080008c0 <handleCommand>:

void handleCommand() {
 80008c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008c2:	b095      	sub	sp, #84	; 0x54
 80008c4:	af04      	add	r7, sp, #16
	char cmd[20];
	char param[30];

	int params = sscanf((const char*) cmdbuffer, "%s %s", cmd, param);
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80008cc:	4947      	ldr	r1, [pc, #284]	; (80009ec <handleCommand+0x12c>)
 80008ce:	4848      	ldr	r0, [pc, #288]	; (80009f0 <handleCommand+0x130>)
 80008d0:	f007 ff06 	bl	80086e0 <siscanf>
 80008d4:	63b8      	str	r0, [r7, #56]	; 0x38

		for (int j = 0; j < funcounter; j++) {
 80008d6:	2300      	movs	r3, #0
 80008d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80008da:	e02a      	b.n	8000932 <handleCommand+0x72>
			if (strcmp(cmd, arry[j].CommandName) == 0) {
 80008dc:	4945      	ldr	r1, [pc, #276]	; (80009f4 <handleCommand+0x134>)
 80008de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80008e0:	4613      	mov	r3, r2
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	4413      	add	r3, r2
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	440b      	add	r3, r1
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f0:	4611      	mov	r1, r2
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff fc6c 	bl	80001d0 <strcmp>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d116      	bne.n	800092c <handleCommand+0x6c>
				arry[j].Func(arry[j].obj, param);
 80008fe:	493d      	ldr	r1, [pc, #244]	; (80009f4 <handleCommand+0x134>)
 8000900:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000902:	4613      	mov	r3, r2
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	4413      	add	r3, r2
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	440b      	add	r3, r1
 800090c:	3304      	adds	r3, #4
 800090e:	681c      	ldr	r4, [r3, #0]
 8000910:	4938      	ldr	r1, [pc, #224]	; (80009f4 <handleCommand+0x134>)
 8000912:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000914:	4613      	mov	r3, r2
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	4413      	add	r3, r2
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	440b      	add	r3, r1
 800091e:	3308      	adds	r3, #8
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	1d3a      	adds	r2, r7, #4
 8000924:	4611      	mov	r1, r2
 8000926:	4618      	mov	r0, r3
 8000928:	47a0      	blx	r4
				return;
 800092a:	e05c      	b.n	80009e6 <handleCommand+0x126>
		for (int j = 0; j < funcounter; j++) {
 800092c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800092e:	3301      	adds	r3, #1
 8000930:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000932:	4b31      	ldr	r3, [pc, #196]	; (80009f8 <handleCommand+0x138>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000938:	429a      	cmp	r2, r3
 800093a:	dbcf      	blt.n	80008dc <handleCommand+0x1c>
			}
		}

	if (params == 0) {
 800093c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800093e:	2b00      	cmp	r3, #0
 8000940:	d050      	beq.n	80009e4 <handleCommand+0x124>
		return;
	}

	 if (strcmp(cmd, "stop") == 0)
 8000942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000946:	492d      	ldr	r1, [pc, #180]	; (80009fc <handleCommand+0x13c>)
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff fc41 	bl	80001d0 <strcmp>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d103      	bne.n	800095c <handleCommand+0x9c>
	 {
		 alarm_on = 0;
 8000954:	4b2a      	ldr	r3, [pc, #168]	; (8000a00 <handleCommand+0x140>)
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	e044      	b.n	80009e6 <handleCommand+0x126>
	 }
	 else if (strcmp(cmd, "list") == 0)
 800095c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000960:	4928      	ldr	r1, [pc, #160]	; (8000a04 <handleCommand+0x144>)
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff fc34 	bl	80001d0 <strcmp>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d102      	bne.n	8000974 <handleCommand+0xb4>
		 	 {
		 Alarm_List();
 800096e:	f7ff fe77 	bl	8000660 <Alarm_List>
 8000972:	e038      	b.n	80009e6 <handleCommand+0x126>
		 	 }
	 else if (strcmp(cmd, "create") == 0)
 8000974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000978:	4923      	ldr	r1, [pc, #140]	; (8000a08 <handleCommand+0x148>)
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff fc28 	bl	80001d0 <strcmp>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d104      	bne.n	8000990 <handleCommand+0xd0>
	 	 {
		 create_alarm(param);
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	4618      	mov	r0, r3
 800098a:	f000 fa83 	bl	8000e94 <create_alarm>
 800098e:	e02a      	b.n	80009e6 <handleCommand+0x126>
	 	 }
	 else if (strcmp(cmd, "gettime") == 0)
 8000990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000994:	491d      	ldr	r1, [pc, #116]	; (8000a0c <handleCommand+0x14c>)
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fc1a 	bl	80001d0 <strcmp>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d11c      	bne.n	80009dc <handleCommand+0x11c>
	 	 	 {
		 rtcGetTime(&rtc,&dateTime2);
 80009a2:	491b      	ldr	r1, [pc, #108]	; (8000a10 <handleCommand+0x150>)
 80009a4:	481b      	ldr	r0, [pc, #108]	; (8000a14 <handleCommand+0x154>)
 80009a6:	f7ff febf 	bl	8000728 <rtcGetTime>
		 printf("date is %02d:%02d:%02d  %02d %02d/%02d/%02d \r\n ",dateTime2.hours,dateTime2.min,dateTime2.sec,dateTime2.weekDay,dateTime2.day,dateTime2.month,dateTime2.year);
 80009aa:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <handleCommand+0x150>)
 80009ac:	689c      	ldr	r4, [r3, #8]
 80009ae:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <handleCommand+0x150>)
 80009b0:	685d      	ldr	r5, [r3, #4]
 80009b2:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <handleCommand+0x150>)
 80009b4:	681e      	ldr	r6, [r3, #0]
 80009b6:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <handleCommand+0x150>)
 80009b8:	68db      	ldr	r3, [r3, #12]
 80009ba:	4a15      	ldr	r2, [pc, #84]	; (8000a10 <handleCommand+0x150>)
 80009bc:	6912      	ldr	r2, [r2, #16]
 80009be:	4914      	ldr	r1, [pc, #80]	; (8000a10 <handleCommand+0x150>)
 80009c0:	6949      	ldr	r1, [r1, #20]
 80009c2:	4813      	ldr	r0, [pc, #76]	; (8000a10 <handleCommand+0x150>)
 80009c4:	6980      	ldr	r0, [r0, #24]
 80009c6:	9003      	str	r0, [sp, #12]
 80009c8:	9102      	str	r1, [sp, #8]
 80009ca:	9201      	str	r2, [sp, #4]
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	4633      	mov	r3, r6
 80009d0:	462a      	mov	r2, r5
 80009d2:	4621      	mov	r1, r4
 80009d4:	4810      	ldr	r0, [pc, #64]	; (8000a18 <handleCommand+0x158>)
 80009d6:	f007 fdf5 	bl	80085c4 <iprintf>
 80009da:	e004      	b.n	80009e6 <handleCommand+0x126>
	 	 	 }
	else {
		printf("Invalid command\r\n");
 80009dc:	480f      	ldr	r0, [pc, #60]	; (8000a1c <handleCommand+0x15c>)
 80009de:	f007 fe77 	bl	80086d0 <puts>
 80009e2:	e000      	b.n	80009e6 <handleCommand+0x126>
		return;
 80009e4:	bf00      	nop
	}
}
 80009e6:	3744      	adds	r7, #68	; 0x44
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009ec:	0800a220 	.word	0x0800a220
 80009f0:	20000ca4 	.word	0x20000ca4
 80009f4:	20000e80 	.word	0x20000e80
 80009f8:	20000d10 	.word	0x20000d10
 80009fc:	0800a228 	.word	0x0800a228
 8000a00:	20001330 	.word	0x20001330
 8000a04:	0800a230 	.word	0x0800a230
 8000a08:	0800a238 	.word	0x0800a238
 8000a0c:	0800a240 	.word	0x0800a240
 8000a10:	20000e64 	.word	0x20000e64
 8000a14:	20000e5c 	.word	0x20000e5c
 8000a18:	0800a248 	.word	0x0800a248
 8000a1c:	0800a278 	.word	0x0800a278

08000a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */  HAL_Init();
 8000a24:	f000 fdf2 	bl	800160c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a28:	f000 f84a 	bl	8000ac0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a2c:	f000 f966 	bl	8000cfc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a30:	f000 f934 	bl	8000c9c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000a34:	f000 f8d6 	bl	8000be4 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000a38:	f000 f894 	bl	8000b64 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
   mymaininit();
 8000a3c:	f000 fad2 	bl	8000fe4 <mymaininit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a40:	f005 f82e 	bl	8005aa0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000a44:	4a11      	ldr	r2, [pc, #68]	; (8000a8c <main+0x6c>)
 8000a46:	2100      	movs	r1, #0
 8000a48:	4811      	ldr	r0, [pc, #68]	; (8000a90 <main+0x70>)
 8000a4a:	f005 f873 	bl	8005b34 <osThreadNew>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	4a10      	ldr	r2, [pc, #64]	; (8000a94 <main+0x74>)
 8000a52:	6013      	str	r3, [r2, #0]

  /* creation of LED_TASK */
  LED_TASKHandle = osThreadNew(led_func, (void*) &led, &LED_TASK_attributes);
 8000a54:	4a10      	ldr	r2, [pc, #64]	; (8000a98 <main+0x78>)
 8000a56:	4911      	ldr	r1, [pc, #68]	; (8000a9c <main+0x7c>)
 8000a58:	4811      	ldr	r0, [pc, #68]	; (8000aa0 <main+0x80>)
 8000a5a:	f005 f86b 	bl	8005b34 <osThreadNew>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	4a10      	ldr	r2, [pc, #64]	; (8000aa4 <main+0x84>)
 8000a62:	6013      	str	r3, [r2, #0]

  /* creation of COMTASK */
  COMTASKHandle = osThreadNew(comtask_func, NULL, &COMTASK_attributes);
 8000a64:	4a10      	ldr	r2, [pc, #64]	; (8000aa8 <main+0x88>)
 8000a66:	2100      	movs	r1, #0
 8000a68:	4810      	ldr	r0, [pc, #64]	; (8000aac <main+0x8c>)
 8000a6a:	f005 f863 	bl	8005b34 <osThreadNew>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	4a0f      	ldr	r2, [pc, #60]	; (8000ab0 <main+0x90>)
 8000a72:	6013      	str	r3, [r2, #0]

  /* creation of BUZZER_TASK */
  //BUZZER_TASKHandle = osThreadNew(buzzer_func, NULL, &BUZZER_TASK_attributes);

  /* creation of ALARM_TASK */
  ALARM_TASKHandle = osThreadNew(alarm_func, NULL, &ALARM_TASK_attributes);
 8000a74:	4a0f      	ldr	r2, [pc, #60]	; (8000ab4 <main+0x94>)
 8000a76:	2100      	movs	r1, #0
 8000a78:	480f      	ldr	r0, [pc, #60]	; (8000ab8 <main+0x98>)
 8000a7a:	f005 f85b 	bl	8005b34 <osThreadNew>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	4a0e      	ldr	r2, [pc, #56]	; (8000abc <main+0x9c>)
 8000a82:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a84:	f005 f830 	bl	8005ae8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <main+0x68>
 8000a8a:	bf00      	nop
 8000a8c:	0800a3a4 	.word	0x0800a3a4
 8000a90:	08000e05 	.word	0x08000e05
 8000a94:	20000e38 	.word	0x20000e38
 8000a98:	0800a3c8 	.word	0x0800a3c8
 8000a9c:	20000e50 	.word	0x20000e50
 8000aa0:	08001031 	.word	0x08001031
 8000aa4:	20000e3c 	.word	0x20000e3c
 8000aa8:	0800a3ec 	.word	0x0800a3ec
 8000aac:	08001065 	.word	0x08001065
 8000ab0:	20000e40 	.word	0x20000e40
 8000ab4:	0800a410 	.word	0x0800a410
 8000ab8:	0800107d 	.word	0x0800107d
 8000abc:	20000e44 	.word	0x20000e44

08000ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b096      	sub	sp, #88	; 0x58
 8000ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	2244      	movs	r2, #68	; 0x44
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f007 fd70 	bl	80085b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad4:	463b      	mov	r3, r7
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ae2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ae6:	f001 fe9d 	bl	8002824 <HAL_PWREx_ControlVoltageScaling>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000af0:	f000 f9a2 	bl	8000e38 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000af4:	2302      	movs	r3, #2
 8000af6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000afc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000afe:	2310      	movs	r3, #16
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b02:	2302      	movs	r3, #2
 8000b04:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b06:	2302      	movs	r3, #2
 8000b08:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b0e:	230a      	movs	r3, #10
 8000b10:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b12:	2307      	movs	r3, #7
 8000b14:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b16:	2302      	movs	r3, #2
 8000b18:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	4618      	mov	r0, r3
 8000b24:	f001 fed4 	bl	80028d0 <HAL_RCC_OscConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b2e:	f000 f983 	bl	8000e38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b32:	230f      	movs	r3, #15
 8000b34:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b36:	2303      	movs	r3, #3
 8000b38:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b46:	463b      	mov	r3, r7
 8000b48:	2104      	movs	r1, #4
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f002 fa9c 	bl	8003088 <HAL_RCC_ClockConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b56:	f000 f96f 	bl	8000e38 <Error_Handler>
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	3758      	adds	r7, #88	; 0x58
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b68:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <MX_I2C1_Init+0x74>)
 8000b6a:	4a1c      	ldr	r2, [pc, #112]	; (8000bdc <MX_I2C1_Init+0x78>)
 8000b6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <MX_I2C1_Init+0x74>)
 8000b70:	4a1b      	ldr	r2, [pc, #108]	; (8000be0 <MX_I2C1_Init+0x7c>)
 8000b72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b74:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <MX_I2C1_Init+0x74>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b7a:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <MX_I2C1_Init+0x74>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b80:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <MX_I2C1_Init+0x74>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b86:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <MX_I2C1_Init+0x74>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <MX_I2C1_Init+0x74>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MX_I2C1_Init+0x74>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b98:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <MX_I2C1_Init+0x74>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b9e:	480e      	ldr	r0, [pc, #56]	; (8000bd8 <MX_I2C1_Init+0x74>)
 8000ba0:	f001 f99e 	bl	8001ee0 <HAL_I2C_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000baa:	f000 f945 	bl	8000e38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4809      	ldr	r0, [pc, #36]	; (8000bd8 <MX_I2C1_Init+0x74>)
 8000bb2:	f001 fd91 	bl	80026d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bbc:	f000 f93c 	bl	8000e38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <MX_I2C1_Init+0x74>)
 8000bc4:	f001 fdd3 	bl	800276e <HAL_I2CEx_ConfigDigitalFilter>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bce:	f000 f933 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000d14 	.word	0x20000d14
 8000bdc:	40005400 	.word	0x40005400
 8000be0:	10909cec 	.word	0x10909cec

08000be4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bea:	f107 031c 	add.w	r3, r7, #28
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bf6:	463b      	mov	r3, r7
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
 8000c04:	615a      	str	r2, [r3, #20]
 8000c06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c08:	4b22      	ldr	r3, [pc, #136]	; (8000c94 <MX_TIM3_Init+0xb0>)
 8000c0a:	4a23      	ldr	r2, [pc, #140]	; (8000c98 <MX_TIM3_Init+0xb4>)
 8000c0c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 8000c0e:	4b21      	ldr	r3, [pc, #132]	; (8000c94 <MX_TIM3_Init+0xb0>)
 8000c10:	f240 321f 	movw	r2, #799	; 0x31f
 8000c14:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c16:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <MX_TIM3_Init+0xb0>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c1c:	4b1d      	ldr	r3, [pc, #116]	; (8000c94 <MX_TIM3_Init+0xb0>)
 8000c1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c22:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c24:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <MX_TIM3_Init+0xb0>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2a:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <MX_TIM3_Init+0xb0>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c30:	4818      	ldr	r0, [pc, #96]	; (8000c94 <MX_TIM3_Init+0xb0>)
 8000c32:	f003 fa0d 	bl	8004050 <HAL_TIM_PWM_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8000c3c:	f000 f8fc 	bl	8000e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c44:	2300      	movs	r3, #0
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c48:	f107 031c 	add.w	r3, r7, #28
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4811      	ldr	r0, [pc, #68]	; (8000c94 <MX_TIM3_Init+0xb0>)
 8000c50:	f004 f820 	bl	8004c94 <HAL_TIMEx_MasterConfigSynchronization>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000c5a:	f000 f8ed 	bl	8000e38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c5e:	2360      	movs	r3, #96	; 0x60
 8000c60:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c6e:	463b      	mov	r3, r7
 8000c70:	2200      	movs	r2, #0
 8000c72:	4619      	mov	r1, r3
 8000c74:	4807      	ldr	r0, [pc, #28]	; (8000c94 <MX_TIM3_Init+0xb0>)
 8000c76:	f003 fb61 	bl	800433c <HAL_TIM_PWM_ConfigChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000c80:	f000 f8da 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c84:	4803      	ldr	r0, [pc, #12]	; (8000c94 <MX_TIM3_Init+0xb0>)
 8000c86:	f000 facb 	bl	8001220 <HAL_TIM_MspPostInit>

}
 8000c8a:	bf00      	nop
 8000c8c:	3728      	adds	r7, #40	; 0x28
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000d68 	.word	0x20000d68
 8000c98:	40000400 	.word	0x40000400

08000c9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <MX_USART2_UART_Init+0x58>)
 8000ca2:	4a15      	ldr	r2, [pc, #84]	; (8000cf8 <MX_USART2_UART_Init+0x5c>)
 8000ca4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ca6:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <MX_USART2_UART_Init+0x58>)
 8000ca8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <MX_USART2_UART_Init+0x58>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <MX_USART2_UART_Init+0x58>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <MX_USART2_UART_Init+0x58>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <MX_USART2_UART_Init+0x58>)
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <MX_USART2_UART_Init+0x58>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <MX_USART2_UART_Init+0x58>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <MX_USART2_UART_Init+0x58>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <MX_USART2_UART_Init+0x58>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <MX_USART2_UART_Init+0x58>)
 8000ce0:	f004 f87e 	bl	8004de0 <HAL_UART_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000cea:	f000 f8a5 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000db4 	.word	0x20000db4
 8000cf8:	40004400 	.word	0x40004400

08000cfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d12:	4b39      	ldr	r3, [pc, #228]	; (8000df8 <MX_GPIO_Init+0xfc>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d16:	4a38      	ldr	r2, [pc, #224]	; (8000df8 <MX_GPIO_Init+0xfc>)
 8000d18:	f043 0304 	orr.w	r3, r3, #4
 8000d1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1e:	4b36      	ldr	r3, [pc, #216]	; (8000df8 <MX_GPIO_Init+0xfc>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	f003 0304 	and.w	r3, r3, #4
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d2a:	4b33      	ldr	r3, [pc, #204]	; (8000df8 <MX_GPIO_Init+0xfc>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	4a32      	ldr	r2, [pc, #200]	; (8000df8 <MX_GPIO_Init+0xfc>)
 8000d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d36:	4b30      	ldr	r3, [pc, #192]	; (8000df8 <MX_GPIO_Init+0xfc>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	4b2d      	ldr	r3, [pc, #180]	; (8000df8 <MX_GPIO_Init+0xfc>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d46:	4a2c      	ldr	r2, [pc, #176]	; (8000df8 <MX_GPIO_Init+0xfc>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4e:	4b2a      	ldr	r3, [pc, #168]	; (8000df8 <MX_GPIO_Init+0xfc>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5a:	4b27      	ldr	r3, [pc, #156]	; (8000df8 <MX_GPIO_Init+0xfc>)
 8000d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5e:	4a26      	ldr	r2, [pc, #152]	; (8000df8 <MX_GPIO_Init+0xfc>)
 8000d60:	f043 0302 	orr.w	r3, r3, #2
 8000d64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d66:	4b24      	ldr	r3, [pc, #144]	; (8000df8 <MX_GPIO_Init+0xfc>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2120      	movs	r1, #32
 8000d76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7a:	f001 f87f 	bl	8001e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d84:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4619      	mov	r1, r3
 8000d94:	4819      	ldr	r0, [pc, #100]	; (8000dfc <MX_GPIO_Init+0x100>)
 8000d96:	f000 fec7 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d9a:	2320      	movs	r3, #32
 8000d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db4:	f000 feb8 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW2_Pin */
  GPIO_InitStruct.Pin = SW2_Pin;
 8000db8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dbe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW2_GPIO_Port, &GPIO_InitStruct);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd2:	f000 fea9 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW3_Pin */
  GPIO_InitStruct.Pin = SW3_Pin;
 8000dd6:	2308      	movs	r3, #8
 8000dd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dda:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW3_GPIO_Port, &GPIO_InitStruct);
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	4619      	mov	r1, r3
 8000dea:	4805      	ldr	r0, [pc, #20]	; (8000e00 <MX_GPIO_Init+0x104>)
 8000dec:	f000 fe9c 	bl	8001b28 <HAL_GPIO_Init>

}
 8000df0:	bf00      	nop
 8000df2:	3728      	adds	r7, #40	; 0x28
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	48000800 	.word	0x48000800
 8000e00:	48000400 	.word	0x48000400

08000e04 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	f004 ff23 	bl	8005c58 <osDelay>
 8000e12:	e7fb      	b.n	8000e0c <StartDefaultTask+0x8>

08000e14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d101      	bne.n	8000e2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e26:	f000 fc11 	bl	800164c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40014400 	.word	0x40014400

08000e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e3c:	b672      	cpsid	i
}
 8000e3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <Error_Handler+0x8>

08000e42 <buzzerStartPlay>:
#include "mybuzzer.h"

extern TIM_HandleTypeDef htim3;

void buzzerStartPlay(BUZZER* buzzer,int* song, int* frames)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b085      	sub	sp, #20
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	60f8      	str	r0, [r7, #12]
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	607a      	str	r2, [r7, #4]
	buzzer->frames = frames;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	605a      	str	r2, [r3, #4]
	buzzer->song = song;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	601a      	str	r2, [r3, #0]

}
 8000e5a:	bf00      	nop
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
	...

08000e68 <_write>:
int alarm_on = 0;
#define ALARM_MAX 32
extern ALARM ALARMS[ALARM_MAX];

int _write(int fd, char* ptr, int len)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
      HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7c:	68b9      	ldr	r1, [r7, #8]
 8000e7e:	4804      	ldr	r0, [pc, #16]	; (8000e90 <_write+0x28>)
 8000e80:	f003 fffc 	bl	8004e7c <HAL_UART_Transmit>
      return len;
 8000e84:	687b      	ldr	r3, [r7, #4]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000db4 	.word	0x20000db4

08000e94 <create_alarm>:
	printf("Please enter one of the following Alarm commands: \r\n  "
				"1) create \r\n "
				"2) edit \r\n "
				"3) delete \r\n ");
}
void create_alarm(char param[30]){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b09e      	sub	sp, #120	; 0x78
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	char datename[50];
	char temp_name[20];
	DateTime temp_datetime;
	char * token;
	char s[3] = ": -";
 8000e9c:	4a38      	ldr	r2, [pc, #224]	; (8000f80 <create_alarm+0xec>)
 8000e9e:	f107 030c 	add.w	r3, r7, #12
 8000ea2:	6812      	ldr	r2, [r2, #0]
 8000ea4:	4611      	mov	r1, r2
 8000ea6:	8019      	strh	r1, [r3, #0]
 8000ea8:	3302      	adds	r3, #2
 8000eaa:	0c12      	lsrs	r2, r2, #16
 8000eac:	701a      	strb	r2, [r3, #0]
	printf("Please enter alarm name (no more than 20 ch) and the date in this format m:h:d:m:y \r\n");
 8000eae:	4835      	ldr	r0, [pc, #212]	; (8000f84 <create_alarm+0xf0>)
 8000eb0:	f007 fc0e 	bl	80086d0 <puts>
	sscanf(param, "%s",datename);
 8000eb4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4933      	ldr	r1, [pc, #204]	; (8000f88 <create_alarm+0xf4>)
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f007 fc0f 	bl	80086e0 <siscanf>

	token = strtok(datename, s);
 8000ec2:	f107 020c 	add.w	r2, r7, #12
 8000ec6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000eca:	4611      	mov	r1, r2
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f007 fc81 	bl	80087d4 <strtok>
 8000ed2:	6778      	str	r0, [r7, #116]	; 0x74
	strcpy(temp_name,token) ;
 8000ed4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ed8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8000eda:	4618      	mov	r0, r3
 8000edc:	f007 fc71 	bl	80087c2 <strcpy>

		token = strtok(NULL, s);
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f007 fc74 	bl	80087d4 <strtok>
 8000eec:	6778      	str	r0, [r7, #116]	; 0x74
		temp_datetime.min = atoi(token);
 8000eee:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000ef0:	f007 fb24 	bl	800853c <atoi>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	617b      	str	r3, [r7, #20]
		token = strtok(NULL, s);
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	4619      	mov	r1, r3
 8000efe:	2000      	movs	r0, #0
 8000f00:	f007 fc68 	bl	80087d4 <strtok>
 8000f04:	6778      	str	r0, [r7, #116]	; 0x74


		temp_datetime.hours = atoi(token);
 8000f06:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000f08:	f007 fb18 	bl	800853c <atoi>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	61bb      	str	r3, [r7, #24]
		token = strtok(NULL, s);
 8000f10:	f107 030c 	add.w	r3, r7, #12
 8000f14:	4619      	mov	r1, r3
 8000f16:	2000      	movs	r0, #0
 8000f18:	f007 fc5c 	bl	80087d4 <strtok>
 8000f1c:	6778      	str	r0, [r7, #116]	; 0x74


		temp_datetime.day = atoi(token);
 8000f1e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000f20:	f007 fb0c 	bl	800853c <atoi>
 8000f24:	4603      	mov	r3, r0
 8000f26:	623b      	str	r3, [r7, #32]
		token = strtok(NULL, s);
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f007 fc50 	bl	80087d4 <strtok>
 8000f34:	6778      	str	r0, [r7, #116]	; 0x74


		temp_datetime.month = atoi(token);
 8000f36:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000f38:	f007 fb00 	bl	800853c <atoi>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
		token = strtok(NULL, s);
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	4619      	mov	r1, r3
 8000f46:	2000      	movs	r0, #0
 8000f48:	f007 fc44 	bl	80087d4 <strtok>
 8000f4c:	6778      	str	r0, [r7, #116]	; 0x74


		temp_datetime.year = atoi(token);
 8000f4e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000f50:	f007 faf4 	bl	800853c <atoi>
 8000f54:	4603      	mov	r3, r0
 8000f56:	62bb      	str	r3, [r7, #40]	; 0x28
		token = strtok(NULL, s);
 8000f58:	f107 030c 	add.w	r3, r7, #12
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f007 fc38 	bl	80087d4 <strtok>
 8000f64:	6778      	str	r0, [r7, #116]	; 0x74

		Alarm_Create(temp_name ,&temp_datetime);
 8000f66:	f107 0210 	add.w	r2, r7, #16
 8000f6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f6e:	4611      	mov	r1, r2
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fb17 	bl	80005a4 <Alarm_Create>
}
 8000f76:	bf00      	nop
 8000f78:	3778      	adds	r7, #120	; 0x78
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	0800a37c 	.word	0x0800a37c
 8000f84:	0800a320 	.word	0x0800a320
 8000f88:	0800a378 	.word	0x0800a378

08000f8c <flashtoarry>:

void edit_alarm();
void delete_alarm();

void flashtoarry()
{
 8000f8c:	b4b0      	push	{r4, r5, r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
	for(int i = 0; i<32; i++){
 8000f92:	2300      	movs	r3, #0
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	e018      	b.n	8000fca <flashtoarry+0x3e>
		ALARM * alarm = (ALARM *)(0x08081800UL+(sizeof(ALARM)*i));
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <flashtoarry+0x50>)
 8000f9c:	4413      	add	r3, r2
 8000f9e:	019b      	lsls	r3, r3, #6
 8000fa0:	603b      	str	r3, [r7, #0]
		ALARMS[i] = *alarm;
 8000fa2:	4a0f      	ldr	r2, [pc, #60]	; (8000fe0 <flashtoarry+0x54>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	019b      	lsls	r3, r3, #6
 8000fa8:	441a      	add	r2, r3
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	4614      	mov	r4, r2
 8000fae:	461d      	mov	r5, r3
 8000fb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fbc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000fc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for(int i = 0; i<32; i++){
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b1f      	cmp	r3, #31
 8000fce:	dde3      	ble.n	8000f98 <flashtoarry+0xc>
	}


}
 8000fd0:	bf00      	nop
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bcb0      	pop	{r4, r5, r7}
 8000fda:	4770      	bx	lr
 8000fdc:	00202060 	.word	0x00202060
 8000fe0:	200004a0 	.word	0x200004a0

08000fe4 <mymaininit>:
int mymaininit()
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	flashtoarry();
 8000fe8:	f7ff ffd0 	bl	8000f8c <flashtoarry>
	buzzerStartPlay(&buzzer, song, length);
 8000fec:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <mymaininit+0x34>)
 8000fee:	490b      	ldr	r1, [pc, #44]	; (800101c <mymaininit+0x38>)
 8000ff0:	480b      	ldr	r0, [pc, #44]	; (8001020 <mymaininit+0x3c>)
 8000ff2:	f7ff ff26 	bl	8000e42 <buzzerStartPlay>
	led_init(&led,LD2_GPIO_Port,LD2_Pin,500);
 8000ff6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ffa:	2220      	movs	r2, #32
 8000ffc:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001000:	4808      	ldr	r0, [pc, #32]	; (8001024 <mymaininit+0x40>)
 8001002:	f7ff fb4f 	bl	80006a4 <led_init>
	rtcInit(&rtc, &hi2c1, 0xD0);
 8001006:	22d0      	movs	r2, #208	; 0xd0
 8001008:	4907      	ldr	r1, [pc, #28]	; (8001028 <mymaininit+0x44>)
 800100a:	4808      	ldr	r0, [pc, #32]	; (800102c <mymaininit+0x48>)
 800100c:	f7ff fb61 	bl	80006d2 <rtcInit>
//	dateTime2.day = 3;
//	dateTime2.month = 10;
//	dateTime2.year = 22;
//	rtcSetTime(&rtc, &dateTime2 );

	return 0;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200001f8 	.word	0x200001f8
 800101c:	20000000 	.word	0x20000000
 8001020:	20000e48 	.word	0x20000e48
 8001024:	20000e50 	.word	0x20000e50
 8001028:	20000d14 	.word	0x20000d14
 800102c:	20000e5c 	.word	0x20000e5c

08001030 <led_func>:

void led_func(void *argument)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 /* USER CODE BEGIN LED_blink */
	LED *led = (LED*)(argument);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  if(alarm_on == 1 ){
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <led_func+0x30>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d1fb      	bne.n	800103c <led_func+0xc>
		  HAL_GPIO_TogglePin(led->GPIOx, led->GPIO_Pin);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	889b      	ldrh	r3, [r3, #4]
 800104c:	4619      	mov	r1, r3
 800104e:	4610      	mov	r0, r2
 8001050:	f000 ff2c 	bl	8001eac <HAL_GPIO_TogglePin>
		  osDelay(led->delay);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	4618      	mov	r0, r3
 800105a:	f004 fdfd 	bl	8005c58 <osDelay>
	  if(alarm_on == 1 ){
 800105e:	e7ed      	b.n	800103c <led_func+0xc>
 8001060:	20001330 	.word	0x20001330

08001064 <comtask_func>:
	  }
  }
  /* USER CODE END LED_blink */
}
void comtask_func(void *argument)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

	  if (commTask()){
 800106c:	f7ff fbaa 	bl	80007c4 <commTask>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d0fa      	beq.n	800106c <comtask_func+0x8>
	  		 handleCommand();
 8001076:	f7ff fc23 	bl	80008c0 <handleCommand>
	  if (commTask()){
 800107a:	e7f7      	b.n	800106c <comtask_func+0x8>

0800107c <alarm_func>:
	  }
  }
  /* USER CODE END buzzer_func */
}
void alarm_func(void *argument)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	  rtcGetTime(&rtc,&dateTime2);
 8001084:	490b      	ldr	r1, [pc, #44]	; (80010b4 <alarm_func+0x38>)
 8001086:	480c      	ldr	r0, [pc, #48]	; (80010b8 <alarm_func+0x3c>)
 8001088:	f7ff fb4e 	bl	8000728 <rtcGetTime>
	//  printf("date is %d:%d:%d:%d:%d:%d:%d \r\n ",dateTime2.sec,dateTime2.min,dateTime2.hours,dateTime2.weekDay,dateTime2.day,dateTime2.month,dateTime2.year);
	 if(dateTime2.min == ALARMS[0].datetime.min && dateTime2.hours == ALARMS[0].datetime.hours){
 800108c:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <alarm_func+0x38>)
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <alarm_func+0x40>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	429a      	cmp	r2, r3
 8001096:	d108      	bne.n	80010aa <alarm_func+0x2e>
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <alarm_func+0x38>)
 800109a:	689a      	ldr	r2, [r3, #8]
 800109c:	4b07      	ldr	r3, [pc, #28]	; (80010bc <alarm_func+0x40>)
 800109e:	69db      	ldr	r3, [r3, #28]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d102      	bne.n	80010aa <alarm_func+0x2e>

		 alarm_on = 1;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <alarm_func+0x44>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	601a      	str	r2, [r3, #0]
		// printf("alarm: %s is on! \r\n ", ALARMS[0].name);
	 }
    osDelay(1000);
 80010aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010ae:	f004 fdd3 	bl	8005c58 <osDelay>
	  rtcGetTime(&rtc,&dateTime2);
 80010b2:	e7e7      	b.n	8001084 <alarm_func+0x8>
 80010b4:	20000e64 	.word	0x20000e64
 80010b8:	20000e5c 	.word	0x20000e5c
 80010bc:	200004a0 	.word	0x200004a0
 80010c0:	20001330 	.word	0x20001330

080010c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ca:	4b15      	ldr	r3, [pc, #84]	; (8001120 <HAL_MspInit+0x5c>)
 80010cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ce:	4a14      	ldr	r2, [pc, #80]	; (8001120 <HAL_MspInit+0x5c>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6613      	str	r3, [r2, #96]	; 0x60
 80010d6:	4b12      	ldr	r3, [pc, #72]	; (8001120 <HAL_MspInit+0x5c>)
 80010d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e2:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <HAL_MspInit+0x5c>)
 80010e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e6:	4a0e      	ldr	r2, [pc, #56]	; (8001120 <HAL_MspInit+0x5c>)
 80010e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ec:	6593      	str	r3, [r2, #88]	; 0x58
 80010ee:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <HAL_MspInit+0x5c>)
 80010f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f6:	603b      	str	r3, [r7, #0]
 80010f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	210f      	movs	r1, #15
 80010fe:	f06f 0001 	mvn.w	r0, #1
 8001102:	f000 fb7b 	bl	80017fc <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2105      	movs	r1, #5
 800110a:	2004      	movs	r0, #4
 800110c:	f000 fb76 	bl	80017fc <HAL_NVIC_SetPriority>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001110:	2004      	movs	r0, #4
 8001112:	f000 fb8f 	bl	8001834 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40021000 	.word	0x40021000

08001124 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b0ac      	sub	sp, #176	; 0xb0
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	2288      	movs	r2, #136	; 0x88
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f007 fa35 	bl	80085b4 <memset>
  if(hi2c->Instance==I2C1)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a21      	ldr	r2, [pc, #132]	; (80011d4 <HAL_I2C_MspInit+0xb0>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d13b      	bne.n	80011cc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001154:	2340      	movs	r3, #64	; 0x40
 8001156:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001158:	2300      	movs	r3, #0
 800115a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	4618      	mov	r0, r3
 8001162:	f002 f9e7 	bl	8003534 <HAL_RCCEx_PeriphCLKConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800116c:	f7ff fe64 	bl	8000e38 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001170:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <HAL_I2C_MspInit+0xb4>)
 8001172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001174:	4a18      	ldr	r2, [pc, #96]	; (80011d8 <HAL_I2C_MspInit+0xb4>)
 8001176:	f043 0302 	orr.w	r3, r3, #2
 800117a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117c:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <HAL_I2C_MspInit+0xb4>)
 800117e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001188:	f44f 7340 	mov.w	r3, #768	; 0x300
 800118c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001190:	2312      	movs	r3, #18
 8001192:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119c:	2303      	movs	r3, #3
 800119e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011a2:	2304      	movs	r3, #4
 80011a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011ac:	4619      	mov	r1, r3
 80011ae:	480b      	ldr	r0, [pc, #44]	; (80011dc <HAL_I2C_MspInit+0xb8>)
 80011b0:	f000 fcba 	bl	8001b28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <HAL_I2C_MspInit+0xb4>)
 80011b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b8:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <HAL_I2C_MspInit+0xb4>)
 80011ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011be:	6593      	str	r3, [r2, #88]	; 0x58
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <HAL_I2C_MspInit+0xb4>)
 80011c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011cc:	bf00      	nop
 80011ce:	37b0      	adds	r7, #176	; 0xb0
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40005400 	.word	0x40005400
 80011d8:	40021000 	.word	0x40021000
 80011dc:	48000400 	.word	0x48000400

080011e0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <HAL_TIM_PWM_MspInit+0x38>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d10b      	bne.n	800120a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011f2:	4b0a      	ldr	r3, [pc, #40]	; (800121c <HAL_TIM_PWM_MspInit+0x3c>)
 80011f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f6:	4a09      	ldr	r2, [pc, #36]	; (800121c <HAL_TIM_PWM_MspInit+0x3c>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	6593      	str	r3, [r2, #88]	; 0x58
 80011fe:	4b07      	ldr	r3, [pc, #28]	; (800121c <HAL_TIM_PWM_MspInit+0x3c>)
 8001200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800120a:	bf00      	nop
 800120c:	3714      	adds	r7, #20
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40000400 	.word	0x40000400
 800121c:	40021000 	.word	0x40021000

08001220 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a11      	ldr	r2, [pc, #68]	; (8001284 <HAL_TIM_MspPostInit+0x64>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d11b      	bne.n	800127a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <HAL_TIM_MspPostInit+0x68>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	4a10      	ldr	r2, [pc, #64]	; (8001288 <HAL_TIM_MspPostInit+0x68>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <HAL_TIM_MspPostInit+0x68>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800125a:	2310      	movs	r3, #16
 800125c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001266:	2300      	movs	r3, #0
 8001268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800126a:	2302      	movs	r3, #2
 800126c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	4619      	mov	r1, r3
 8001274:	4805      	ldr	r0, [pc, #20]	; (800128c <HAL_TIM_MspPostInit+0x6c>)
 8001276:	f000 fc57 	bl	8001b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800127a:	bf00      	nop
 800127c:	3720      	adds	r7, #32
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40000400 	.word	0x40000400
 8001288:	40021000 	.word	0x40021000
 800128c:	48000400 	.word	0x48000400

08001290 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b0ac      	sub	sp, #176	; 0xb0
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	2288      	movs	r2, #136	; 0x88
 80012ae:	2100      	movs	r1, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f007 f97f 	bl	80085b4 <memset>
  if(huart->Instance==USART2)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a21      	ldr	r2, [pc, #132]	; (8001340 <HAL_UART_MspInit+0xb0>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d13b      	bne.n	8001338 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012c0:	2302      	movs	r3, #2
 80012c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4618      	mov	r0, r3
 80012ce:	f002 f931 	bl	8003534 <HAL_RCCEx_PeriphCLKConfig>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012d8:	f7ff fdae 	bl	8000e38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012dc:	4b19      	ldr	r3, [pc, #100]	; (8001344 <HAL_UART_MspInit+0xb4>)
 80012de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e0:	4a18      	ldr	r2, [pc, #96]	; (8001344 <HAL_UART_MspInit+0xb4>)
 80012e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e6:	6593      	str	r3, [r2, #88]	; 0x58
 80012e8:	4b16      	ldr	r3, [pc, #88]	; (8001344 <HAL_UART_MspInit+0xb4>)
 80012ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f4:	4b13      	ldr	r3, [pc, #76]	; (8001344 <HAL_UART_MspInit+0xb4>)
 80012f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f8:	4a12      	ldr	r2, [pc, #72]	; (8001344 <HAL_UART_MspInit+0xb4>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001300:	4b10      	ldr	r3, [pc, #64]	; (8001344 <HAL_UART_MspInit+0xb4>)
 8001302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800130c:	230c      	movs	r3, #12
 800130e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131e:	2303      	movs	r3, #3
 8001320:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001324:	2307      	movs	r3, #7
 8001326:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800132e:	4619      	mov	r1, r3
 8001330:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001334:	f000 fbf8 	bl	8001b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001338:	bf00      	nop
 800133a:	37b0      	adds	r7, #176	; 0xb0
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40004400 	.word	0x40004400
 8001344:	40021000 	.word	0x40021000

08001348 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08c      	sub	sp, #48	; 0x30
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001358:	2200      	movs	r2, #0
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	2019      	movs	r0, #25
 800135e:	f000 fa4d 	bl	80017fc <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001362:	2019      	movs	r0, #25
 8001364:	f000 fa66 	bl	8001834 <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8001368:	4b1e      	ldr	r3, [pc, #120]	; (80013e4 <HAL_InitTick+0x9c>)
 800136a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800136c:	4a1d      	ldr	r2, [pc, #116]	; (80013e4 <HAL_InitTick+0x9c>)
 800136e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001372:	6613      	str	r3, [r2, #96]	; 0x60
 8001374:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <HAL_InitTick+0x9c>)
 8001376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001380:	f107 0210 	add.w	r2, r7, #16
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4611      	mov	r1, r2
 800138a:	4618      	mov	r0, r3
 800138c:	f002 f840 	bl	8003410 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001390:	f002 f828 	bl	80033e4 <HAL_RCC_GetPCLK2Freq>
 8001394:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001398:	4a13      	ldr	r2, [pc, #76]	; (80013e8 <HAL_InitTick+0xa0>)
 800139a:	fba2 2303 	umull	r2, r3, r2, r3
 800139e:	0c9b      	lsrs	r3, r3, #18
 80013a0:	3b01      	subs	r3, #1
 80013a2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <HAL_InitTick+0xa4>)
 80013a6:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <HAL_InitTick+0xa8>)
 80013a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <HAL_InitTick+0xa4>)
 80013ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013b0:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 80013b2:	4a0e      	ldr	r2, [pc, #56]	; (80013ec <HAL_InitTick+0xa4>)
 80013b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b6:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <HAL_InitTick+0xa4>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013be:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <HAL_InitTick+0xa4>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 80013c4:	4809      	ldr	r0, [pc, #36]	; (80013ec <HAL_InitTick+0xa4>)
 80013c6:	f002 fd71 	bl	8003eac <HAL_TIM_Base_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d104      	bne.n	80013da <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 80013d0:	4806      	ldr	r0, [pc, #24]	; (80013ec <HAL_InitTick+0xa4>)
 80013d2:	f002 fdcd 	bl	8003f70 <HAL_TIM_Base_Start_IT>
 80013d6:	4603      	mov	r3, r0
 80013d8:	e000      	b.n	80013dc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3730      	adds	r7, #48	; 0x30
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40021000 	.word	0x40021000
 80013e8:	431bde83 	.word	0x431bde83
 80013ec:	20001334 	.word	0x20001334
 80013f0:	40014400 	.word	0x40014400

080013f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <NMI_Handler+0x4>

080013fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <HardFault_Handler+0x4>

08001400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <MemManage_Handler+0x4>

08001406 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <BusFault_Handler+0x4>

0800140c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <UsageFault_Handler+0x4>

08001412 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001424:	f000 fa14 	bl	8001850 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}

0800142c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001432:	f002 fe64 	bl	80040fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20001334 	.word	0x20001334

08001440 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
	return 1;
 8001444:	2301      	movs	r3, #1
}
 8001446:	4618      	mov	r0, r3
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <_kill>:

int _kill(int pid, int sig)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800145a:	f007 f873 	bl	8008544 <__errno>
 800145e:	4603      	mov	r3, r0
 8001460:	2216      	movs	r2, #22
 8001462:	601a      	str	r2, [r3, #0]
	return -1;
 8001464:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <_exit>:

void _exit (int status)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001478:	f04f 31ff 	mov.w	r1, #4294967295
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ffe7 	bl	8001450 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001482:	e7fe      	b.n	8001482 <_exit+0x12>

08001484 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	e00a      	b.n	80014ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001496:	f3af 8000 	nop.w
 800149a:	4601      	mov	r1, r0
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	60ba      	str	r2, [r7, #8]
 80014a2:	b2ca      	uxtb	r2, r1
 80014a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	3301      	adds	r3, #1
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	dbf0      	blt.n	8001496 <_read+0x12>
	}

return len;
 80014b4:	687b      	ldr	r3, [r7, #4]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <_close>:
	}
	return len;
}

int _close(int file)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
	return -1;
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014e6:	605a      	str	r2, [r3, #4]
	return 0;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <_isatty>:

int _isatty(int file)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
	return 1;
 80014fe:	2301      	movs	r3, #1
}
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
	return 0;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001530:	4a14      	ldr	r2, [pc, #80]	; (8001584 <_sbrk+0x5c>)
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <_sbrk+0x60>)
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800153c:	4b13      	ldr	r3, [pc, #76]	; (800158c <_sbrk+0x64>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d102      	bne.n	800154a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <_sbrk+0x64>)
 8001546:	4a12      	ldr	r2, [pc, #72]	; (8001590 <_sbrk+0x68>)
 8001548:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <_sbrk+0x64>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4413      	add	r3, r2
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	429a      	cmp	r2, r3
 8001556:	d207      	bcs.n	8001568 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001558:	f006 fff4 	bl	8008544 <__errno>
 800155c:	4603      	mov	r3, r0
 800155e:	220c      	movs	r2, #12
 8001560:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001562:	f04f 33ff 	mov.w	r3, #4294967295
 8001566:	e009      	b.n	800157c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <_sbrk+0x64>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800156e:	4b07      	ldr	r3, [pc, #28]	; (800158c <_sbrk+0x64>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	4a05      	ldr	r2, [pc, #20]	; (800158c <_sbrk+0x64>)
 8001578:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800157a:	68fb      	ldr	r3, [r7, #12]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20018000 	.word	0x20018000
 8001588:	00000400 	.word	0x00000400
 800158c:	20001380 	.word	0x20001380
 8001590:	20003858 	.word	0x20003858

08001594 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <SystemInit+0x20>)
 800159a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800159e:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <SystemInit+0x20>)
 80015a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015bc:	f7ff ffea 	bl	8001594 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015c0:	480c      	ldr	r0, [pc, #48]	; (80015f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80015c2:	490d      	ldr	r1, [pc, #52]	; (80015f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015c4:	4a0d      	ldr	r2, [pc, #52]	; (80015fc <LoopForever+0xe>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c8:	e002      	b.n	80015d0 <LoopCopyDataInit>

080015ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ce:	3304      	adds	r3, #4

080015d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d4:	d3f9      	bcc.n	80015ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d6:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015d8:	4c0a      	ldr	r4, [pc, #40]	; (8001604 <LoopForever+0x16>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015dc:	e001      	b.n	80015e2 <LoopFillZerobss>

080015de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e0:	3204      	adds	r2, #4

080015e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e4:	d3fb      	bcc.n	80015de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015e6:	f006 ffb3 	bl	8008550 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015ea:	f7ff fa19 	bl	8000a20 <main>

080015ee <LoopForever>:

LoopForever:
    b LoopForever
 80015ee:	e7fe      	b.n	80015ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f8:	20000484 	.word	0x20000484
  ldr r2, =_sidata
 80015fc:	0800a6f4 	.word	0x0800a6f4
  ldr r2, =_sbss
 8001600:	20000484 	.word	0x20000484
  ldr r4, =_ebss
 8001604:	20003858 	.word	0x20003858

08001608 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001608:	e7fe      	b.n	8001608 <ADC1_2_IRQHandler>
	...

0800160c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <HAL_Init+0x3c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a0b      	ldr	r2, [pc, #44]	; (8001648 <HAL_Init+0x3c>)
 800161c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001620:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001622:	2003      	movs	r0, #3
 8001624:	f000 f8df 	bl	80017e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001628:	200f      	movs	r0, #15
 800162a:	f7ff fe8d 	bl	8001348 <HAL_InitTick>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d002      	beq.n	800163a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	71fb      	strb	r3, [r7, #7]
 8001638:	e001      	b.n	800163e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800163a:	f7ff fd43 	bl	80010c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800163e:	79fb      	ldrb	r3, [r7, #7]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40022000 	.word	0x40022000

0800164c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_IncTick+0x20>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_IncTick+0x24>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4413      	add	r3, r2
 800165c:	4a04      	ldr	r2, [pc, #16]	; (8001670 <HAL_IncTick+0x24>)
 800165e:	6013      	str	r3, [r2, #0]
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	200003f8 	.word	0x200003f8
 8001670:	20001384 	.word	0x20001384

08001674 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return uwTick;
 8001678:	4b03      	ldr	r3, [pc, #12]	; (8001688 <HAL_GetTick+0x14>)
 800167a:	681b      	ldr	r3, [r3, #0]
}
 800167c:	4618      	mov	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	20001384 	.word	0x20001384

0800168c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a8:	4013      	ands	r3, r2
 80016aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016be:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	60d3      	str	r3, [r2, #12]
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d8:	4b04      	ldr	r3, [pc, #16]	; (80016ec <__NVIC_GetPriorityGrouping+0x18>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	0a1b      	lsrs	r3, r3, #8
 80016de:	f003 0307 	and.w	r3, r3, #7
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	db0b      	blt.n	800171a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	f003 021f 	and.w	r2, r3, #31
 8001708:	4907      	ldr	r1, [pc, #28]	; (8001728 <__NVIC_EnableIRQ+0x38>)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	095b      	lsrs	r3, r3, #5
 8001710:	2001      	movs	r0, #1
 8001712:	fa00 f202 	lsl.w	r2, r0, r2
 8001716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000e100 	.word	0xe000e100

0800172c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	6039      	str	r1, [r7, #0]
 8001736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173c:	2b00      	cmp	r3, #0
 800173e:	db0a      	blt.n	8001756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	b2da      	uxtb	r2, r3
 8001744:	490c      	ldr	r1, [pc, #48]	; (8001778 <__NVIC_SetPriority+0x4c>)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	0112      	lsls	r2, r2, #4
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	440b      	add	r3, r1
 8001750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001754:	e00a      	b.n	800176c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4908      	ldr	r1, [pc, #32]	; (800177c <__NVIC_SetPriority+0x50>)
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	3b04      	subs	r3, #4
 8001764:	0112      	lsls	r2, r2, #4
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	440b      	add	r3, r1
 800176a:	761a      	strb	r2, [r3, #24]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000e100 	.word	0xe000e100
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001780:	b480      	push	{r7}
 8001782:	b089      	sub	sp, #36	; 0x24
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f1c3 0307 	rsb	r3, r3, #7
 800179a:	2b04      	cmp	r3, #4
 800179c:	bf28      	it	cs
 800179e:	2304      	movcs	r3, #4
 80017a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3304      	adds	r3, #4
 80017a6:	2b06      	cmp	r3, #6
 80017a8:	d902      	bls.n	80017b0 <NVIC_EncodePriority+0x30>
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3b03      	subs	r3, #3
 80017ae:	e000      	b.n	80017b2 <NVIC_EncodePriority+0x32>
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	f04f 32ff 	mov.w	r2, #4294967295
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43da      	mvns	r2, r3
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	401a      	ands	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c8:	f04f 31ff 	mov.w	r1, #4294967295
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	fa01 f303 	lsl.w	r3, r1, r3
 80017d2:	43d9      	mvns	r1, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d8:	4313      	orrs	r3, r2
         );
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3724      	adds	r7, #36	; 0x24
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff ff4c 	bl	800168c <__NVIC_SetPriorityGrouping>
}
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
 8001808:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800180e:	f7ff ff61 	bl	80016d4 <__NVIC_GetPriorityGrouping>
 8001812:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	68b9      	ldr	r1, [r7, #8]
 8001818:	6978      	ldr	r0, [r7, #20]
 800181a:	f7ff ffb1 	bl	8001780 <NVIC_EncodePriority>
 800181e:	4602      	mov	r2, r0
 8001820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001824:	4611      	mov	r1, r2
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff ff80 	bl	800172c <__NVIC_SetPriority>
}
 800182c:	bf00      	nop
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff ff54 	bl	80016f0 <__NVIC_EnableIRQ>
}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
  uint32_t tmp_page;
  uint32_t error;
  FLASH_ProcedureTypeDef procedure;

  /* If the operation is completed, disable the PG, PNB, MER1, MER2 and PER Bit */
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_MER1 | FLASH_CR_PER | FLASH_CR_PNB));
 8001856:	4b68      	ldr	r3, [pc, #416]	; (80019f8 <HAL_FLASH_IRQHandler+0x1a8>)
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	4a67      	ldr	r2, [pc, #412]	; (80019f8 <HAL_FLASH_IRQHandler+0x1a8>)
 800185c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001860:	f023 0307 	bic.w	r3, r3, #7
 8001864:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  CLEAR_BIT(FLASH->CR, FLASH_CR_MER2);
 8001866:	4b64      	ldr	r3, [pc, #400]	; (80019f8 <HAL_FLASH_IRQHandler+0x1a8>)
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	4a63      	ldr	r2, [pc, #396]	; (80019f8 <HAL_FLASH_IRQHandler+0x1a8>)
 800186c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001870:	6153      	str	r3, [r2, #20]
#endif

  /* Disable the FSTPG Bit only if it is the last row programmed */
  if(pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAM_LAST)
 8001872:	4b62      	ldr	r3, [pc, #392]	; (80019fc <HAL_FLASH_IRQHandler+0x1ac>)
 8001874:	7a1b      	ldrb	r3, [r3, #8]
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b04      	cmp	r3, #4
 800187a:	d105      	bne.n	8001888 <HAL_FLASH_IRQHandler+0x38>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800187c:	4b5e      	ldr	r3, [pc, #376]	; (80019f8 <HAL_FLASH_IRQHandler+0x1a8>)
 800187e:	695b      	ldr	r3, [r3, #20]
 8001880:	4a5d      	ldr	r2, [pc, #372]	; (80019f8 <HAL_FLASH_IRQHandler+0x1a8>)
 8001882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001886:	6153      	str	r3, [r2, #20]
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8001888:	4b5b      	ldr	r3, [pc, #364]	; (80019f8 <HAL_FLASH_IRQHandler+0x1a8>)
 800188a:	691a      	ldr	r2, [r3, #16]
 800188c:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8001890:	4013      	ands	r3, r2
 8001892:	60fb      	str	r3, [r7, #12]

  if (error !=0U)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d045      	beq.n	8001926 <HAL_FLASH_IRQHandler+0xd6>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800189a:	4b58      	ldr	r3, [pc, #352]	; (80019fc <HAL_FLASH_IRQHandler+0x1ac>)
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	4a56      	ldr	r2, [pc, #344]	; (80019fc <HAL_FLASH_IRQHandler+0x1ac>)
 80018a4:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d007      	beq.n	80018c0 <HAL_FLASH_IRQHandler+0x70>
 80018b0:	4b51      	ldr	r3, [pc, #324]	; (80019f8 <HAL_FLASH_IRQHandler+0x1a8>)
 80018b2:	699a      	ldr	r2, [r3, #24]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80018ba:	494f      	ldr	r1, [pc, #316]	; (80019f8 <HAL_FLASH_IRQHandler+0x1a8>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	618b      	str	r3, [r1, #24]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d004      	beq.n	80018d4 <HAL_FLASH_IRQHandler+0x84>
 80018ca:	4a4b      	ldr	r2, [pc, #300]	; (80019f8 <HAL_FLASH_IRQHandler+0x1a8>)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80018d2:	6113      	str	r3, [r2, #16]

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches() ;
 80018d4:	f000 f8de 	bl	8001a94 <FLASH_FlushCaches>

    /* FLASH error interrupt user callback */
    procedure = pFlash.ProcedureOnGoing;
 80018d8:	4b48      	ldr	r3, [pc, #288]	; (80019fc <HAL_FLASH_IRQHandler+0x1ac>)
 80018da:	7a1b      	ldrb	r3, [r3, #8]
 80018dc:	72fb      	strb	r3, [r7, #11]
    if(procedure == FLASH_PROC_PAGE_ERASE)
 80018de:	7afb      	ldrb	r3, [r7, #11]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d105      	bne.n	80018f0 <HAL_FLASH_IRQHandler+0xa0>
    {
       HAL_FLASH_OperationErrorCallback(pFlash.Page);
 80018e4:	4b45      	ldr	r3, [pc, #276]	; (80019fc <HAL_FLASH_IRQHandler+0x1ac>)
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 f893 	bl	8001a14 <HAL_FLASH_OperationErrorCallback>
 80018ee:	e017      	b.n	8001920 <HAL_FLASH_IRQHandler+0xd0>
    }
    else if(procedure == FLASH_PROC_MASS_ERASE)
 80018f0:	7afb      	ldrb	r3, [r7, #11]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d105      	bne.n	8001902 <HAL_FLASH_IRQHandler+0xb2>
    {
        HAL_FLASH_OperationErrorCallback(pFlash.Bank);
 80018f6:	4b41      	ldr	r3, [pc, #260]	; (80019fc <HAL_FLASH_IRQHandler+0x1ac>)
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 f88a 	bl	8001a14 <HAL_FLASH_OperationErrorCallback>
 8001900:	e00e      	b.n	8001920 <HAL_FLASH_IRQHandler+0xd0>
    }
    else if((procedure == FLASH_PROC_PROGRAM) ||
 8001902:	7afb      	ldrb	r3, [r7, #11]
 8001904:	2b03      	cmp	r3, #3
 8001906:	d002      	beq.n	800190e <HAL_FLASH_IRQHandler+0xbe>
 8001908:	7afb      	ldrb	r3, [r7, #11]
 800190a:	2b04      	cmp	r3, #4
 800190c:	d105      	bne.n	800191a <HAL_FLASH_IRQHandler+0xca>
            (procedure == FLASH_PROC_PROGRAM_LAST))
    {
       HAL_FLASH_OperationErrorCallback(pFlash.Address);
 800190e:	4b3b      	ldr	r3, [pc, #236]	; (80019fc <HAL_FLASH_IRQHandler+0x1ac>)
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	4618      	mov	r0, r3
 8001914:	f000 f87e 	bl	8001a14 <HAL_FLASH_OperationErrorCallback>
 8001918:	e002      	b.n	8001920 <HAL_FLASH_IRQHandler+0xd0>
    }
    else
    {
       HAL_FLASH_OperationErrorCallback(0U);
 800191a:	2000      	movs	r0, #0
 800191c:	f000 f87a 	bl	8001a14 <HAL_FLASH_OperationErrorCallback>
    }

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001920:	4b36      	ldr	r3, [pc, #216]	; (80019fc <HAL_FLASH_IRQHandler+0x1ac>)
 8001922:	2200      	movs	r2, #0
 8001924:	721a      	strb	r2, [r3, #8]
  }

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != 0U)
 8001926:	4b34      	ldr	r3, [pc, #208]	; (80019f8 <HAL_FLASH_IRQHandler+0x1a8>)
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d04f      	beq.n	80019d2 <HAL_FLASH_IRQHandler+0x182>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001932:	4b31      	ldr	r3, [pc, #196]	; (80019f8 <HAL_FLASH_IRQHandler+0x1a8>)
 8001934:	2201      	movs	r2, #1
 8001936:	611a      	str	r2, [r3, #16]

    if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGE_ERASE)
 8001938:	4b30      	ldr	r3, [pc, #192]	; (80019fc <HAL_FLASH_IRQHandler+0x1ac>)
 800193a:	7a1b      	ldrb	r3, [r3, #8]
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b01      	cmp	r3, #1
 8001940:	d12b      	bne.n	800199a <HAL_FLASH_IRQHandler+0x14a>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 8001942:	4b2e      	ldr	r3, [pc, #184]	; (80019fc <HAL_FLASH_IRQHandler+0x1ac>)
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	3b01      	subs	r3, #1
 8001948:	4a2c      	ldr	r2, [pc, #176]	; (80019fc <HAL_FLASH_IRQHandler+0x1ac>)
 800194a:	6193      	str	r3, [r2, #24]

      /* Check if there are still pages to erase*/
      if(pFlash.NbPagesToErase != 0U)
 800194c:	4b2b      	ldr	r3, [pc, #172]	; (80019fc <HAL_FLASH_IRQHandler+0x1ac>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d013      	beq.n	800197c <HAL_FLASH_IRQHandler+0x12c>
      {
        /* Indicate user which page has been erased*/
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 8001954:	4b29      	ldr	r3, [pc, #164]	; (80019fc <HAL_FLASH_IRQHandler+0x1ac>)
 8001956:	695b      	ldr	r3, [r3, #20]
 8001958:	4618      	mov	r0, r3
 800195a:	f000 f851 	bl	8001a00 <HAL_FLASH_EndOfOperationCallback>

        /* Increment page number */
        pFlash.Page++;
 800195e:	4b27      	ldr	r3, [pc, #156]	; (80019fc <HAL_FLASH_IRQHandler+0x1ac>)
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	3301      	adds	r3, #1
 8001964:	4a25      	ldr	r2, [pc, #148]	; (80019fc <HAL_FLASH_IRQHandler+0x1ac>)
 8001966:	6153      	str	r3, [r2, #20]
        tmp_page = pFlash.Page;
 8001968:	4b24      	ldr	r3, [pc, #144]	; (80019fc <HAL_FLASH_IRQHandler+0x1ac>)
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	607b      	str	r3, [r7, #4]
        FLASH_PageErase(tmp_page, pFlash.Bank);
 800196e:	4b23      	ldr	r3, [pc, #140]	; (80019fc <HAL_FLASH_IRQHandler+0x1ac>)
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	4619      	mov	r1, r3
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 f857 	bl	8001a28 <FLASH_PageErase>
 800197a:	e02a      	b.n	80019d2 <HAL_FLASH_IRQHandler+0x182>
      }
      else
      {
        /* No more pages to Erase */
        /* Reset Address and stop Erase pages procedure */
        pFlash.Page = 0xFFFFFFFFU;
 800197c:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <HAL_FLASH_IRQHandler+0x1ac>)
 800197e:	f04f 32ff 	mov.w	r2, #4294967295
 8001982:	615a      	str	r2, [r3, #20]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001984:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <HAL_FLASH_IRQHandler+0x1ac>)
 8001986:	2200      	movs	r2, #0
 8001988:	721a      	strb	r2, [r3, #8]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800198a:	f000 f883 	bl	8001a94 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 800198e:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <HAL_FLASH_IRQHandler+0x1ac>)
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	4618      	mov	r0, r3
 8001994:	f000 f834 	bl	8001a00 <HAL_FLASH_EndOfOperationCallback>
 8001998:	e01b      	b.n	80019d2 <HAL_FLASH_IRQHandler+0x182>
      }
    }
    else
    {
      /* Flush the caches to be sure of the data consistency */
      FLASH_FlushCaches() ;
 800199a:	f000 f87b 	bl	8001a94 <FLASH_FlushCaches>

      procedure = pFlash.ProcedureOnGoing;
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <HAL_FLASH_IRQHandler+0x1ac>)
 80019a0:	7a1b      	ldrb	r3, [r3, #8]
 80019a2:	72fb      	strb	r3, [r7, #11]
      if(procedure == FLASH_PROC_MASS_ERASE)
 80019a4:	7afb      	ldrb	r3, [r7, #11]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d105      	bne.n	80019b6 <HAL_FLASH_IRQHandler+0x166>
      {
        /* MassErase ended. Return the selected bank */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 80019aa:	4b14      	ldr	r3, [pc, #80]	; (80019fc <HAL_FLASH_IRQHandler+0x1ac>)
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f000 f826 	bl	8001a00 <HAL_FLASH_EndOfOperationCallback>
 80019b4:	e00a      	b.n	80019cc <HAL_FLASH_IRQHandler+0x17c>
      }
      else if((procedure == FLASH_PROC_PROGRAM) ||
 80019b6:	7afb      	ldrb	r3, [r7, #11]
 80019b8:	2b03      	cmp	r3, #3
 80019ba:	d002      	beq.n	80019c2 <HAL_FLASH_IRQHandler+0x172>
 80019bc:	7afb      	ldrb	r3, [r7, #11]
 80019be:	2b04      	cmp	r3, #4
 80019c0:	d104      	bne.n	80019cc <HAL_FLASH_IRQHandler+0x17c>
              (procedure == FLASH_PROC_PROGRAM_LAST))
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80019c2:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <HAL_FLASH_IRQHandler+0x1ac>)
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 f81a 	bl	8001a00 <HAL_FLASH_EndOfOperationCallback>
      {
        /* Nothing to do */
      }

      /*Clear the procedure ongoing*/
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <HAL_FLASH_IRQHandler+0x1ac>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	721a      	strb	r2, [r3, #8]
    }
  }

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80019d2:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <HAL_FLASH_IRQHandler+0x1ac>)
 80019d4:	7a1b      	ldrb	r3, [r3, #8]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d108      	bne.n	80019ee <HAL_FLASH_IRQHandler+0x19e>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <HAL_FLASH_IRQHandler+0x1a8>)
 80019de:	695b      	ldr	r3, [r3, #20]
 80019e0:	4a05      	ldr	r2, [pc, #20]	; (80019f8 <HAL_FLASH_IRQHandler+0x1a8>)
 80019e2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80019e6:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 80019e8:	4b04      	ldr	r3, [pc, #16]	; (80019fc <HAL_FLASH_IRQHandler+0x1ac>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]
  }
}
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40022000 	.word	0x40022000
 80019fc:	200003fc 	.word	0x200003fc

08001a00 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d006      	beq.n	8001a4a <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8001a3c:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <FLASH_PageErase+0x68>)
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	4a13      	ldr	r2, [pc, #76]	; (8001a90 <FLASH_PageErase+0x68>)
 8001a42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a46:	6153      	str	r3, [r2, #20]
 8001a48:	e005      	b.n	8001a56 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8001a4a:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <FLASH_PageErase+0x68>)
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	4a10      	ldr	r2, [pc, #64]	; (8001a90 <FLASH_PageErase+0x68>)
 8001a50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a54:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8001a56:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <FLASH_PageErase+0x68>)
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8001a66:	490a      	ldr	r1, [pc, #40]	; (8001a90 <FLASH_PageErase+0x68>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001a6c:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <FLASH_PageErase+0x68>)
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	4a07      	ldr	r2, [pc, #28]	; (8001a90 <FLASH_PageErase+0x68>)
 8001a72:	f043 0302 	orr.w	r3, r3, #2
 8001a76:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <FLASH_PageErase+0x68>)
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <FLASH_PageErase+0x68>)
 8001a7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a82:	6153      	str	r3, [r2, #20]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	40022000 	.word	0x40022000

08001a94 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8001a9a:	4b21      	ldr	r3, [pc, #132]	; (8001b20 <FLASH_FlushCaches+0x8c>)
 8001a9c:	7f1b      	ldrb	r3, [r3, #28]
 8001a9e:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d002      	beq.n	8001aac <FLASH_FlushCaches+0x18>
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d117      	bne.n	8001adc <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001aac:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <FLASH_FlushCaches+0x90>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a1c      	ldr	r2, [pc, #112]	; (8001b24 <FLASH_FlushCaches+0x90>)
 8001ab2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ab6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <FLASH_FlushCaches+0x90>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a19      	ldr	r2, [pc, #100]	; (8001b24 <FLASH_FlushCaches+0x90>)
 8001abe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	4b17      	ldr	r3, [pc, #92]	; (8001b24 <FLASH_FlushCaches+0x90>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a16      	ldr	r2, [pc, #88]	; (8001b24 <FLASH_FlushCaches+0x90>)
 8001aca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ace:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ad0:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <FLASH_FlushCaches+0x90>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a13      	ldr	r2, [pc, #76]	; (8001b24 <FLASH_FlushCaches+0x90>)
 8001ad6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ada:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d002      	beq.n	8001ae8 <FLASH_FlushCaches+0x54>
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	2b03      	cmp	r3, #3
 8001ae6:	d111      	bne.n	8001b0c <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001ae8:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <FLASH_FlushCaches+0x90>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0d      	ldr	r2, [pc, #52]	; (8001b24 <FLASH_FlushCaches+0x90>)
 8001aee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <FLASH_FlushCaches+0x90>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <FLASH_FlushCaches+0x90>)
 8001afa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001afe:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b00:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <FLASH_FlushCaches+0x90>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a07      	ldr	r2, [pc, #28]	; (8001b24 <FLASH_FlushCaches+0x90>)
 8001b06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b0a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001b0c:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <FLASH_FlushCaches+0x8c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	771a      	strb	r2, [r3, #28]
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	200003fc 	.word	0x200003fc
 8001b24:	40022000 	.word	0x40022000

08001b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b087      	sub	sp, #28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b36:	e17f      	b.n	8001e38 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	fa01 f303 	lsl.w	r3, r1, r3
 8001b44:	4013      	ands	r3, r2
 8001b46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 8171 	beq.w	8001e32 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d005      	beq.n	8001b68 <HAL_GPIO_Init+0x40>
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d130      	bne.n	8001bca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	2203      	movs	r2, #3
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4013      	ands	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	091b      	lsrs	r3, r3, #4
 8001bb4:	f003 0201 	and.w	r2, r3, #1
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d118      	bne.n	8001c08 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001bdc:	2201      	movs	r2, #1
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4013      	ands	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	08db      	lsrs	r3, r3, #3
 8001bf2:	f003 0201 	and.w	r2, r3, #1
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	2b03      	cmp	r3, #3
 8001c12:	d017      	beq.n	8001c44 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	2203      	movs	r2, #3
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d123      	bne.n	8001c98 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	08da      	lsrs	r2, r3, #3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3208      	adds	r2, #8
 8001c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	220f      	movs	r2, #15
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	691a      	ldr	r2, [r3, #16]
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	08da      	lsrs	r2, r3, #3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	3208      	adds	r2, #8
 8001c92:	6939      	ldr	r1, [r7, #16]
 8001c94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	2203      	movs	r2, #3
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 0203 	and.w	r2, r3, #3
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 80ac 	beq.w	8001e32 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cda:	4b5f      	ldr	r3, [pc, #380]	; (8001e58 <HAL_GPIO_Init+0x330>)
 8001cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cde:	4a5e      	ldr	r2, [pc, #376]	; (8001e58 <HAL_GPIO_Init+0x330>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ce6:	4b5c      	ldr	r3, [pc, #368]	; (8001e58 <HAL_GPIO_Init+0x330>)
 8001ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cf2:	4a5a      	ldr	r2, [pc, #360]	; (8001e5c <HAL_GPIO_Init+0x334>)
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	089b      	lsrs	r3, r3, #2
 8001cf8:	3302      	adds	r3, #2
 8001cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	220f      	movs	r2, #15
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	4013      	ands	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d1c:	d025      	beq.n	8001d6a <HAL_GPIO_Init+0x242>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a4f      	ldr	r2, [pc, #316]	; (8001e60 <HAL_GPIO_Init+0x338>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d01f      	beq.n	8001d66 <HAL_GPIO_Init+0x23e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a4e      	ldr	r2, [pc, #312]	; (8001e64 <HAL_GPIO_Init+0x33c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d019      	beq.n	8001d62 <HAL_GPIO_Init+0x23a>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a4d      	ldr	r2, [pc, #308]	; (8001e68 <HAL_GPIO_Init+0x340>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d013      	beq.n	8001d5e <HAL_GPIO_Init+0x236>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a4c      	ldr	r2, [pc, #304]	; (8001e6c <HAL_GPIO_Init+0x344>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d00d      	beq.n	8001d5a <HAL_GPIO_Init+0x232>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a4b      	ldr	r2, [pc, #300]	; (8001e70 <HAL_GPIO_Init+0x348>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d007      	beq.n	8001d56 <HAL_GPIO_Init+0x22e>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a4a      	ldr	r2, [pc, #296]	; (8001e74 <HAL_GPIO_Init+0x34c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d101      	bne.n	8001d52 <HAL_GPIO_Init+0x22a>
 8001d4e:	2306      	movs	r3, #6
 8001d50:	e00c      	b.n	8001d6c <HAL_GPIO_Init+0x244>
 8001d52:	2307      	movs	r3, #7
 8001d54:	e00a      	b.n	8001d6c <HAL_GPIO_Init+0x244>
 8001d56:	2305      	movs	r3, #5
 8001d58:	e008      	b.n	8001d6c <HAL_GPIO_Init+0x244>
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	e006      	b.n	8001d6c <HAL_GPIO_Init+0x244>
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e004      	b.n	8001d6c <HAL_GPIO_Init+0x244>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e002      	b.n	8001d6c <HAL_GPIO_Init+0x244>
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <HAL_GPIO_Init+0x244>
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	f002 0203 	and.w	r2, r2, #3
 8001d72:	0092      	lsls	r2, r2, #2
 8001d74:	4093      	lsls	r3, r2
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d7c:	4937      	ldr	r1, [pc, #220]	; (8001e5c <HAL_GPIO_Init+0x334>)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	089b      	lsrs	r3, r3, #2
 8001d82:	3302      	adds	r3, #2
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d8a:	4b3b      	ldr	r3, [pc, #236]	; (8001e78 <HAL_GPIO_Init+0x350>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	43db      	mvns	r3, r3
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4013      	ands	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dae:	4a32      	ldr	r2, [pc, #200]	; (8001e78 <HAL_GPIO_Init+0x350>)
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001db4:	4b30      	ldr	r3, [pc, #192]	; (8001e78 <HAL_GPIO_Init+0x350>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dd8:	4a27      	ldr	r2, [pc, #156]	; (8001e78 <HAL_GPIO_Init+0x350>)
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001dde:	4b26      	ldr	r3, [pc, #152]	; (8001e78 <HAL_GPIO_Init+0x350>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	4013      	ands	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e02:	4a1d      	ldr	r2, [pc, #116]	; (8001e78 <HAL_GPIO_Init+0x350>)
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e08:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <HAL_GPIO_Init+0x350>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	43db      	mvns	r3, r3
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4013      	ands	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e2c:	4a12      	ldr	r2, [pc, #72]	; (8001e78 <HAL_GPIO_Init+0x350>)
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	3301      	adds	r3, #1
 8001e36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f47f ae78 	bne.w	8001b38 <HAL_GPIO_Init+0x10>
  }
}
 8001e48:	bf00      	nop
 8001e4a:	bf00      	nop
 8001e4c:	371c      	adds	r7, #28
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40010000 	.word	0x40010000
 8001e60:	48000400 	.word	0x48000400
 8001e64:	48000800 	.word	0x48000800
 8001e68:	48000c00 	.word	0x48000c00
 8001e6c:	48001000 	.word	0x48001000
 8001e70:	48001400 	.word	0x48001400
 8001e74:	48001800 	.word	0x48001800
 8001e78:	40010400 	.word	0x40010400

08001e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	807b      	strh	r3, [r7, #2]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e8c:	787b      	ldrb	r3, [r7, #1]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e92:	887a      	ldrh	r2, [r7, #2]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e98:	e002      	b.n	8001ea0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e9a:	887a      	ldrh	r2, [r7, #2]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ebe:	887a      	ldrh	r2, [r7, #2]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	041a      	lsls	r2, r3, #16
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	43d9      	mvns	r1, r3
 8001eca:	887b      	ldrh	r3, [r7, #2]
 8001ecc:	400b      	ands	r3, r1
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	619a      	str	r2, [r3, #24]
}
 8001ed4:	bf00      	nop
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e081      	b.n	8001ff6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d106      	bne.n	8001f0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff f90c 	bl	8001124 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2224      	movs	r2, #36	; 0x24
 8001f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0201 	bic.w	r2, r2, #1
 8001f22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d107      	bne.n	8001f5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	e006      	b.n	8001f68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d104      	bne.n	8001f7a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68da      	ldr	r2, [r3, #12]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691a      	ldr	r2, [r3, #16]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69d9      	ldr	r1, [r3, #28]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a1a      	ldr	r2, [r3, #32]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0201 	orr.w	r2, r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2220      	movs	r2, #32
 8001fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b088      	sub	sp, #32
 8002004:	af02      	add	r7, sp, #8
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	4608      	mov	r0, r1
 800200a:	4611      	mov	r1, r2
 800200c:	461a      	mov	r2, r3
 800200e:	4603      	mov	r3, r0
 8002010:	817b      	strh	r3, [r7, #10]
 8002012:	460b      	mov	r3, r1
 8002014:	813b      	strh	r3, [r7, #8]
 8002016:	4613      	mov	r3, r2
 8002018:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b20      	cmp	r3, #32
 8002024:	f040 80fd 	bne.w	8002222 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002028:	6a3b      	ldr	r3, [r7, #32]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d002      	beq.n	8002034 <HAL_I2C_Mem_Read+0x34>
 800202e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002030:	2b00      	cmp	r3, #0
 8002032:	d105      	bne.n	8002040 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f44f 7200 	mov.w	r2, #512	; 0x200
 800203a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e0f1      	b.n	8002224 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002046:	2b01      	cmp	r3, #1
 8002048:	d101      	bne.n	800204e <HAL_I2C_Mem_Read+0x4e>
 800204a:	2302      	movs	r3, #2
 800204c:	e0ea      	b.n	8002224 <HAL_I2C_Mem_Read+0x224>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002056:	f7ff fb0d 	bl	8001674 <HAL_GetTick>
 800205a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	2319      	movs	r3, #25
 8002062:	2201      	movs	r2, #1
 8002064:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f000 f95b 	bl	8002324 <I2C_WaitOnFlagUntilTimeout>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e0d5      	b.n	8002224 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2222      	movs	r2, #34	; 0x22
 800207c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2240      	movs	r2, #64	; 0x40
 8002084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6a3a      	ldr	r2, [r7, #32]
 8002092:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002098:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020a0:	88f8      	ldrh	r0, [r7, #6]
 80020a2:	893a      	ldrh	r2, [r7, #8]
 80020a4:	8979      	ldrh	r1, [r7, #10]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	9301      	str	r3, [sp, #4]
 80020aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ac:	9300      	str	r3, [sp, #0]
 80020ae:	4603      	mov	r3, r0
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f000 f8bf 	bl	8002234 <I2C_RequestMemoryRead>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e0ad      	b.n	8002224 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	2bff      	cmp	r3, #255	; 0xff
 80020d0:	d90e      	bls.n	80020f0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	22ff      	movs	r2, #255	; 0xff
 80020d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	8979      	ldrh	r1, [r7, #10]
 80020e0:	4b52      	ldr	r3, [pc, #328]	; (800222c <HAL_I2C_Mem_Read+0x22c>)
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f000 fac3 	bl	8002674 <I2C_TransferConfig>
 80020ee:	e00f      	b.n	8002110 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	8979      	ldrh	r1, [r7, #10]
 8002102:	4b4a      	ldr	r3, [pc, #296]	; (800222c <HAL_I2C_Mem_Read+0x22c>)
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 fab2 	bl	8002674 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002116:	2200      	movs	r2, #0
 8002118:	2104      	movs	r1, #4
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 f902 	bl	8002324 <I2C_WaitOnFlagUntilTimeout>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e07c      	b.n	8002224 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213c:	1c5a      	adds	r2, r3, #1
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002146:	3b01      	subs	r3, #1
 8002148:	b29a      	uxth	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002152:	b29b      	uxth	r3, r3
 8002154:	3b01      	subs	r3, #1
 8002156:	b29a      	uxth	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002160:	b29b      	uxth	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d034      	beq.n	80021d0 <HAL_I2C_Mem_Read+0x1d0>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216a:	2b00      	cmp	r3, #0
 800216c:	d130      	bne.n	80021d0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002174:	2200      	movs	r2, #0
 8002176:	2180      	movs	r1, #128	; 0x80
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f000 f8d3 	bl	8002324 <I2C_WaitOnFlagUntilTimeout>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e04d      	b.n	8002224 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800218c:	b29b      	uxth	r3, r3
 800218e:	2bff      	cmp	r3, #255	; 0xff
 8002190:	d90e      	bls.n	80021b0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	22ff      	movs	r2, #255	; 0xff
 8002196:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800219c:	b2da      	uxtb	r2, r3
 800219e:	8979      	ldrh	r1, [r7, #10]
 80021a0:	2300      	movs	r3, #0
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f000 fa63 	bl	8002674 <I2C_TransferConfig>
 80021ae:	e00f      	b.n	80021d0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	8979      	ldrh	r1, [r7, #10]
 80021c2:	2300      	movs	r3, #0
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 fa52 	bl	8002674 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d19a      	bne.n	8002110 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f000 f920 	bl	8002424 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e01a      	b.n	8002224 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2220      	movs	r2, #32
 80021f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6859      	ldr	r1, [r3, #4]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_I2C_Mem_Read+0x230>)
 8002202:	400b      	ands	r3, r1
 8002204:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2220      	movs	r2, #32
 800220a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800221e:	2300      	movs	r3, #0
 8002220:	e000      	b.n	8002224 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002222:	2302      	movs	r3, #2
  }
}
 8002224:	4618      	mov	r0, r3
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	80002400 	.word	0x80002400
 8002230:	fe00e800 	.word	0xfe00e800

08002234 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af02      	add	r7, sp, #8
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	4608      	mov	r0, r1
 800223e:	4611      	mov	r1, r2
 8002240:	461a      	mov	r2, r3
 8002242:	4603      	mov	r3, r0
 8002244:	817b      	strh	r3, [r7, #10]
 8002246:	460b      	mov	r3, r1
 8002248:	813b      	strh	r3, [r7, #8]
 800224a:	4613      	mov	r3, r2
 800224c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800224e:	88fb      	ldrh	r3, [r7, #6]
 8002250:	b2da      	uxtb	r2, r3
 8002252:	8979      	ldrh	r1, [r7, #10]
 8002254:	4b20      	ldr	r3, [pc, #128]	; (80022d8 <I2C_RequestMemoryRead+0xa4>)
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	2300      	movs	r3, #0
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f000 fa0a 	bl	8002674 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002260:	69fa      	ldr	r2, [r7, #28]
 8002262:	69b9      	ldr	r1, [r7, #24]
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 f89d 	bl	80023a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e02c      	b.n	80022ce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002274:	88fb      	ldrh	r3, [r7, #6]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d105      	bne.n	8002286 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800227a:	893b      	ldrh	r3, [r7, #8]
 800227c:	b2da      	uxtb	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	629a      	str	r2, [r3, #40]	; 0x28
 8002284:	e015      	b.n	80022b2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002286:	893b      	ldrh	r3, [r7, #8]
 8002288:	0a1b      	lsrs	r3, r3, #8
 800228a:	b29b      	uxth	r3, r3
 800228c:	b2da      	uxtb	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002294:	69fa      	ldr	r2, [r7, #28]
 8002296:	69b9      	ldr	r1, [r7, #24]
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f000 f883 	bl	80023a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e012      	b.n	80022ce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022a8:	893b      	ldrh	r3, [r7, #8]
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	2200      	movs	r2, #0
 80022ba:	2140      	movs	r1, #64	; 0x40
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f000 f831 	bl	8002324 <I2C_WaitOnFlagUntilTimeout>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e000      	b.n	80022ce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	80002000 	.word	0x80002000

080022dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d103      	bne.n	80022fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2200      	movs	r2, #0
 80022f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b01      	cmp	r3, #1
 8002306:	d007      	beq.n	8002318 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	699a      	ldr	r2, [r3, #24]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 0201 	orr.w	r2, r2, #1
 8002316:	619a      	str	r2, [r3, #24]
  }
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	603b      	str	r3, [r7, #0]
 8002330:	4613      	mov	r3, r2
 8002332:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002334:	e022      	b.n	800237c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233c:	d01e      	beq.n	800237c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800233e:	f7ff f999 	bl	8001674 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d302      	bcc.n	8002354 <I2C_WaitOnFlagUntilTimeout+0x30>
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d113      	bne.n	800237c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002358:	f043 0220 	orr.w	r2, r3, #32
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e00f      	b.n	800239c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699a      	ldr	r2, [r3, #24]
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	4013      	ands	r3, r2
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	429a      	cmp	r2, r3
 800238a:	bf0c      	ite	eq
 800238c:	2301      	moveq	r3, #1
 800238e:	2300      	movne	r3, #0
 8002390:	b2db      	uxtb	r3, r3
 8002392:	461a      	mov	r2, r3
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	429a      	cmp	r2, r3
 8002398:	d0cd      	beq.n	8002336 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023b0:	e02c      	b.n	800240c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	68b9      	ldr	r1, [r7, #8]
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 f870 	bl	800249c <I2C_IsErrorOccurred>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e02a      	b.n	800241c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023cc:	d01e      	beq.n	800240c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ce:	f7ff f951 	bl	8001674 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d302      	bcc.n	80023e4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d113      	bne.n	800240c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e8:	f043 0220 	orr.w	r2, r3, #32
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2220      	movs	r2, #32
 80023f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e007      	b.n	800241c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b02      	cmp	r3, #2
 8002418:	d1cb      	bne.n	80023b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002430:	e028      	b.n	8002484 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 f830 	bl	800249c <I2C_IsErrorOccurred>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e026      	b.n	8002494 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002446:	f7ff f915 	bl	8001674 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	429a      	cmp	r2, r3
 8002454:	d302      	bcc.n	800245c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d113      	bne.n	8002484 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002460:	f043 0220 	orr.w	r2, r3, #32
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2220      	movs	r2, #32
 800246c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e007      	b.n	8002494 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	f003 0320 	and.w	r3, r3, #32
 800248e:	2b20      	cmp	r3, #32
 8002490:	d1cf      	bne.n	8002432 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08a      	sub	sp, #40	; 0x28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024a8:	2300      	movs	r3, #0
 80024aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	f003 0310 	and.w	r3, r3, #16
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d075      	beq.n	80025b4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2210      	movs	r2, #16
 80024ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024d0:	e056      	b.n	8002580 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d8:	d052      	beq.n	8002580 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024da:	f7ff f8cb 	bl	8001674 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d302      	bcc.n	80024f0 <I2C_IsErrorOccurred+0x54>
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d147      	bne.n	8002580 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002502:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800250e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002512:	d12e      	bne.n	8002572 <I2C_IsErrorOccurred+0xd6>
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800251a:	d02a      	beq.n	8002572 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800251c:	7cfb      	ldrb	r3, [r7, #19]
 800251e:	2b20      	cmp	r3, #32
 8002520:	d027      	beq.n	8002572 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002530:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002532:	f7ff f89f 	bl	8001674 <HAL_GetTick>
 8002536:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002538:	e01b      	b.n	8002572 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800253a:	f7ff f89b 	bl	8001674 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b19      	cmp	r3, #25
 8002546:	d914      	bls.n	8002572 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254c:	f043 0220 	orr.w	r2, r3, #32
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2220      	movs	r2, #32
 8002558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	f003 0320 	and.w	r3, r3, #32
 800257c:	2b20      	cmp	r3, #32
 800257e:	d1dc      	bne.n	800253a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	f003 0320 	and.w	r3, r3, #32
 800258a:	2b20      	cmp	r3, #32
 800258c:	d003      	beq.n	8002596 <I2C_IsErrorOccurred+0xfa>
 800258e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002592:	2b00      	cmp	r3, #0
 8002594:	d09d      	beq.n	80024d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002596:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800259a:	2b00      	cmp	r3, #0
 800259c:	d103      	bne.n	80025a6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2220      	movs	r2, #32
 80025a4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80025a6:	6a3b      	ldr	r3, [r7, #32]
 80025a8:	f043 0304 	orr.w	r3, r3, #4
 80025ac:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00b      	beq.n	80025de <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00b      	beq.n	8002600 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	f043 0308 	orr.w	r3, r3, #8
 80025ee:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00b      	beq.n	8002622 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	f043 0302 	orr.w	r3, r3, #2
 8002610:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f44f 7200 	mov.w	r2, #512	; 0x200
 800261a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002622:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002626:	2b00      	cmp	r3, #0
 8002628:	d01c      	beq.n	8002664 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f7ff fe56 	bl	80022dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6859      	ldr	r1, [r3, #4]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	4b0d      	ldr	r3, [pc, #52]	; (8002670 <I2C_IsErrorOccurred+0x1d4>)
 800263c:	400b      	ands	r3, r1
 800263e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	431a      	orrs	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2220      	movs	r2, #32
 8002650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002664:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002668:	4618      	mov	r0, r3
 800266a:	3728      	adds	r7, #40	; 0x28
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	fe00e800 	.word	0xfe00e800

08002674 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002674:	b480      	push	{r7}
 8002676:	b087      	sub	sp, #28
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	607b      	str	r3, [r7, #4]
 800267e:	460b      	mov	r3, r1
 8002680:	817b      	strh	r3, [r7, #10]
 8002682:	4613      	mov	r3, r2
 8002684:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002686:	897b      	ldrh	r3, [r7, #10]
 8002688:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800268c:	7a7b      	ldrb	r3, [r7, #9]
 800268e:	041b      	lsls	r3, r3, #16
 8002690:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002694:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	4313      	orrs	r3, r2
 800269e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	0d5b      	lsrs	r3, r3, #21
 80026ae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80026b2:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <I2C_TransferConfig+0x60>)
 80026b4:	430b      	orrs	r3, r1
 80026b6:	43db      	mvns	r3, r3
 80026b8:	ea02 0103 	and.w	r1, r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80026c6:	bf00      	nop
 80026c8:	371c      	adds	r7, #28
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	03ff63ff 	.word	0x03ff63ff

080026d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b20      	cmp	r3, #32
 80026ec:	d138      	bne.n	8002760 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d101      	bne.n	80026fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80026f8:	2302      	movs	r3, #2
 80026fa:	e032      	b.n	8002762 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2224      	movs	r2, #36	; 0x24
 8002708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0201 	bic.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800272a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6819      	ldr	r1, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0201 	orr.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2220      	movs	r2, #32
 8002750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800275c:	2300      	movs	r3, #0
 800275e:	e000      	b.n	8002762 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002760:	2302      	movs	r3, #2
  }
}
 8002762:	4618      	mov	r0, r3
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800276e:	b480      	push	{r7}
 8002770:	b085      	sub	sp, #20
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b20      	cmp	r3, #32
 8002782:	d139      	bne.n	80027f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800278a:	2b01      	cmp	r3, #1
 800278c:	d101      	bne.n	8002792 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800278e:	2302      	movs	r3, #2
 8002790:	e033      	b.n	80027fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2224      	movs	r2, #36	; 0x24
 800279e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 0201 	bic.w	r2, r2, #1
 80027b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	021b      	lsls	r3, r3, #8
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2220      	movs	r2, #32
 80027e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027f4:	2300      	movs	r3, #0
 80027f6:	e000      	b.n	80027fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80027f8:	2302      	movs	r3, #2
  }
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
	...

08002808 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800280c:	4b04      	ldr	r3, [pc, #16]	; (8002820 <HAL_PWREx_GetVoltageRange+0x18>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002814:	4618      	mov	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40007000 	.word	0x40007000

08002824 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002832:	d130      	bne.n	8002896 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002834:	4b23      	ldr	r3, [pc, #140]	; (80028c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800283c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002840:	d038      	beq.n	80028b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002842:	4b20      	ldr	r3, [pc, #128]	; (80028c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800284a:	4a1e      	ldr	r2, [pc, #120]	; (80028c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800284c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002850:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002852:	4b1d      	ldr	r3, [pc, #116]	; (80028c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2232      	movs	r2, #50	; 0x32
 8002858:	fb02 f303 	mul.w	r3, r2, r3
 800285c:	4a1b      	ldr	r2, [pc, #108]	; (80028cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	0c9b      	lsrs	r3, r3, #18
 8002864:	3301      	adds	r3, #1
 8002866:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002868:	e002      	b.n	8002870 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	3b01      	subs	r3, #1
 800286e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002870:	4b14      	ldr	r3, [pc, #80]	; (80028c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800287c:	d102      	bne.n	8002884 <HAL_PWREx_ControlVoltageScaling+0x60>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1f2      	bne.n	800286a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002884:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800288c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002890:	d110      	bne.n	80028b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e00f      	b.n	80028b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002896:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800289e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028a2:	d007      	beq.n	80028b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028a4:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028ac:	4a05      	ldr	r2, [pc, #20]	; (80028c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40007000 	.word	0x40007000
 80028c8:	200003f0 	.word	0x200003f0
 80028cc:	431bde83 	.word	0x431bde83

080028d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b088      	sub	sp, #32
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e3ca      	b.n	8003078 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028e2:	4b97      	ldr	r3, [pc, #604]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 030c 	and.w	r3, r3, #12
 80028ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028ec:	4b94      	ldr	r3, [pc, #592]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0310 	and.w	r3, r3, #16
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 80e4 	beq.w	8002acc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d007      	beq.n	800291a <HAL_RCC_OscConfig+0x4a>
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	2b0c      	cmp	r3, #12
 800290e:	f040 808b 	bne.w	8002a28 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2b01      	cmp	r3, #1
 8002916:	f040 8087 	bne.w	8002a28 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800291a:	4b89      	ldr	r3, [pc, #548]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d005      	beq.n	8002932 <HAL_RCC_OscConfig+0x62>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e3a2      	b.n	8003078 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a1a      	ldr	r2, [r3, #32]
 8002936:	4b82      	ldr	r3, [pc, #520]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d004      	beq.n	800294c <HAL_RCC_OscConfig+0x7c>
 8002942:	4b7f      	ldr	r3, [pc, #508]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800294a:	e005      	b.n	8002958 <HAL_RCC_OscConfig+0x88>
 800294c:	4b7c      	ldr	r3, [pc, #496]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 800294e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002952:	091b      	lsrs	r3, r3, #4
 8002954:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002958:	4293      	cmp	r3, r2
 800295a:	d223      	bcs.n	80029a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	4618      	mov	r0, r3
 8002962:	f000 fd87 	bl	8003474 <RCC_SetFlashLatencyFromMSIRange>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e383      	b.n	8003078 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002970:	4b73      	ldr	r3, [pc, #460]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a72      	ldr	r2, [pc, #456]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 8002976:	f043 0308 	orr.w	r3, r3, #8
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	4b70      	ldr	r3, [pc, #448]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	496d      	ldr	r1, [pc, #436]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 800298a:	4313      	orrs	r3, r2
 800298c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800298e:	4b6c      	ldr	r3, [pc, #432]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	021b      	lsls	r3, r3, #8
 800299c:	4968      	ldr	r1, [pc, #416]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	604b      	str	r3, [r1, #4]
 80029a2:	e025      	b.n	80029f0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029a4:	4b66      	ldr	r3, [pc, #408]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a65      	ldr	r2, [pc, #404]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 80029aa:	f043 0308 	orr.w	r3, r3, #8
 80029ae:	6013      	str	r3, [r2, #0]
 80029b0:	4b63      	ldr	r3, [pc, #396]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	4960      	ldr	r1, [pc, #384]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029c2:	4b5f      	ldr	r3, [pc, #380]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	021b      	lsls	r3, r3, #8
 80029d0:	495b      	ldr	r1, [pc, #364]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d109      	bne.n	80029f0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f000 fd47 	bl	8003474 <RCC_SetFlashLatencyFromMSIRange>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e343      	b.n	8003078 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029f0:	f000 fc4a 	bl	8003288 <HAL_RCC_GetSysClockFreq>
 80029f4:	4602      	mov	r2, r0
 80029f6:	4b52      	ldr	r3, [pc, #328]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	091b      	lsrs	r3, r3, #4
 80029fc:	f003 030f 	and.w	r3, r3, #15
 8002a00:	4950      	ldr	r1, [pc, #320]	; (8002b44 <HAL_RCC_OscConfig+0x274>)
 8002a02:	5ccb      	ldrb	r3, [r1, r3]
 8002a04:	f003 031f 	and.w	r3, r3, #31
 8002a08:	fa22 f303 	lsr.w	r3, r2, r3
 8002a0c:	4a4e      	ldr	r2, [pc, #312]	; (8002b48 <HAL_RCC_OscConfig+0x278>)
 8002a0e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a10:	4b4e      	ldr	r3, [pc, #312]	; (8002b4c <HAL_RCC_OscConfig+0x27c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7fe fc97 	bl	8001348 <HAL_InitTick>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d052      	beq.n	8002aca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
 8002a26:	e327      	b.n	8003078 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d032      	beq.n	8002a96 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a30:	4b43      	ldr	r3, [pc, #268]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a42      	ldr	r2, [pc, #264]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 8002a36:	f043 0301 	orr.w	r3, r3, #1
 8002a3a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a3c:	f7fe fe1a 	bl	8001674 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a44:	f7fe fe16 	bl	8001674 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e310      	b.n	8003078 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a56:	4b3a      	ldr	r3, [pc, #232]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f0      	beq.n	8002a44 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a62:	4b37      	ldr	r3, [pc, #220]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a36      	ldr	r2, [pc, #216]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 8002a68:	f043 0308 	orr.w	r3, r3, #8
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	4b34      	ldr	r3, [pc, #208]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	4931      	ldr	r1, [pc, #196]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a80:	4b2f      	ldr	r3, [pc, #188]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	021b      	lsls	r3, r3, #8
 8002a8e:	492c      	ldr	r1, [pc, #176]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	604b      	str	r3, [r1, #4]
 8002a94:	e01a      	b.n	8002acc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a96:	4b2a      	ldr	r3, [pc, #168]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a29      	ldr	r2, [pc, #164]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 8002a9c:	f023 0301 	bic.w	r3, r3, #1
 8002aa0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002aa2:	f7fe fde7 	bl	8001674 <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002aaa:	f7fe fde3 	bl	8001674 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e2dd      	b.n	8003078 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002abc:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1f0      	bne.n	8002aaa <HAL_RCC_OscConfig+0x1da>
 8002ac8:	e000      	b.n	8002acc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002aca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d074      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	2b08      	cmp	r3, #8
 8002adc:	d005      	beq.n	8002aea <HAL_RCC_OscConfig+0x21a>
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	2b0c      	cmp	r3, #12
 8002ae2:	d10e      	bne.n	8002b02 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	d10b      	bne.n	8002b02 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aea:	4b15      	ldr	r3, [pc, #84]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d064      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x2f0>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d160      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e2ba      	b.n	8003078 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b0a:	d106      	bne.n	8002b1a <HAL_RCC_OscConfig+0x24a>
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a0b      	ldr	r2, [pc, #44]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 8002b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b16:	6013      	str	r3, [r2, #0]
 8002b18:	e026      	b.n	8002b68 <HAL_RCC_OscConfig+0x298>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b22:	d115      	bne.n	8002b50 <HAL_RCC_OscConfig+0x280>
 8002b24:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a05      	ldr	r2, [pc, #20]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 8002b2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b2e:	6013      	str	r3, [r2, #0]
 8002b30:	4b03      	ldr	r3, [pc, #12]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a02      	ldr	r2, [pc, #8]	; (8002b40 <HAL_RCC_OscConfig+0x270>)
 8002b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b3a:	6013      	str	r3, [r2, #0]
 8002b3c:	e014      	b.n	8002b68 <HAL_RCC_OscConfig+0x298>
 8002b3e:	bf00      	nop
 8002b40:	40021000 	.word	0x40021000
 8002b44:	0800a434 	.word	0x0800a434
 8002b48:	200003f0 	.word	0x200003f0
 8002b4c:	200003f4 	.word	0x200003f4
 8002b50:	4ba0      	ldr	r3, [pc, #640]	; (8002dd4 <HAL_RCC_OscConfig+0x504>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a9f      	ldr	r2, [pc, #636]	; (8002dd4 <HAL_RCC_OscConfig+0x504>)
 8002b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b5a:	6013      	str	r3, [r2, #0]
 8002b5c:	4b9d      	ldr	r3, [pc, #628]	; (8002dd4 <HAL_RCC_OscConfig+0x504>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a9c      	ldr	r2, [pc, #624]	; (8002dd4 <HAL_RCC_OscConfig+0x504>)
 8002b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d013      	beq.n	8002b98 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b70:	f7fe fd80 	bl	8001674 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b78:	f7fe fd7c 	bl	8001674 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b64      	cmp	r3, #100	; 0x64
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e276      	b.n	8003078 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b8a:	4b92      	ldr	r3, [pc, #584]	; (8002dd4 <HAL_RCC_OscConfig+0x504>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCC_OscConfig+0x2a8>
 8002b96:	e014      	b.n	8002bc2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b98:	f7fe fd6c 	bl	8001674 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba0:	f7fe fd68 	bl	8001674 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b64      	cmp	r3, #100	; 0x64
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e262      	b.n	8003078 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bb2:	4b88      	ldr	r3, [pc, #544]	; (8002dd4 <HAL_RCC_OscConfig+0x504>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x2d0>
 8002bbe:	e000      	b.n	8002bc2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d060      	beq.n	8002c90 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	2b04      	cmp	r3, #4
 8002bd2:	d005      	beq.n	8002be0 <HAL_RCC_OscConfig+0x310>
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	2b0c      	cmp	r3, #12
 8002bd8:	d119      	bne.n	8002c0e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d116      	bne.n	8002c0e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002be0:	4b7c      	ldr	r3, [pc, #496]	; (8002dd4 <HAL_RCC_OscConfig+0x504>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x328>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e23f      	b.n	8003078 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf8:	4b76      	ldr	r3, [pc, #472]	; (8002dd4 <HAL_RCC_OscConfig+0x504>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	061b      	lsls	r3, r3, #24
 8002c06:	4973      	ldr	r1, [pc, #460]	; (8002dd4 <HAL_RCC_OscConfig+0x504>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c0c:	e040      	b.n	8002c90 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d023      	beq.n	8002c5e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c16:	4b6f      	ldr	r3, [pc, #444]	; (8002dd4 <HAL_RCC_OscConfig+0x504>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a6e      	ldr	r2, [pc, #440]	; (8002dd4 <HAL_RCC_OscConfig+0x504>)
 8002c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c22:	f7fe fd27 	bl	8001674 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c2a:	f7fe fd23 	bl	8001674 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e21d      	b.n	8003078 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c3c:	4b65      	ldr	r3, [pc, #404]	; (8002dd4 <HAL_RCC_OscConfig+0x504>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0f0      	beq.n	8002c2a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c48:	4b62      	ldr	r3, [pc, #392]	; (8002dd4 <HAL_RCC_OscConfig+0x504>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	061b      	lsls	r3, r3, #24
 8002c56:	495f      	ldr	r1, [pc, #380]	; (8002dd4 <HAL_RCC_OscConfig+0x504>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	604b      	str	r3, [r1, #4]
 8002c5c:	e018      	b.n	8002c90 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c5e:	4b5d      	ldr	r3, [pc, #372]	; (8002dd4 <HAL_RCC_OscConfig+0x504>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a5c      	ldr	r2, [pc, #368]	; (8002dd4 <HAL_RCC_OscConfig+0x504>)
 8002c64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6a:	f7fe fd03 	bl	8001674 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c72:	f7fe fcff 	bl	8001674 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e1f9      	b.n	8003078 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c84:	4b53      	ldr	r3, [pc, #332]	; (8002dd4 <HAL_RCC_OscConfig+0x504>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1f0      	bne.n	8002c72 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0308 	and.w	r3, r3, #8
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d03c      	beq.n	8002d16 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d01c      	beq.n	8002cde <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ca4:	4b4b      	ldr	r3, [pc, #300]	; (8002dd4 <HAL_RCC_OscConfig+0x504>)
 8002ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002caa:	4a4a      	ldr	r2, [pc, #296]	; (8002dd4 <HAL_RCC_OscConfig+0x504>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb4:	f7fe fcde 	bl	8001674 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cbc:	f7fe fcda 	bl	8001674 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e1d4      	b.n	8003078 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cce:	4b41      	ldr	r3, [pc, #260]	; (8002dd4 <HAL_RCC_OscConfig+0x504>)
 8002cd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0ef      	beq.n	8002cbc <HAL_RCC_OscConfig+0x3ec>
 8002cdc:	e01b      	b.n	8002d16 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cde:	4b3d      	ldr	r3, [pc, #244]	; (8002dd4 <HAL_RCC_OscConfig+0x504>)
 8002ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ce4:	4a3b      	ldr	r2, [pc, #236]	; (8002dd4 <HAL_RCC_OscConfig+0x504>)
 8002ce6:	f023 0301 	bic.w	r3, r3, #1
 8002cea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cee:	f7fe fcc1 	bl	8001674 <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cf4:	e008      	b.n	8002d08 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cf6:	f7fe fcbd 	bl	8001674 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e1b7      	b.n	8003078 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d08:	4b32      	ldr	r3, [pc, #200]	; (8002dd4 <HAL_RCC_OscConfig+0x504>)
 8002d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1ef      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0304 	and.w	r3, r3, #4
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 80a6 	beq.w	8002e70 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d24:	2300      	movs	r3, #0
 8002d26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d28:	4b2a      	ldr	r3, [pc, #168]	; (8002dd4 <HAL_RCC_OscConfig+0x504>)
 8002d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10d      	bne.n	8002d50 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d34:	4b27      	ldr	r3, [pc, #156]	; (8002dd4 <HAL_RCC_OscConfig+0x504>)
 8002d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d38:	4a26      	ldr	r2, [pc, #152]	; (8002dd4 <HAL_RCC_OscConfig+0x504>)
 8002d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d3e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d40:	4b24      	ldr	r3, [pc, #144]	; (8002dd4 <HAL_RCC_OscConfig+0x504>)
 8002d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d48:	60bb      	str	r3, [r7, #8]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d50:	4b21      	ldr	r3, [pc, #132]	; (8002dd8 <HAL_RCC_OscConfig+0x508>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d118      	bne.n	8002d8e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d5c:	4b1e      	ldr	r3, [pc, #120]	; (8002dd8 <HAL_RCC_OscConfig+0x508>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a1d      	ldr	r2, [pc, #116]	; (8002dd8 <HAL_RCC_OscConfig+0x508>)
 8002d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d68:	f7fe fc84 	bl	8001674 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d70:	f7fe fc80 	bl	8001674 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e17a      	b.n	8003078 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d82:	4b15      	ldr	r3, [pc, #84]	; (8002dd8 <HAL_RCC_OscConfig+0x508>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0f0      	beq.n	8002d70 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d108      	bne.n	8002da8 <HAL_RCC_OscConfig+0x4d8>
 8002d96:	4b0f      	ldr	r3, [pc, #60]	; (8002dd4 <HAL_RCC_OscConfig+0x504>)
 8002d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9c:	4a0d      	ldr	r2, [pc, #52]	; (8002dd4 <HAL_RCC_OscConfig+0x504>)
 8002d9e:	f043 0301 	orr.w	r3, r3, #1
 8002da2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002da6:	e029      	b.n	8002dfc <HAL_RCC_OscConfig+0x52c>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	2b05      	cmp	r3, #5
 8002dae:	d115      	bne.n	8002ddc <HAL_RCC_OscConfig+0x50c>
 8002db0:	4b08      	ldr	r3, [pc, #32]	; (8002dd4 <HAL_RCC_OscConfig+0x504>)
 8002db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db6:	4a07      	ldr	r2, [pc, #28]	; (8002dd4 <HAL_RCC_OscConfig+0x504>)
 8002db8:	f043 0304 	orr.w	r3, r3, #4
 8002dbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dc0:	4b04      	ldr	r3, [pc, #16]	; (8002dd4 <HAL_RCC_OscConfig+0x504>)
 8002dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc6:	4a03      	ldr	r2, [pc, #12]	; (8002dd4 <HAL_RCC_OscConfig+0x504>)
 8002dc8:	f043 0301 	orr.w	r3, r3, #1
 8002dcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dd0:	e014      	b.n	8002dfc <HAL_RCC_OscConfig+0x52c>
 8002dd2:	bf00      	nop
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	40007000 	.word	0x40007000
 8002ddc:	4b9c      	ldr	r3, [pc, #624]	; (8003050 <HAL_RCC_OscConfig+0x780>)
 8002dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de2:	4a9b      	ldr	r2, [pc, #620]	; (8003050 <HAL_RCC_OscConfig+0x780>)
 8002de4:	f023 0301 	bic.w	r3, r3, #1
 8002de8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dec:	4b98      	ldr	r3, [pc, #608]	; (8003050 <HAL_RCC_OscConfig+0x780>)
 8002dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df2:	4a97      	ldr	r2, [pc, #604]	; (8003050 <HAL_RCC_OscConfig+0x780>)
 8002df4:	f023 0304 	bic.w	r3, r3, #4
 8002df8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d016      	beq.n	8002e32 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e04:	f7fe fc36 	bl	8001674 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e0a:	e00a      	b.n	8002e22 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e0c:	f7fe fc32 	bl	8001674 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e12a      	b.n	8003078 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e22:	4b8b      	ldr	r3, [pc, #556]	; (8003050 <HAL_RCC_OscConfig+0x780>)
 8002e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0ed      	beq.n	8002e0c <HAL_RCC_OscConfig+0x53c>
 8002e30:	e015      	b.n	8002e5e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e32:	f7fe fc1f 	bl	8001674 <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e38:	e00a      	b.n	8002e50 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e3a:	f7fe fc1b 	bl	8001674 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e113      	b.n	8003078 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e50:	4b7f      	ldr	r3, [pc, #508]	; (8003050 <HAL_RCC_OscConfig+0x780>)
 8002e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1ed      	bne.n	8002e3a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e5e:	7ffb      	ldrb	r3, [r7, #31]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d105      	bne.n	8002e70 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e64:	4b7a      	ldr	r3, [pc, #488]	; (8003050 <HAL_RCC_OscConfig+0x780>)
 8002e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e68:	4a79      	ldr	r2, [pc, #484]	; (8003050 <HAL_RCC_OscConfig+0x780>)
 8002e6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 80fe 	beq.w	8003076 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	f040 80d0 	bne.w	8003024 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e84:	4b72      	ldr	r3, [pc, #456]	; (8003050 <HAL_RCC_OscConfig+0x780>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f003 0203 	and.w	r2, r3, #3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d130      	bne.n	8002efa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d127      	bne.n	8002efa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d11f      	bne.n	8002efa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ec4:	2a07      	cmp	r2, #7
 8002ec6:	bf14      	ite	ne
 8002ec8:	2201      	movne	r2, #1
 8002eca:	2200      	moveq	r2, #0
 8002ecc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d113      	bne.n	8002efa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002edc:	085b      	lsrs	r3, r3, #1
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d109      	bne.n	8002efa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef0:	085b      	lsrs	r3, r3, #1
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d06e      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	2b0c      	cmp	r3, #12
 8002efe:	d069      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f00:	4b53      	ldr	r3, [pc, #332]	; (8003050 <HAL_RCC_OscConfig+0x780>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d105      	bne.n	8002f18 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f0c:	4b50      	ldr	r3, [pc, #320]	; (8003050 <HAL_RCC_OscConfig+0x780>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e0ad      	b.n	8003078 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f1c:	4b4c      	ldr	r3, [pc, #304]	; (8003050 <HAL_RCC_OscConfig+0x780>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a4b      	ldr	r2, [pc, #300]	; (8003050 <HAL_RCC_OscConfig+0x780>)
 8002f22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f26:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f28:	f7fe fba4 	bl	8001674 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f30:	f7fe fba0 	bl	8001674 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e09a      	b.n	8003078 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f42:	4b43      	ldr	r3, [pc, #268]	; (8003050 <HAL_RCC_OscConfig+0x780>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f4e:	4b40      	ldr	r3, [pc, #256]	; (8003050 <HAL_RCC_OscConfig+0x780>)
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	4b40      	ldr	r3, [pc, #256]	; (8003054 <HAL_RCC_OscConfig+0x784>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f5e:	3a01      	subs	r2, #1
 8002f60:	0112      	lsls	r2, r2, #4
 8002f62:	4311      	orrs	r1, r2
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f68:	0212      	lsls	r2, r2, #8
 8002f6a:	4311      	orrs	r1, r2
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f70:	0852      	lsrs	r2, r2, #1
 8002f72:	3a01      	subs	r2, #1
 8002f74:	0552      	lsls	r2, r2, #21
 8002f76:	4311      	orrs	r1, r2
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f7c:	0852      	lsrs	r2, r2, #1
 8002f7e:	3a01      	subs	r2, #1
 8002f80:	0652      	lsls	r2, r2, #25
 8002f82:	4311      	orrs	r1, r2
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f88:	0912      	lsrs	r2, r2, #4
 8002f8a:	0452      	lsls	r2, r2, #17
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	4930      	ldr	r1, [pc, #192]	; (8003050 <HAL_RCC_OscConfig+0x780>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f94:	4b2e      	ldr	r3, [pc, #184]	; (8003050 <HAL_RCC_OscConfig+0x780>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a2d      	ldr	r2, [pc, #180]	; (8003050 <HAL_RCC_OscConfig+0x780>)
 8002f9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fa0:	4b2b      	ldr	r3, [pc, #172]	; (8003050 <HAL_RCC_OscConfig+0x780>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	4a2a      	ldr	r2, [pc, #168]	; (8003050 <HAL_RCC_OscConfig+0x780>)
 8002fa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002faa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fac:	f7fe fb62 	bl	8001674 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb4:	f7fe fb5e 	bl	8001674 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e058      	b.n	8003078 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fc6:	4b22      	ldr	r3, [pc, #136]	; (8003050 <HAL_RCC_OscConfig+0x780>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d0f0      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fd2:	e050      	b.n	8003076 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e04f      	b.n	8003078 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fd8:	4b1d      	ldr	r3, [pc, #116]	; (8003050 <HAL_RCC_OscConfig+0x780>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d148      	bne.n	8003076 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002fe4:	4b1a      	ldr	r3, [pc, #104]	; (8003050 <HAL_RCC_OscConfig+0x780>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a19      	ldr	r2, [pc, #100]	; (8003050 <HAL_RCC_OscConfig+0x780>)
 8002fea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ff0:	4b17      	ldr	r3, [pc, #92]	; (8003050 <HAL_RCC_OscConfig+0x780>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	4a16      	ldr	r2, [pc, #88]	; (8003050 <HAL_RCC_OscConfig+0x780>)
 8002ff6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ffa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ffc:	f7fe fb3a 	bl	8001674 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003004:	f7fe fb36 	bl	8001674 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e030      	b.n	8003078 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003016:	4b0e      	ldr	r3, [pc, #56]	; (8003050 <HAL_RCC_OscConfig+0x780>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0f0      	beq.n	8003004 <HAL_RCC_OscConfig+0x734>
 8003022:	e028      	b.n	8003076 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	2b0c      	cmp	r3, #12
 8003028:	d023      	beq.n	8003072 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800302a:	4b09      	ldr	r3, [pc, #36]	; (8003050 <HAL_RCC_OscConfig+0x780>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a08      	ldr	r2, [pc, #32]	; (8003050 <HAL_RCC_OscConfig+0x780>)
 8003030:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003034:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003036:	f7fe fb1d 	bl	8001674 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800303c:	e00c      	b.n	8003058 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800303e:	f7fe fb19 	bl	8001674 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d905      	bls.n	8003058 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e013      	b.n	8003078 <HAL_RCC_OscConfig+0x7a8>
 8003050:	40021000 	.word	0x40021000
 8003054:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003058:	4b09      	ldr	r3, [pc, #36]	; (8003080 <HAL_RCC_OscConfig+0x7b0>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1ec      	bne.n	800303e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003064:	4b06      	ldr	r3, [pc, #24]	; (8003080 <HAL_RCC_OscConfig+0x7b0>)
 8003066:	68da      	ldr	r2, [r3, #12]
 8003068:	4905      	ldr	r1, [pc, #20]	; (8003080 <HAL_RCC_OscConfig+0x7b0>)
 800306a:	4b06      	ldr	r3, [pc, #24]	; (8003084 <HAL_RCC_OscConfig+0x7b4>)
 800306c:	4013      	ands	r3, r2
 800306e:	60cb      	str	r3, [r1, #12]
 8003070:	e001      	b.n	8003076 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3720      	adds	r7, #32
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40021000 	.word	0x40021000
 8003084:	feeefffc 	.word	0xfeeefffc

08003088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e0e7      	b.n	800326c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800309c:	4b75      	ldr	r3, [pc, #468]	; (8003274 <HAL_RCC_ClockConfig+0x1ec>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d910      	bls.n	80030cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030aa:	4b72      	ldr	r3, [pc, #456]	; (8003274 <HAL_RCC_ClockConfig+0x1ec>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 0207 	bic.w	r2, r3, #7
 80030b2:	4970      	ldr	r1, [pc, #448]	; (8003274 <HAL_RCC_ClockConfig+0x1ec>)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ba:	4b6e      	ldr	r3, [pc, #440]	; (8003274 <HAL_RCC_ClockConfig+0x1ec>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0cf      	b.n	800326c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d010      	beq.n	80030fa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	4b66      	ldr	r3, [pc, #408]	; (8003278 <HAL_RCC_ClockConfig+0x1f0>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d908      	bls.n	80030fa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030e8:	4b63      	ldr	r3, [pc, #396]	; (8003278 <HAL_RCC_ClockConfig+0x1f0>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	4960      	ldr	r1, [pc, #384]	; (8003278 <HAL_RCC_ClockConfig+0x1f0>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d04c      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b03      	cmp	r3, #3
 800310c:	d107      	bne.n	800311e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800310e:	4b5a      	ldr	r3, [pc, #360]	; (8003278 <HAL_RCC_ClockConfig+0x1f0>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d121      	bne.n	800315e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e0a6      	b.n	800326c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b02      	cmp	r3, #2
 8003124:	d107      	bne.n	8003136 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003126:	4b54      	ldr	r3, [pc, #336]	; (8003278 <HAL_RCC_ClockConfig+0x1f0>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d115      	bne.n	800315e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e09a      	b.n	800326c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d107      	bne.n	800314e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800313e:	4b4e      	ldr	r3, [pc, #312]	; (8003278 <HAL_RCC_ClockConfig+0x1f0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d109      	bne.n	800315e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e08e      	b.n	800326c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800314e:	4b4a      	ldr	r3, [pc, #296]	; (8003278 <HAL_RCC_ClockConfig+0x1f0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e086      	b.n	800326c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800315e:	4b46      	ldr	r3, [pc, #280]	; (8003278 <HAL_RCC_ClockConfig+0x1f0>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f023 0203 	bic.w	r2, r3, #3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	4943      	ldr	r1, [pc, #268]	; (8003278 <HAL_RCC_ClockConfig+0x1f0>)
 800316c:	4313      	orrs	r3, r2
 800316e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003170:	f7fe fa80 	bl	8001674 <HAL_GetTick>
 8003174:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003176:	e00a      	b.n	800318e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003178:	f7fe fa7c 	bl	8001674 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	f241 3288 	movw	r2, #5000	; 0x1388
 8003186:	4293      	cmp	r3, r2
 8003188:	d901      	bls.n	800318e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e06e      	b.n	800326c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318e:	4b3a      	ldr	r3, [pc, #232]	; (8003278 <HAL_RCC_ClockConfig+0x1f0>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 020c 	and.w	r2, r3, #12
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	429a      	cmp	r2, r3
 800319e:	d1eb      	bne.n	8003178 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d010      	beq.n	80031ce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	4b31      	ldr	r3, [pc, #196]	; (8003278 <HAL_RCC_ClockConfig+0x1f0>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d208      	bcs.n	80031ce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031bc:	4b2e      	ldr	r3, [pc, #184]	; (8003278 <HAL_RCC_ClockConfig+0x1f0>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	492b      	ldr	r1, [pc, #172]	; (8003278 <HAL_RCC_ClockConfig+0x1f0>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031ce:	4b29      	ldr	r3, [pc, #164]	; (8003274 <HAL_RCC_ClockConfig+0x1ec>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d210      	bcs.n	80031fe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031dc:	4b25      	ldr	r3, [pc, #148]	; (8003274 <HAL_RCC_ClockConfig+0x1ec>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f023 0207 	bic.w	r2, r3, #7
 80031e4:	4923      	ldr	r1, [pc, #140]	; (8003274 <HAL_RCC_ClockConfig+0x1ec>)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ec:	4b21      	ldr	r3, [pc, #132]	; (8003274 <HAL_RCC_ClockConfig+0x1ec>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d001      	beq.n	80031fe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e036      	b.n	800326c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0304 	and.w	r3, r3, #4
 8003206:	2b00      	cmp	r3, #0
 8003208:	d008      	beq.n	800321c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800320a:	4b1b      	ldr	r3, [pc, #108]	; (8003278 <HAL_RCC_ClockConfig+0x1f0>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	4918      	ldr	r1, [pc, #96]	; (8003278 <HAL_RCC_ClockConfig+0x1f0>)
 8003218:	4313      	orrs	r3, r2
 800321a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0308 	and.w	r3, r3, #8
 8003224:	2b00      	cmp	r3, #0
 8003226:	d009      	beq.n	800323c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003228:	4b13      	ldr	r3, [pc, #76]	; (8003278 <HAL_RCC_ClockConfig+0x1f0>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	4910      	ldr	r1, [pc, #64]	; (8003278 <HAL_RCC_ClockConfig+0x1f0>)
 8003238:	4313      	orrs	r3, r2
 800323a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800323c:	f000 f824 	bl	8003288 <HAL_RCC_GetSysClockFreq>
 8003240:	4602      	mov	r2, r0
 8003242:	4b0d      	ldr	r3, [pc, #52]	; (8003278 <HAL_RCC_ClockConfig+0x1f0>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	091b      	lsrs	r3, r3, #4
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	490b      	ldr	r1, [pc, #44]	; (800327c <HAL_RCC_ClockConfig+0x1f4>)
 800324e:	5ccb      	ldrb	r3, [r1, r3]
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	fa22 f303 	lsr.w	r3, r2, r3
 8003258:	4a09      	ldr	r2, [pc, #36]	; (8003280 <HAL_RCC_ClockConfig+0x1f8>)
 800325a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800325c:	4b09      	ldr	r3, [pc, #36]	; (8003284 <HAL_RCC_ClockConfig+0x1fc>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f7fe f871 	bl	8001348 <HAL_InitTick>
 8003266:	4603      	mov	r3, r0
 8003268:	72fb      	strb	r3, [r7, #11]

  return status;
 800326a:	7afb      	ldrb	r3, [r7, #11]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40022000 	.word	0x40022000
 8003278:	40021000 	.word	0x40021000
 800327c:	0800a434 	.word	0x0800a434
 8003280:	200003f0 	.word	0x200003f0
 8003284:	200003f4 	.word	0x200003f4

08003288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003288:	b480      	push	{r7}
 800328a:	b089      	sub	sp, #36	; 0x24
 800328c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800328e:	2300      	movs	r3, #0
 8003290:	61fb      	str	r3, [r7, #28]
 8003292:	2300      	movs	r3, #0
 8003294:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003296:	4b3e      	ldr	r3, [pc, #248]	; (8003390 <HAL_RCC_GetSysClockFreq+0x108>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 030c 	and.w	r3, r3, #12
 800329e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032a0:	4b3b      	ldr	r3, [pc, #236]	; (8003390 <HAL_RCC_GetSysClockFreq+0x108>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f003 0303 	and.w	r3, r3, #3
 80032a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d005      	beq.n	80032bc <HAL_RCC_GetSysClockFreq+0x34>
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	2b0c      	cmp	r3, #12
 80032b4:	d121      	bne.n	80032fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d11e      	bne.n	80032fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80032bc:	4b34      	ldr	r3, [pc, #208]	; (8003390 <HAL_RCC_GetSysClockFreq+0x108>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d107      	bne.n	80032d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032c8:	4b31      	ldr	r3, [pc, #196]	; (8003390 <HAL_RCC_GetSysClockFreq+0x108>)
 80032ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ce:	0a1b      	lsrs	r3, r3, #8
 80032d0:	f003 030f 	and.w	r3, r3, #15
 80032d4:	61fb      	str	r3, [r7, #28]
 80032d6:	e005      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032d8:	4b2d      	ldr	r3, [pc, #180]	; (8003390 <HAL_RCC_GetSysClockFreq+0x108>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	091b      	lsrs	r3, r3, #4
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032e4:	4a2b      	ldr	r2, [pc, #172]	; (8003394 <HAL_RCC_GetSysClockFreq+0x10c>)
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10d      	bne.n	8003310 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032f8:	e00a      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d102      	bne.n	8003306 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003300:	4b25      	ldr	r3, [pc, #148]	; (8003398 <HAL_RCC_GetSysClockFreq+0x110>)
 8003302:	61bb      	str	r3, [r7, #24]
 8003304:	e004      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	2b08      	cmp	r3, #8
 800330a:	d101      	bne.n	8003310 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800330c:	4b23      	ldr	r3, [pc, #140]	; (800339c <HAL_RCC_GetSysClockFreq+0x114>)
 800330e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	2b0c      	cmp	r3, #12
 8003314:	d134      	bne.n	8003380 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003316:	4b1e      	ldr	r3, [pc, #120]	; (8003390 <HAL_RCC_GetSysClockFreq+0x108>)
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	2b02      	cmp	r3, #2
 8003324:	d003      	beq.n	800332e <HAL_RCC_GetSysClockFreq+0xa6>
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	2b03      	cmp	r3, #3
 800332a:	d003      	beq.n	8003334 <HAL_RCC_GetSysClockFreq+0xac>
 800332c:	e005      	b.n	800333a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800332e:	4b1a      	ldr	r3, [pc, #104]	; (8003398 <HAL_RCC_GetSysClockFreq+0x110>)
 8003330:	617b      	str	r3, [r7, #20]
      break;
 8003332:	e005      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003334:	4b19      	ldr	r3, [pc, #100]	; (800339c <HAL_RCC_GetSysClockFreq+0x114>)
 8003336:	617b      	str	r3, [r7, #20]
      break;
 8003338:	e002      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	617b      	str	r3, [r7, #20]
      break;
 800333e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003340:	4b13      	ldr	r3, [pc, #76]	; (8003390 <HAL_RCC_GetSysClockFreq+0x108>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	091b      	lsrs	r3, r3, #4
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	3301      	adds	r3, #1
 800334c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800334e:	4b10      	ldr	r3, [pc, #64]	; (8003390 <HAL_RCC_GetSysClockFreq+0x108>)
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	0a1b      	lsrs	r3, r3, #8
 8003354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	fb03 f202 	mul.w	r2, r3, r2
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	fbb2 f3f3 	udiv	r3, r2, r3
 8003364:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003366:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <HAL_RCC_GetSysClockFreq+0x108>)
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	0e5b      	lsrs	r3, r3, #25
 800336c:	f003 0303 	and.w	r3, r3, #3
 8003370:	3301      	adds	r3, #1
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	fbb2 f3f3 	udiv	r3, r2, r3
 800337e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003380:	69bb      	ldr	r3, [r7, #24]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3724      	adds	r7, #36	; 0x24
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40021000 	.word	0x40021000
 8003394:	0800a44c 	.word	0x0800a44c
 8003398:	00f42400 	.word	0x00f42400
 800339c:	007a1200 	.word	0x007a1200

080033a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033a4:	4b03      	ldr	r3, [pc, #12]	; (80033b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80033a6:	681b      	ldr	r3, [r3, #0]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	200003f0 	.word	0x200003f0

080033b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80033bc:	f7ff fff0 	bl	80033a0 <HAL_RCC_GetHCLKFreq>
 80033c0:	4602      	mov	r2, r0
 80033c2:	4b06      	ldr	r3, [pc, #24]	; (80033dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	0a1b      	lsrs	r3, r3, #8
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	4904      	ldr	r1, [pc, #16]	; (80033e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033ce:	5ccb      	ldrb	r3, [r1, r3]
 80033d0:	f003 031f 	and.w	r3, r3, #31
 80033d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d8:	4618      	mov	r0, r3
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40021000 	.word	0x40021000
 80033e0:	0800a444 	.word	0x0800a444

080033e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033e8:	f7ff ffda 	bl	80033a0 <HAL_RCC_GetHCLKFreq>
 80033ec:	4602      	mov	r2, r0
 80033ee:	4b06      	ldr	r3, [pc, #24]	; (8003408 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	0adb      	lsrs	r3, r3, #11
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	4904      	ldr	r1, [pc, #16]	; (800340c <HAL_RCC_GetPCLK2Freq+0x28>)
 80033fa:	5ccb      	ldrb	r3, [r1, r3]
 80033fc:	f003 031f 	and.w	r3, r3, #31
 8003400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003404:	4618      	mov	r0, r3
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40021000 	.word	0x40021000
 800340c:	0800a444 	.word	0x0800a444

08003410 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	220f      	movs	r2, #15
 800341e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003420:	4b12      	ldr	r3, [pc, #72]	; (800346c <HAL_RCC_GetClockConfig+0x5c>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 0203 	and.w	r2, r3, #3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800342c:	4b0f      	ldr	r3, [pc, #60]	; (800346c <HAL_RCC_GetClockConfig+0x5c>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003438:	4b0c      	ldr	r3, [pc, #48]	; (800346c <HAL_RCC_GetClockConfig+0x5c>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003444:	4b09      	ldr	r3, [pc, #36]	; (800346c <HAL_RCC_GetClockConfig+0x5c>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	08db      	lsrs	r3, r3, #3
 800344a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003452:	4b07      	ldr	r3, [pc, #28]	; (8003470 <HAL_RCC_GetClockConfig+0x60>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0207 	and.w	r2, r3, #7
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	601a      	str	r2, [r3, #0]
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40021000 	.word	0x40021000
 8003470:	40022000 	.word	0x40022000

08003474 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800347c:	2300      	movs	r3, #0
 800347e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003480:	4b2a      	ldr	r3, [pc, #168]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800348c:	f7ff f9bc 	bl	8002808 <HAL_PWREx_GetVoltageRange>
 8003490:	6178      	str	r0, [r7, #20]
 8003492:	e014      	b.n	80034be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003494:	4b25      	ldr	r3, [pc, #148]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003498:	4a24      	ldr	r2, [pc, #144]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800349a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800349e:	6593      	str	r3, [r2, #88]	; 0x58
 80034a0:	4b22      	ldr	r3, [pc, #136]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034ac:	f7ff f9ac 	bl	8002808 <HAL_PWREx_GetVoltageRange>
 80034b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80034b2:	4b1e      	ldr	r3, [pc, #120]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b6:	4a1d      	ldr	r2, [pc, #116]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034c4:	d10b      	bne.n	80034de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b80      	cmp	r3, #128	; 0x80
 80034ca:	d919      	bls.n	8003500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2ba0      	cmp	r3, #160	; 0xa0
 80034d0:	d902      	bls.n	80034d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034d2:	2302      	movs	r3, #2
 80034d4:	613b      	str	r3, [r7, #16]
 80034d6:	e013      	b.n	8003500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034d8:	2301      	movs	r3, #1
 80034da:	613b      	str	r3, [r7, #16]
 80034dc:	e010      	b.n	8003500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b80      	cmp	r3, #128	; 0x80
 80034e2:	d902      	bls.n	80034ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80034e4:	2303      	movs	r3, #3
 80034e6:	613b      	str	r3, [r7, #16]
 80034e8:	e00a      	b.n	8003500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b80      	cmp	r3, #128	; 0x80
 80034ee:	d102      	bne.n	80034f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034f0:	2302      	movs	r3, #2
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	e004      	b.n	8003500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b70      	cmp	r3, #112	; 0x70
 80034fa:	d101      	bne.n	8003500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034fc:	2301      	movs	r3, #1
 80034fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003500:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f023 0207 	bic.w	r2, r3, #7
 8003508:	4909      	ldr	r1, [pc, #36]	; (8003530 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	4313      	orrs	r3, r2
 800350e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003510:	4b07      	ldr	r3, [pc, #28]	; (8003530 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	429a      	cmp	r2, r3
 800351c:	d001      	beq.n	8003522 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40021000 	.word	0x40021000
 8003530:	40022000 	.word	0x40022000

08003534 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800353c:	2300      	movs	r3, #0
 800353e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003540:	2300      	movs	r3, #0
 8003542:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800354c:	2b00      	cmp	r3, #0
 800354e:	d041      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003554:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003558:	d02a      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800355a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800355e:	d824      	bhi.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003560:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003564:	d008      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003566:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800356a:	d81e      	bhi.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00a      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003570:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003574:	d010      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003576:	e018      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003578:	4b86      	ldr	r3, [pc, #536]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	4a85      	ldr	r2, [pc, #532]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003582:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003584:	e015      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	3304      	adds	r3, #4
 800358a:	2100      	movs	r1, #0
 800358c:	4618      	mov	r0, r3
 800358e:	f000 fabb 	bl	8003b08 <RCCEx_PLLSAI1_Config>
 8003592:	4603      	mov	r3, r0
 8003594:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003596:	e00c      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3320      	adds	r3, #32
 800359c:	2100      	movs	r1, #0
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fba6 	bl	8003cf0 <RCCEx_PLLSAI2_Config>
 80035a4:	4603      	mov	r3, r0
 80035a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035a8:	e003      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	74fb      	strb	r3, [r7, #19]
      break;
 80035ae:	e000      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80035b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035b2:	7cfb      	ldrb	r3, [r7, #19]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10b      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035b8:	4b76      	ldr	r3, [pc, #472]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035c6:	4973      	ldr	r1, [pc, #460]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035ce:	e001      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d0:	7cfb      	ldrb	r3, [r7, #19]
 80035d2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d041      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035e8:	d02a      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80035ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035ee:	d824      	bhi.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035f4:	d008      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80035f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035fa:	d81e      	bhi.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00a      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003600:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003604:	d010      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003606:	e018      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003608:	4b62      	ldr	r3, [pc, #392]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	4a61      	ldr	r2, [pc, #388]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003612:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003614:	e015      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3304      	adds	r3, #4
 800361a:	2100      	movs	r1, #0
 800361c:	4618      	mov	r0, r3
 800361e:	f000 fa73 	bl	8003b08 <RCCEx_PLLSAI1_Config>
 8003622:	4603      	mov	r3, r0
 8003624:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003626:	e00c      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3320      	adds	r3, #32
 800362c:	2100      	movs	r1, #0
 800362e:	4618      	mov	r0, r3
 8003630:	f000 fb5e 	bl	8003cf0 <RCCEx_PLLSAI2_Config>
 8003634:	4603      	mov	r3, r0
 8003636:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003638:	e003      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	74fb      	strb	r3, [r7, #19]
      break;
 800363e:	e000      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003640:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003642:	7cfb      	ldrb	r3, [r7, #19]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10b      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003648:	4b52      	ldr	r3, [pc, #328]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800364a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003656:	494f      	ldr	r1, [pc, #316]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800365e:	e001      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003660:	7cfb      	ldrb	r3, [r7, #19]
 8003662:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80a0 	beq.w	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003672:	2300      	movs	r3, #0
 8003674:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003676:	4b47      	ldr	r3, [pc, #284]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003686:	2300      	movs	r3, #0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00d      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800368c:	4b41      	ldr	r3, [pc, #260]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800368e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003690:	4a40      	ldr	r2, [pc, #256]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003696:	6593      	str	r3, [r2, #88]	; 0x58
 8003698:	4b3e      	ldr	r3, [pc, #248]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800369a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a0:	60bb      	str	r3, [r7, #8]
 80036a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036a4:	2301      	movs	r3, #1
 80036a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036a8:	4b3b      	ldr	r3, [pc, #236]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a3a      	ldr	r2, [pc, #232]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036b4:	f7fd ffde 	bl	8001674 <HAL_GetTick>
 80036b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036ba:	e009      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036bc:	f7fd ffda 	bl	8001674 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d902      	bls.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	74fb      	strb	r3, [r7, #19]
        break;
 80036ce:	e005      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036d0:	4b31      	ldr	r3, [pc, #196]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0ef      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80036dc:	7cfb      	ldrb	r3, [r7, #19]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d15c      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036e2:	4b2c      	ldr	r3, [pc, #176]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d01f      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d019      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003700:	4b24      	ldr	r3, [pc, #144]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800370a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800370c:	4b21      	ldr	r3, [pc, #132]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800370e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003712:	4a20      	ldr	r2, [pc, #128]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003718:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800371c:	4b1d      	ldr	r3, [pc, #116]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800371e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003722:	4a1c      	ldr	r2, [pc, #112]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800372c:	4a19      	ldr	r2, [pc, #100]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d016      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373e:	f7fd ff99 	bl	8001674 <HAL_GetTick>
 8003742:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003744:	e00b      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003746:	f7fd ff95 	bl	8001674 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	f241 3288 	movw	r2, #5000	; 0x1388
 8003754:	4293      	cmp	r3, r2
 8003756:	d902      	bls.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	74fb      	strb	r3, [r7, #19]
            break;
 800375c:	e006      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800375e:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0ec      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800376c:	7cfb      	ldrb	r3, [r7, #19]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10c      	bne.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003772:	4b08      	ldr	r3, [pc, #32]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003778:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003782:	4904      	ldr	r1, [pc, #16]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800378a:	e009      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800378c:	7cfb      	ldrb	r3, [r7, #19]
 800378e:	74bb      	strb	r3, [r7, #18]
 8003790:	e006      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003792:	bf00      	nop
 8003794:	40021000 	.word	0x40021000
 8003798:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800379c:	7cfb      	ldrb	r3, [r7, #19]
 800379e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037a0:	7c7b      	ldrb	r3, [r7, #17]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d105      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a6:	4b9e      	ldr	r3, [pc, #632]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037aa:	4a9d      	ldr	r2, [pc, #628]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037be:	4b98      	ldr	r3, [pc, #608]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c4:	f023 0203 	bic.w	r2, r3, #3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037cc:	4994      	ldr	r1, [pc, #592]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037e0:	4b8f      	ldr	r3, [pc, #572]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e6:	f023 020c 	bic.w	r2, r3, #12
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ee:	498c      	ldr	r1, [pc, #560]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0304 	and.w	r3, r3, #4
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003802:	4b87      	ldr	r3, [pc, #540]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003808:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	4983      	ldr	r1, [pc, #524]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00a      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003824:	4b7e      	ldr	r3, [pc, #504]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003832:	497b      	ldr	r1, [pc, #492]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003834:	4313      	orrs	r3, r2
 8003836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0310 	and.w	r3, r3, #16
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003846:	4b76      	ldr	r3, [pc, #472]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003854:	4972      	ldr	r1, [pc, #456]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0320 	and.w	r3, r3, #32
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003868:	4b6d      	ldr	r3, [pc, #436]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800386a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003876:	496a      	ldr	r1, [pc, #424]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800388a:	4b65      	ldr	r3, [pc, #404]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003890:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003898:	4961      	ldr	r1, [pc, #388]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038ac:	4b5c      	ldr	r3, [pc, #368]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ba:	4959      	ldr	r1, [pc, #356]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038ce:	4b54      	ldr	r3, [pc, #336]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038dc:	4950      	ldr	r1, [pc, #320]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038f0:	4b4b      	ldr	r3, [pc, #300]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fe:	4948      	ldr	r1, [pc, #288]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003900:	4313      	orrs	r3, r2
 8003902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003912:	4b43      	ldr	r3, [pc, #268]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003918:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003920:	493f      	ldr	r1, [pc, #252]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003922:	4313      	orrs	r3, r2
 8003924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d028      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003934:	4b3a      	ldr	r3, [pc, #232]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003942:	4937      	ldr	r1, [pc, #220]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003944:	4313      	orrs	r3, r2
 8003946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800394e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003952:	d106      	bne.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003954:	4b32      	ldr	r3, [pc, #200]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	4a31      	ldr	r2, [pc, #196]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800395a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800395e:	60d3      	str	r3, [r2, #12]
 8003960:	e011      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003966:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800396a:	d10c      	bne.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3304      	adds	r3, #4
 8003970:	2101      	movs	r1, #1
 8003972:	4618      	mov	r0, r3
 8003974:	f000 f8c8 	bl	8003b08 <RCCEx_PLLSAI1_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800397c:	7cfb      	ldrb	r3, [r7, #19]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003982:	7cfb      	ldrb	r3, [r7, #19]
 8003984:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d028      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003992:	4b23      	ldr	r3, [pc, #140]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003998:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a0:	491f      	ldr	r1, [pc, #124]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039b0:	d106      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039b2:	4b1b      	ldr	r3, [pc, #108]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	4a1a      	ldr	r2, [pc, #104]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039bc:	60d3      	str	r3, [r2, #12]
 80039be:	e011      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039c8:	d10c      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3304      	adds	r3, #4
 80039ce:	2101      	movs	r1, #1
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 f899 	bl	8003b08 <RCCEx_PLLSAI1_Config>
 80039d6:	4603      	mov	r3, r0
 80039d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039da:	7cfb      	ldrb	r3, [r7, #19]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80039e0:	7cfb      	ldrb	r3, [r7, #19]
 80039e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d02b      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039f0:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039fe:	4908      	ldr	r1, [pc, #32]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a0e:	d109      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a10:	4b03      	ldr	r3, [pc, #12]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	4a02      	ldr	r2, [pc, #8]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a1a:	60d3      	str	r3, [r2, #12]
 8003a1c:	e014      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003a1e:	bf00      	nop
 8003a20:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a2c:	d10c      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	3304      	adds	r3, #4
 8003a32:	2101      	movs	r1, #1
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 f867 	bl	8003b08 <RCCEx_PLLSAI1_Config>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a3e:	7cfb      	ldrb	r3, [r7, #19]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003a44:	7cfb      	ldrb	r3, [r7, #19]
 8003a46:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d02f      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a54:	4b2b      	ldr	r3, [pc, #172]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a62:	4928      	ldr	r1, [pc, #160]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a72:	d10d      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3304      	adds	r3, #4
 8003a78:	2102      	movs	r1, #2
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 f844 	bl	8003b08 <RCCEx_PLLSAI1_Config>
 8003a80:	4603      	mov	r3, r0
 8003a82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a84:	7cfb      	ldrb	r3, [r7, #19]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d014      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a8a:	7cfb      	ldrb	r3, [r7, #19]
 8003a8c:	74bb      	strb	r3, [r7, #18]
 8003a8e:	e011      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a98:	d10c      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	3320      	adds	r3, #32
 8003a9e:	2102      	movs	r1, #2
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 f925 	bl	8003cf0 <RCCEx_PLLSAI2_Config>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aaa:	7cfb      	ldrb	r3, [r7, #19]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ab0:	7cfb      	ldrb	r3, [r7, #19]
 8003ab2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00a      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ac0:	4b10      	ldr	r3, [pc, #64]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ace:	490d      	ldr	r1, [pc, #52]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00b      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ae2:	4b08      	ldr	r3, [pc, #32]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003af2:	4904      	ldr	r1, [pc, #16]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003afa:	7cbb      	ldrb	r3, [r7, #18]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40021000 	.word	0x40021000

08003b08 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b16:	4b75      	ldr	r3, [pc, #468]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f003 0303 	and.w	r3, r3, #3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d018      	beq.n	8003b54 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b22:	4b72      	ldr	r3, [pc, #456]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f003 0203 	and.w	r2, r3, #3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d10d      	bne.n	8003b4e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
       ||
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d009      	beq.n	8003b4e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b3a:	4b6c      	ldr	r3, [pc, #432]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	091b      	lsrs	r3, r3, #4
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	1c5a      	adds	r2, r3, #1
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
       ||
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d047      	beq.n	8003bde <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	73fb      	strb	r3, [r7, #15]
 8003b52:	e044      	b.n	8003bde <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b03      	cmp	r3, #3
 8003b5a:	d018      	beq.n	8003b8e <RCCEx_PLLSAI1_Config+0x86>
 8003b5c:	2b03      	cmp	r3, #3
 8003b5e:	d825      	bhi.n	8003bac <RCCEx_PLLSAI1_Config+0xa4>
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d002      	beq.n	8003b6a <RCCEx_PLLSAI1_Config+0x62>
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d009      	beq.n	8003b7c <RCCEx_PLLSAI1_Config+0x74>
 8003b68:	e020      	b.n	8003bac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b6a:	4b60      	ldr	r3, [pc, #384]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d11d      	bne.n	8003bb2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b7a:	e01a      	b.n	8003bb2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b7c:	4b5b      	ldr	r3, [pc, #364]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d116      	bne.n	8003bb6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b8c:	e013      	b.n	8003bb6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b8e:	4b57      	ldr	r3, [pc, #348]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10f      	bne.n	8003bba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b9a:	4b54      	ldr	r3, [pc, #336]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d109      	bne.n	8003bba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003baa:	e006      	b.n	8003bba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb0:	e004      	b.n	8003bbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bb2:	bf00      	nop
 8003bb4:	e002      	b.n	8003bbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bb6:	bf00      	nop
 8003bb8:	e000      	b.n	8003bbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bba:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bbc:	7bfb      	ldrb	r3, [r7, #15]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10d      	bne.n	8003bde <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003bc2:	4b4a      	ldr	r3, [pc, #296]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6819      	ldr	r1, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	430b      	orrs	r3, r1
 8003bd8:	4944      	ldr	r1, [pc, #272]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003bde:	7bfb      	ldrb	r3, [r7, #15]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d17d      	bne.n	8003ce0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003be4:	4b41      	ldr	r3, [pc, #260]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a40      	ldr	r2, [pc, #256]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bf0:	f7fd fd40 	bl	8001674 <HAL_GetTick>
 8003bf4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003bf6:	e009      	b.n	8003c0c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bf8:	f7fd fd3c 	bl	8001674 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d902      	bls.n	8003c0c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	73fb      	strb	r3, [r7, #15]
        break;
 8003c0a:	e005      	b.n	8003c18 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c0c:	4b37      	ldr	r3, [pc, #220]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1ef      	bne.n	8003bf8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d160      	bne.n	8003ce0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d111      	bne.n	8003c48 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c24:	4b31      	ldr	r3, [pc, #196]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6892      	ldr	r2, [r2, #8]
 8003c34:	0211      	lsls	r1, r2, #8
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	68d2      	ldr	r2, [r2, #12]
 8003c3a:	0912      	lsrs	r2, r2, #4
 8003c3c:	0452      	lsls	r2, r2, #17
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	492a      	ldr	r1, [pc, #168]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	610b      	str	r3, [r1, #16]
 8003c46:	e027      	b.n	8003c98 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d112      	bne.n	8003c74 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c4e:	4b27      	ldr	r3, [pc, #156]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003c56:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6892      	ldr	r2, [r2, #8]
 8003c5e:	0211      	lsls	r1, r2, #8
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6912      	ldr	r2, [r2, #16]
 8003c64:	0852      	lsrs	r2, r2, #1
 8003c66:	3a01      	subs	r2, #1
 8003c68:	0552      	lsls	r2, r2, #21
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	491f      	ldr	r1, [pc, #124]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	610b      	str	r3, [r1, #16]
 8003c72:	e011      	b.n	8003c98 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c74:	4b1d      	ldr	r3, [pc, #116]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6892      	ldr	r2, [r2, #8]
 8003c84:	0211      	lsls	r1, r2, #8
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6952      	ldr	r2, [r2, #20]
 8003c8a:	0852      	lsrs	r2, r2, #1
 8003c8c:	3a01      	subs	r2, #1
 8003c8e:	0652      	lsls	r2, r2, #25
 8003c90:	430a      	orrs	r2, r1
 8003c92:	4916      	ldr	r1, [pc, #88]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c98:	4b14      	ldr	r3, [pc, #80]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a13      	ldr	r2, [pc, #76]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ca2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca4:	f7fd fce6 	bl	8001674 <HAL_GetTick>
 8003ca8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003caa:	e009      	b.n	8003cc0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cac:	f7fd fce2 	bl	8001674 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d902      	bls.n	8003cc0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	73fb      	strb	r3, [r7, #15]
          break;
 8003cbe:	e005      	b.n	8003ccc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cc0:	4b0a      	ldr	r3, [pc, #40]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0ef      	beq.n	8003cac <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003ccc:	7bfb      	ldrb	r3, [r7, #15]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d106      	bne.n	8003ce0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003cd2:	4b06      	ldr	r3, [pc, #24]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd4:	691a      	ldr	r2, [r3, #16]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	4904      	ldr	r1, [pc, #16]	; (8003cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40021000 	.word	0x40021000

08003cf0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003cfe:	4b6a      	ldr	r3, [pc, #424]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d018      	beq.n	8003d3c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d0a:	4b67      	ldr	r3, [pc, #412]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	f003 0203 	and.w	r2, r3, #3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d10d      	bne.n	8003d36 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
       ||
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d009      	beq.n	8003d36 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003d22:	4b61      	ldr	r3, [pc, #388]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	091b      	lsrs	r3, r3, #4
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	1c5a      	adds	r2, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
       ||
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d047      	beq.n	8003dc6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	73fb      	strb	r3, [r7, #15]
 8003d3a:	e044      	b.n	8003dc6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	d018      	beq.n	8003d76 <RCCEx_PLLSAI2_Config+0x86>
 8003d44:	2b03      	cmp	r3, #3
 8003d46:	d825      	bhi.n	8003d94 <RCCEx_PLLSAI2_Config+0xa4>
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d002      	beq.n	8003d52 <RCCEx_PLLSAI2_Config+0x62>
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d009      	beq.n	8003d64 <RCCEx_PLLSAI2_Config+0x74>
 8003d50:	e020      	b.n	8003d94 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d52:	4b55      	ldr	r3, [pc, #340]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d11d      	bne.n	8003d9a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d62:	e01a      	b.n	8003d9a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d64:	4b50      	ldr	r3, [pc, #320]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d116      	bne.n	8003d9e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d74:	e013      	b.n	8003d9e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d76:	4b4c      	ldr	r3, [pc, #304]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10f      	bne.n	8003da2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d82:	4b49      	ldr	r3, [pc, #292]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d109      	bne.n	8003da2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d92:	e006      	b.n	8003da2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	73fb      	strb	r3, [r7, #15]
      break;
 8003d98:	e004      	b.n	8003da4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d9a:	bf00      	nop
 8003d9c:	e002      	b.n	8003da4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d9e:	bf00      	nop
 8003da0:	e000      	b.n	8003da4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003da2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003da4:	7bfb      	ldrb	r3, [r7, #15]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10d      	bne.n	8003dc6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003daa:	4b3f      	ldr	r3, [pc, #252]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6819      	ldr	r1, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	011b      	lsls	r3, r3, #4
 8003dbe:	430b      	orrs	r3, r1
 8003dc0:	4939      	ldr	r1, [pc, #228]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003dc6:	7bfb      	ldrb	r3, [r7, #15]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d167      	bne.n	8003e9c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003dcc:	4b36      	ldr	r3, [pc, #216]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a35      	ldr	r2, [pc, #212]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dd8:	f7fd fc4c 	bl	8001674 <HAL_GetTick>
 8003ddc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003dde:	e009      	b.n	8003df4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003de0:	f7fd fc48 	bl	8001674 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d902      	bls.n	8003df4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	73fb      	strb	r3, [r7, #15]
        break;
 8003df2:	e005      	b.n	8003e00 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003df4:	4b2c      	ldr	r3, [pc, #176]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1ef      	bne.n	8003de0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d14a      	bne.n	8003e9c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d111      	bne.n	8003e30 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e0c:	4b26      	ldr	r3, [pc, #152]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6892      	ldr	r2, [r2, #8]
 8003e1c:	0211      	lsls	r1, r2, #8
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	68d2      	ldr	r2, [r2, #12]
 8003e22:	0912      	lsrs	r2, r2, #4
 8003e24:	0452      	lsls	r2, r2, #17
 8003e26:	430a      	orrs	r2, r1
 8003e28:	491f      	ldr	r1, [pc, #124]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	614b      	str	r3, [r1, #20]
 8003e2e:	e011      	b.n	8003e54 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e30:	4b1d      	ldr	r3, [pc, #116]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	6892      	ldr	r2, [r2, #8]
 8003e40:	0211      	lsls	r1, r2, #8
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6912      	ldr	r2, [r2, #16]
 8003e46:	0852      	lsrs	r2, r2, #1
 8003e48:	3a01      	subs	r2, #1
 8003e4a:	0652      	lsls	r2, r2, #25
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	4916      	ldr	r1, [pc, #88]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e54:	4b14      	ldr	r3, [pc, #80]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a13      	ldr	r2, [pc, #76]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e60:	f7fd fc08 	bl	8001674 <HAL_GetTick>
 8003e64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e66:	e009      	b.n	8003e7c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e68:	f7fd fc04 	bl	8001674 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d902      	bls.n	8003e7c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	73fb      	strb	r3, [r7, #15]
          break;
 8003e7a:	e005      	b.n	8003e88 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0ef      	beq.n	8003e68 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d106      	bne.n	8003e9c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003e8e:	4b06      	ldr	r3, [pc, #24]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e90:	695a      	ldr	r2, [r3, #20]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	4904      	ldr	r1, [pc, #16]	; (8003ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40021000 	.word	0x40021000

08003eac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e049      	b.n	8003f52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d106      	bne.n	8003ed8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f841 	bl	8003f5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4610      	mov	r0, r2
 8003eec:	f000 fb62 	bl	80045b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
	...

08003f70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d001      	beq.n	8003f88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e04f      	b.n	8004028 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0201 	orr.w	r2, r2, #1
 8003f9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a23      	ldr	r2, [pc, #140]	; (8004034 <HAL_TIM_Base_Start_IT+0xc4>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d01d      	beq.n	8003fe6 <HAL_TIM_Base_Start_IT+0x76>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb2:	d018      	beq.n	8003fe6 <HAL_TIM_Base_Start_IT+0x76>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a1f      	ldr	r2, [pc, #124]	; (8004038 <HAL_TIM_Base_Start_IT+0xc8>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d013      	beq.n	8003fe6 <HAL_TIM_Base_Start_IT+0x76>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a1e      	ldr	r2, [pc, #120]	; (800403c <HAL_TIM_Base_Start_IT+0xcc>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d00e      	beq.n	8003fe6 <HAL_TIM_Base_Start_IT+0x76>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a1c      	ldr	r2, [pc, #112]	; (8004040 <HAL_TIM_Base_Start_IT+0xd0>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d009      	beq.n	8003fe6 <HAL_TIM_Base_Start_IT+0x76>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a1b      	ldr	r2, [pc, #108]	; (8004044 <HAL_TIM_Base_Start_IT+0xd4>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d004      	beq.n	8003fe6 <HAL_TIM_Base_Start_IT+0x76>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a19      	ldr	r2, [pc, #100]	; (8004048 <HAL_TIM_Base_Start_IT+0xd8>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d115      	bne.n	8004012 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	4b17      	ldr	r3, [pc, #92]	; (800404c <HAL_TIM_Base_Start_IT+0xdc>)
 8003fee:	4013      	ands	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2b06      	cmp	r3, #6
 8003ff6:	d015      	beq.n	8004024 <HAL_TIM_Base_Start_IT+0xb4>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ffe:	d011      	beq.n	8004024 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0201 	orr.w	r2, r2, #1
 800400e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004010:	e008      	b.n	8004024 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f042 0201 	orr.w	r2, r2, #1
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	e000      	b.n	8004026 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004024:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr
 8004034:	40012c00 	.word	0x40012c00
 8004038:	40000400 	.word	0x40000400
 800403c:	40000800 	.word	0x40000800
 8004040:	40000c00 	.word	0x40000c00
 8004044:	40013400 	.word	0x40013400
 8004048:	40014000 	.word	0x40014000
 800404c:	00010007 	.word	0x00010007

08004050 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e049      	b.n	80040f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d106      	bne.n	800407c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7fd f8b2 	bl	80011e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2202      	movs	r2, #2
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3304      	adds	r3, #4
 800408c:	4619      	mov	r1, r3
 800408e:	4610      	mov	r0, r2
 8004090:	f000 fa90 	bl	80045b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b082      	sub	sp, #8
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b02      	cmp	r3, #2
 8004112:	d122      	bne.n	800415a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b02      	cmp	r3, #2
 8004120:	d11b      	bne.n	800415a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f06f 0202 	mvn.w	r2, #2
 800412a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	f003 0303 	and.w	r3, r3, #3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 fa19 	bl	8004578 <HAL_TIM_IC_CaptureCallback>
 8004146:	e005      	b.n	8004154 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 fa0b 	bl	8004564 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 fa1c 	bl	800458c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b04      	cmp	r3, #4
 8004166:	d122      	bne.n	80041ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f003 0304 	and.w	r3, r3, #4
 8004172:	2b04      	cmp	r3, #4
 8004174:	d11b      	bne.n	80041ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f06f 0204 	mvn.w	r2, #4
 800417e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004190:	2b00      	cmp	r3, #0
 8004192:	d003      	beq.n	800419c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f9ef 	bl	8004578 <HAL_TIM_IC_CaptureCallback>
 800419a:	e005      	b.n	80041a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f9e1 	bl	8004564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f9f2 	bl	800458c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d122      	bne.n	8004202 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f003 0308 	and.w	r3, r3, #8
 80041c6:	2b08      	cmp	r3, #8
 80041c8:	d11b      	bne.n	8004202 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f06f 0208 	mvn.w	r2, #8
 80041d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2204      	movs	r2, #4
 80041d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	f003 0303 	and.w	r3, r3, #3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d003      	beq.n	80041f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f9c5 	bl	8004578 <HAL_TIM_IC_CaptureCallback>
 80041ee:	e005      	b.n	80041fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f9b7 	bl	8004564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f9c8 	bl	800458c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	f003 0310 	and.w	r3, r3, #16
 800420c:	2b10      	cmp	r3, #16
 800420e:	d122      	bne.n	8004256 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	f003 0310 	and.w	r3, r3, #16
 800421a:	2b10      	cmp	r3, #16
 800421c:	d11b      	bne.n	8004256 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f06f 0210 	mvn.w	r2, #16
 8004226:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2208      	movs	r2, #8
 800422c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	69db      	ldr	r3, [r3, #28]
 8004234:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 f99b 	bl	8004578 <HAL_TIM_IC_CaptureCallback>
 8004242:	e005      	b.n	8004250 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f98d 	bl	8004564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f99e 	bl	800458c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b01      	cmp	r3, #1
 8004262:	d10e      	bne.n	8004282 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b01      	cmp	r3, #1
 8004270:	d107      	bne.n	8004282 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f06f 0201 	mvn.w	r2, #1
 800427a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f7fc fdc9 	bl	8000e14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800428c:	2b80      	cmp	r3, #128	; 0x80
 800428e:	d10e      	bne.n	80042ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800429a:	2b80      	cmp	r3, #128	; 0x80
 800429c:	d107      	bne.n	80042ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 fd85 	bl	8004db8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042bc:	d10e      	bne.n	80042dc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c8:	2b80      	cmp	r3, #128	; 0x80
 80042ca:	d107      	bne.n	80042dc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80042d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fd78 	bl	8004dcc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e6:	2b40      	cmp	r3, #64	; 0x40
 80042e8:	d10e      	bne.n	8004308 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f4:	2b40      	cmp	r3, #64	; 0x40
 80042f6:	d107      	bne.n	8004308 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f94c 	bl	80045a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	f003 0320 	and.w	r3, r3, #32
 8004312:	2b20      	cmp	r3, #32
 8004314:	d10e      	bne.n	8004334 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f003 0320 	and.w	r3, r3, #32
 8004320:	2b20      	cmp	r3, #32
 8004322:	d107      	bne.n	8004334 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f06f 0220 	mvn.w	r2, #32
 800432c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 fd38 	bl	8004da4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004334:	bf00      	nop
 8004336:	3708      	adds	r7, #8
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004348:	2300      	movs	r3, #0
 800434a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004352:	2b01      	cmp	r3, #1
 8004354:	d101      	bne.n	800435a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004356:	2302      	movs	r3, #2
 8004358:	e0ff      	b.n	800455a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b14      	cmp	r3, #20
 8004366:	f200 80f0 	bhi.w	800454a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800436a:	a201      	add	r2, pc, #4	; (adr r2, 8004370 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800436c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004370:	080043c5 	.word	0x080043c5
 8004374:	0800454b 	.word	0x0800454b
 8004378:	0800454b 	.word	0x0800454b
 800437c:	0800454b 	.word	0x0800454b
 8004380:	08004405 	.word	0x08004405
 8004384:	0800454b 	.word	0x0800454b
 8004388:	0800454b 	.word	0x0800454b
 800438c:	0800454b 	.word	0x0800454b
 8004390:	08004447 	.word	0x08004447
 8004394:	0800454b 	.word	0x0800454b
 8004398:	0800454b 	.word	0x0800454b
 800439c:	0800454b 	.word	0x0800454b
 80043a0:	08004487 	.word	0x08004487
 80043a4:	0800454b 	.word	0x0800454b
 80043a8:	0800454b 	.word	0x0800454b
 80043ac:	0800454b 	.word	0x0800454b
 80043b0:	080044c9 	.word	0x080044c9
 80043b4:	0800454b 	.word	0x0800454b
 80043b8:	0800454b 	.word	0x0800454b
 80043bc:	0800454b 	.word	0x0800454b
 80043c0:	08004509 	.word	0x08004509
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68b9      	ldr	r1, [r7, #8]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 f98c 	bl	80046e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	699a      	ldr	r2, [r3, #24]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0208 	orr.w	r2, r2, #8
 80043de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699a      	ldr	r2, [r3, #24]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 0204 	bic.w	r2, r2, #4
 80043ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6999      	ldr	r1, [r3, #24]
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	691a      	ldr	r2, [r3, #16]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	619a      	str	r2, [r3, #24]
      break;
 8004402:	e0a5      	b.n	8004550 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68b9      	ldr	r1, [r7, #8]
 800440a:	4618      	mov	r0, r3
 800440c:	f000 f9fc 	bl	8004808 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	699a      	ldr	r2, [r3, #24]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800441e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699a      	ldr	r2, [r3, #24]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800442e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6999      	ldr	r1, [r3, #24]
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	021a      	lsls	r2, r3, #8
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	619a      	str	r2, [r3, #24]
      break;
 8004444:	e084      	b.n	8004550 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68b9      	ldr	r1, [r7, #8]
 800444c:	4618      	mov	r0, r3
 800444e:	f000 fa65 	bl	800491c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	69da      	ldr	r2, [r3, #28]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f042 0208 	orr.w	r2, r2, #8
 8004460:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	69da      	ldr	r2, [r3, #28]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0204 	bic.w	r2, r2, #4
 8004470:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69d9      	ldr	r1, [r3, #28]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	691a      	ldr	r2, [r3, #16]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	430a      	orrs	r2, r1
 8004482:	61da      	str	r2, [r3, #28]
      break;
 8004484:	e064      	b.n	8004550 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68b9      	ldr	r1, [r7, #8]
 800448c:	4618      	mov	r0, r3
 800448e:	f000 facd 	bl	8004a2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	69da      	ldr	r2, [r3, #28]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	69da      	ldr	r2, [r3, #28]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	69d9      	ldr	r1, [r3, #28]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	021a      	lsls	r2, r3, #8
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	61da      	str	r2, [r3, #28]
      break;
 80044c6:	e043      	b.n	8004550 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68b9      	ldr	r1, [r7, #8]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 fb16 	bl	8004b00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0208 	orr.w	r2, r2, #8
 80044e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0204 	bic.w	r2, r2, #4
 80044f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	691a      	ldr	r2, [r3, #16]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004506:	e023      	b.n	8004550 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68b9      	ldr	r1, [r7, #8]
 800450e:	4618      	mov	r0, r3
 8004510:	f000 fb5a 	bl	8004bc8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004522:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004532:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	021a      	lsls	r2, r3, #8
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004548:	e002      	b.n	8004550 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	75fb      	strb	r3, [r7, #23]
      break;
 800454e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004558:	7dfb      	ldrb	r3, [r7, #23]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop

08004564 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a40      	ldr	r2, [pc, #256]	; (80046c8 <TIM_Base_SetConfig+0x114>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d013      	beq.n	80045f4 <TIM_Base_SetConfig+0x40>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d2:	d00f      	beq.n	80045f4 <TIM_Base_SetConfig+0x40>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a3d      	ldr	r2, [pc, #244]	; (80046cc <TIM_Base_SetConfig+0x118>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d00b      	beq.n	80045f4 <TIM_Base_SetConfig+0x40>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a3c      	ldr	r2, [pc, #240]	; (80046d0 <TIM_Base_SetConfig+0x11c>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d007      	beq.n	80045f4 <TIM_Base_SetConfig+0x40>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a3b      	ldr	r2, [pc, #236]	; (80046d4 <TIM_Base_SetConfig+0x120>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d003      	beq.n	80045f4 <TIM_Base_SetConfig+0x40>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a3a      	ldr	r2, [pc, #232]	; (80046d8 <TIM_Base_SetConfig+0x124>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d108      	bne.n	8004606 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	4313      	orrs	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a2f      	ldr	r2, [pc, #188]	; (80046c8 <TIM_Base_SetConfig+0x114>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d01f      	beq.n	800464e <TIM_Base_SetConfig+0x9a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004614:	d01b      	beq.n	800464e <TIM_Base_SetConfig+0x9a>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a2c      	ldr	r2, [pc, #176]	; (80046cc <TIM_Base_SetConfig+0x118>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d017      	beq.n	800464e <TIM_Base_SetConfig+0x9a>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a2b      	ldr	r2, [pc, #172]	; (80046d0 <TIM_Base_SetConfig+0x11c>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d013      	beq.n	800464e <TIM_Base_SetConfig+0x9a>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a2a      	ldr	r2, [pc, #168]	; (80046d4 <TIM_Base_SetConfig+0x120>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d00f      	beq.n	800464e <TIM_Base_SetConfig+0x9a>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a29      	ldr	r2, [pc, #164]	; (80046d8 <TIM_Base_SetConfig+0x124>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d00b      	beq.n	800464e <TIM_Base_SetConfig+0x9a>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a28      	ldr	r2, [pc, #160]	; (80046dc <TIM_Base_SetConfig+0x128>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d007      	beq.n	800464e <TIM_Base_SetConfig+0x9a>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a27      	ldr	r2, [pc, #156]	; (80046e0 <TIM_Base_SetConfig+0x12c>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d003      	beq.n	800464e <TIM_Base_SetConfig+0x9a>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a26      	ldr	r2, [pc, #152]	; (80046e4 <TIM_Base_SetConfig+0x130>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d108      	bne.n	8004660 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	4313      	orrs	r3, r2
 800465e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a10      	ldr	r2, [pc, #64]	; (80046c8 <TIM_Base_SetConfig+0x114>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d00f      	beq.n	80046ac <TIM_Base_SetConfig+0xf8>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a12      	ldr	r2, [pc, #72]	; (80046d8 <TIM_Base_SetConfig+0x124>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d00b      	beq.n	80046ac <TIM_Base_SetConfig+0xf8>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a11      	ldr	r2, [pc, #68]	; (80046dc <TIM_Base_SetConfig+0x128>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d007      	beq.n	80046ac <TIM_Base_SetConfig+0xf8>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a10      	ldr	r2, [pc, #64]	; (80046e0 <TIM_Base_SetConfig+0x12c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d003      	beq.n	80046ac <TIM_Base_SetConfig+0xf8>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a0f      	ldr	r2, [pc, #60]	; (80046e4 <TIM_Base_SetConfig+0x130>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d103      	bne.n	80046b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	691a      	ldr	r2, [r3, #16]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	615a      	str	r2, [r3, #20]
}
 80046ba:	bf00      	nop
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	40012c00 	.word	0x40012c00
 80046cc:	40000400 	.word	0x40000400
 80046d0:	40000800 	.word	0x40000800
 80046d4:	40000c00 	.word	0x40000c00
 80046d8:	40013400 	.word	0x40013400
 80046dc:	40014000 	.word	0x40014000
 80046e0:	40014400 	.word	0x40014400
 80046e4:	40014800 	.word	0x40014800

080046e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	f023 0201 	bic.w	r2, r3, #1
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f023 0303 	bic.w	r3, r3, #3
 8004722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	4313      	orrs	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f023 0302 	bic.w	r3, r3, #2
 8004734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	4313      	orrs	r3, r2
 800473e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a2c      	ldr	r2, [pc, #176]	; (80047f4 <TIM_OC1_SetConfig+0x10c>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d00f      	beq.n	8004768 <TIM_OC1_SetConfig+0x80>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a2b      	ldr	r2, [pc, #172]	; (80047f8 <TIM_OC1_SetConfig+0x110>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d00b      	beq.n	8004768 <TIM_OC1_SetConfig+0x80>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a2a      	ldr	r2, [pc, #168]	; (80047fc <TIM_OC1_SetConfig+0x114>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d007      	beq.n	8004768 <TIM_OC1_SetConfig+0x80>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a29      	ldr	r2, [pc, #164]	; (8004800 <TIM_OC1_SetConfig+0x118>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d003      	beq.n	8004768 <TIM_OC1_SetConfig+0x80>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a28      	ldr	r2, [pc, #160]	; (8004804 <TIM_OC1_SetConfig+0x11c>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d10c      	bne.n	8004782 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f023 0308 	bic.w	r3, r3, #8
 800476e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	4313      	orrs	r3, r2
 8004778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f023 0304 	bic.w	r3, r3, #4
 8004780:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a1b      	ldr	r2, [pc, #108]	; (80047f4 <TIM_OC1_SetConfig+0x10c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d00f      	beq.n	80047aa <TIM_OC1_SetConfig+0xc2>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a1a      	ldr	r2, [pc, #104]	; (80047f8 <TIM_OC1_SetConfig+0x110>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d00b      	beq.n	80047aa <TIM_OC1_SetConfig+0xc2>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a19      	ldr	r2, [pc, #100]	; (80047fc <TIM_OC1_SetConfig+0x114>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d007      	beq.n	80047aa <TIM_OC1_SetConfig+0xc2>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a18      	ldr	r2, [pc, #96]	; (8004800 <TIM_OC1_SetConfig+0x118>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d003      	beq.n	80047aa <TIM_OC1_SetConfig+0xc2>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a17      	ldr	r2, [pc, #92]	; (8004804 <TIM_OC1_SetConfig+0x11c>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d111      	bne.n	80047ce <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	621a      	str	r2, [r3, #32]
}
 80047e8:	bf00      	nop
 80047ea:	371c      	adds	r7, #28
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	40012c00 	.word	0x40012c00
 80047f8:	40013400 	.word	0x40013400
 80047fc:	40014000 	.word	0x40014000
 8004800:	40014400 	.word	0x40014400
 8004804:	40014800 	.word	0x40014800

08004808 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004808:	b480      	push	{r7}
 800480a:	b087      	sub	sp, #28
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	f023 0210 	bic.w	r2, r3, #16
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800483a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004842:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	021b      	lsls	r3, r3, #8
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	4313      	orrs	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f023 0320 	bic.w	r3, r3, #32
 8004856:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	011b      	lsls	r3, r3, #4
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	4313      	orrs	r3, r2
 8004862:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a28      	ldr	r2, [pc, #160]	; (8004908 <TIM_OC2_SetConfig+0x100>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d003      	beq.n	8004874 <TIM_OC2_SetConfig+0x6c>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a27      	ldr	r2, [pc, #156]	; (800490c <TIM_OC2_SetConfig+0x104>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d10d      	bne.n	8004890 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800487a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	011b      	lsls	r3, r3, #4
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	4313      	orrs	r3, r2
 8004886:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800488e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a1d      	ldr	r2, [pc, #116]	; (8004908 <TIM_OC2_SetConfig+0x100>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d00f      	beq.n	80048b8 <TIM_OC2_SetConfig+0xb0>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a1c      	ldr	r2, [pc, #112]	; (800490c <TIM_OC2_SetConfig+0x104>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d00b      	beq.n	80048b8 <TIM_OC2_SetConfig+0xb0>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a1b      	ldr	r2, [pc, #108]	; (8004910 <TIM_OC2_SetConfig+0x108>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d007      	beq.n	80048b8 <TIM_OC2_SetConfig+0xb0>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a1a      	ldr	r2, [pc, #104]	; (8004914 <TIM_OC2_SetConfig+0x10c>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d003      	beq.n	80048b8 <TIM_OC2_SetConfig+0xb0>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a19      	ldr	r2, [pc, #100]	; (8004918 <TIM_OC2_SetConfig+0x110>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d113      	bne.n	80048e0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	4313      	orrs	r3, r2
 80048de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	621a      	str	r2, [r3, #32]
}
 80048fa:	bf00      	nop
 80048fc:	371c      	adds	r7, #28
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	40012c00 	.word	0x40012c00
 800490c:	40013400 	.word	0x40013400
 8004910:	40014000 	.word	0x40014000
 8004914:	40014400 	.word	0x40014400
 8004918:	40014800 	.word	0x40014800

0800491c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800494a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800494e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0303 	bic.w	r3, r3, #3
 8004956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	4313      	orrs	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	021b      	lsls	r3, r3, #8
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	4313      	orrs	r3, r2
 8004974:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a27      	ldr	r2, [pc, #156]	; (8004a18 <TIM_OC3_SetConfig+0xfc>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d003      	beq.n	8004986 <TIM_OC3_SetConfig+0x6a>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a26      	ldr	r2, [pc, #152]	; (8004a1c <TIM_OC3_SetConfig+0x100>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d10d      	bne.n	80049a2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800498c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	021b      	lsls	r3, r3, #8
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	4313      	orrs	r3, r2
 8004998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a1c      	ldr	r2, [pc, #112]	; (8004a18 <TIM_OC3_SetConfig+0xfc>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d00f      	beq.n	80049ca <TIM_OC3_SetConfig+0xae>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a1b      	ldr	r2, [pc, #108]	; (8004a1c <TIM_OC3_SetConfig+0x100>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d00b      	beq.n	80049ca <TIM_OC3_SetConfig+0xae>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a1a      	ldr	r2, [pc, #104]	; (8004a20 <TIM_OC3_SetConfig+0x104>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d007      	beq.n	80049ca <TIM_OC3_SetConfig+0xae>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a19      	ldr	r2, [pc, #100]	; (8004a24 <TIM_OC3_SetConfig+0x108>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d003      	beq.n	80049ca <TIM_OC3_SetConfig+0xae>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a18      	ldr	r2, [pc, #96]	; (8004a28 <TIM_OC3_SetConfig+0x10c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d113      	bne.n	80049f2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	011b      	lsls	r3, r3, #4
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	621a      	str	r2, [r3, #32]
}
 8004a0c:	bf00      	nop
 8004a0e:	371c      	adds	r7, #28
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	40012c00 	.word	0x40012c00
 8004a1c:	40013400 	.word	0x40013400
 8004a20:	40014000 	.word	0x40014000
 8004a24:	40014400 	.word	0x40014400
 8004a28:	40014800 	.word	0x40014800

08004a2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	021b      	lsls	r3, r3, #8
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	031b      	lsls	r3, r3, #12
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a18      	ldr	r2, [pc, #96]	; (8004aec <TIM_OC4_SetConfig+0xc0>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d00f      	beq.n	8004ab0 <TIM_OC4_SetConfig+0x84>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a17      	ldr	r2, [pc, #92]	; (8004af0 <TIM_OC4_SetConfig+0xc4>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d00b      	beq.n	8004ab0 <TIM_OC4_SetConfig+0x84>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a16      	ldr	r2, [pc, #88]	; (8004af4 <TIM_OC4_SetConfig+0xc8>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d007      	beq.n	8004ab0 <TIM_OC4_SetConfig+0x84>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a15      	ldr	r2, [pc, #84]	; (8004af8 <TIM_OC4_SetConfig+0xcc>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d003      	beq.n	8004ab0 <TIM_OC4_SetConfig+0x84>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a14      	ldr	r2, [pc, #80]	; (8004afc <TIM_OC4_SetConfig+0xd0>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d109      	bne.n	8004ac4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ab6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	019b      	lsls	r3, r3, #6
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	621a      	str	r2, [r3, #32]
}
 8004ade:	bf00      	nop
 8004ae0:	371c      	adds	r7, #28
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	40012c00 	.word	0x40012c00
 8004af0:	40013400 	.word	0x40013400
 8004af4:	40014000 	.word	0x40014000
 8004af8:	40014400 	.word	0x40014400
 8004afc:	40014800 	.word	0x40014800

08004b00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004b44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	041b      	lsls	r3, r3, #16
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a17      	ldr	r2, [pc, #92]	; (8004bb4 <TIM_OC5_SetConfig+0xb4>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d00f      	beq.n	8004b7a <TIM_OC5_SetConfig+0x7a>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a16      	ldr	r2, [pc, #88]	; (8004bb8 <TIM_OC5_SetConfig+0xb8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d00b      	beq.n	8004b7a <TIM_OC5_SetConfig+0x7a>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a15      	ldr	r2, [pc, #84]	; (8004bbc <TIM_OC5_SetConfig+0xbc>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d007      	beq.n	8004b7a <TIM_OC5_SetConfig+0x7a>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a14      	ldr	r2, [pc, #80]	; (8004bc0 <TIM_OC5_SetConfig+0xc0>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d003      	beq.n	8004b7a <TIM_OC5_SetConfig+0x7a>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a13      	ldr	r2, [pc, #76]	; (8004bc4 <TIM_OC5_SetConfig+0xc4>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d109      	bne.n	8004b8e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	021b      	lsls	r3, r3, #8
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	621a      	str	r2, [r3, #32]
}
 8004ba8:	bf00      	nop
 8004baa:	371c      	adds	r7, #28
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	40012c00 	.word	0x40012c00
 8004bb8:	40013400 	.word	0x40013400
 8004bbc:	40014000 	.word	0x40014000
 8004bc0:	40014400 	.word	0x40014400
 8004bc4:	40014800 	.word	0x40014800

08004bc8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b087      	sub	sp, #28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	021b      	lsls	r3, r3, #8
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	051b      	lsls	r3, r3, #20
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a18      	ldr	r2, [pc, #96]	; (8004c80 <TIM_OC6_SetConfig+0xb8>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d00f      	beq.n	8004c44 <TIM_OC6_SetConfig+0x7c>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a17      	ldr	r2, [pc, #92]	; (8004c84 <TIM_OC6_SetConfig+0xbc>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d00b      	beq.n	8004c44 <TIM_OC6_SetConfig+0x7c>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a16      	ldr	r2, [pc, #88]	; (8004c88 <TIM_OC6_SetConfig+0xc0>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d007      	beq.n	8004c44 <TIM_OC6_SetConfig+0x7c>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a15      	ldr	r2, [pc, #84]	; (8004c8c <TIM_OC6_SetConfig+0xc4>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d003      	beq.n	8004c44 <TIM_OC6_SetConfig+0x7c>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a14      	ldr	r2, [pc, #80]	; (8004c90 <TIM_OC6_SetConfig+0xc8>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d109      	bne.n	8004c58 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	029b      	lsls	r3, r3, #10
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	621a      	str	r2, [r3, #32]
}
 8004c72:	bf00      	nop
 8004c74:	371c      	adds	r7, #28
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	40012c00 	.word	0x40012c00
 8004c84:	40013400 	.word	0x40013400
 8004c88:	40014000 	.word	0x40014000
 8004c8c:	40014400 	.word	0x40014400
 8004c90:	40014800 	.word	0x40014800

08004c94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d101      	bne.n	8004cac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ca8:	2302      	movs	r3, #2
 8004caa:	e068      	b.n	8004d7e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a2e      	ldr	r2, [pc, #184]	; (8004d8c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d004      	beq.n	8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a2d      	ldr	r2, [pc, #180]	; (8004d90 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d108      	bne.n	8004cf2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ce6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a1e      	ldr	r2, [pc, #120]	; (8004d8c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d01d      	beq.n	8004d52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d1e:	d018      	beq.n	8004d52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a1b      	ldr	r2, [pc, #108]	; (8004d94 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d013      	beq.n	8004d52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a1a      	ldr	r2, [pc, #104]	; (8004d98 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d00e      	beq.n	8004d52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a18      	ldr	r2, [pc, #96]	; (8004d9c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d009      	beq.n	8004d52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a13      	ldr	r2, [pc, #76]	; (8004d90 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d004      	beq.n	8004d52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a14      	ldr	r2, [pc, #80]	; (8004da0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d10c      	bne.n	8004d6c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	40012c00 	.word	0x40012c00
 8004d90:	40013400 	.word	0x40013400
 8004d94:	40000400 	.word	0x40000400
 8004d98:	40000800 	.word	0x40000800
 8004d9c:	40000c00 	.word	0x40000c00
 8004da0:	40014000 	.word	0x40014000

08004da4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e040      	b.n	8004e74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d106      	bne.n	8004e08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7fc fa44 	bl	8001290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2224      	movs	r2, #36	; 0x24
 8004e0c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 0201 	bic.w	r2, r2, #1
 8004e1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f992 	bl	8005148 <UART_SetConfig>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d101      	bne.n	8004e2e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e022      	b.n	8004e74 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d002      	beq.n	8004e3c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 fc3e 	bl	80056b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	689a      	ldr	r2, [r3, #8]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0201 	orr.w	r2, r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 fcc5 	bl	80057fc <UART_CheckIdleState>
 8004e72:	4603      	mov	r3, r0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b08a      	sub	sp, #40	; 0x28
 8004e80:	af02      	add	r7, sp, #8
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	603b      	str	r3, [r7, #0]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e90:	2b20      	cmp	r3, #32
 8004e92:	f040 8082 	bne.w	8004f9a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d002      	beq.n	8004ea2 <HAL_UART_Transmit+0x26>
 8004e9c:	88fb      	ldrh	r3, [r7, #6]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e07a      	b.n	8004f9c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d101      	bne.n	8004eb4 <HAL_UART_Transmit+0x38>
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	e073      	b.n	8004f9c <HAL_UART_Transmit+0x120>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2221      	movs	r2, #33	; 0x21
 8004ec8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eca:	f7fc fbd3 	bl	8001674 <HAL_GetTick>
 8004ece:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	88fa      	ldrh	r2, [r7, #6]
 8004ed4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	88fa      	ldrh	r2, [r7, #6]
 8004edc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee8:	d108      	bne.n	8004efc <HAL_UART_Transmit+0x80>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d104      	bne.n	8004efc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	61bb      	str	r3, [r7, #24]
 8004efa:	e003      	b.n	8004f04 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f00:	2300      	movs	r3, #0
 8004f02:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004f0c:	e02d      	b.n	8004f6a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	2200      	movs	r2, #0
 8004f16:	2180      	movs	r1, #128	; 0x80
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 fcb8 	bl	800588e <UART_WaitOnFlagUntilTimeout>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e039      	b.n	8004f9c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10b      	bne.n	8004f46 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	881a      	ldrh	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f3a:	b292      	uxth	r2, r2
 8004f3c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	3302      	adds	r3, #2
 8004f42:	61bb      	str	r3, [r7, #24]
 8004f44:	e008      	b.n	8004f58 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	781a      	ldrb	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	b292      	uxth	r2, r2
 8004f50:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	3301      	adds	r3, #1
 8004f56:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	3b01      	subs	r3, #1
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1cb      	bne.n	8004f0e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	2140      	movs	r1, #64	; 0x40
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 fc84 	bl	800588e <UART_WaitOnFlagUntilTimeout>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d001      	beq.n	8004f90 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e005      	b.n	8004f9c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2220      	movs	r2, #32
 8004f94:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	e000      	b.n	8004f9c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004f9a:	2302      	movs	r3, #2
  }
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3720      	adds	r7, #32
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b08a      	sub	sp, #40	; 0x28
 8004fa8:	af02      	add	r7, sp, #8
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	603b      	str	r3, [r7, #0]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fb8:	2b20      	cmp	r3, #32
 8004fba:	f040 80bf 	bne.w	800513c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d002      	beq.n	8004fca <HAL_UART_Receive+0x26>
 8004fc4:	88fb      	ldrh	r3, [r7, #6]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e0b7      	b.n	800513e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d101      	bne.n	8004fdc <HAL_UART_Receive+0x38>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	e0b0      	b.n	800513e <HAL_UART_Receive+0x19a>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2222      	movs	r2, #34	; 0x22
 8004ff0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ff8:	f7fc fb3c 	bl	8001674 <HAL_GetTick>
 8004ffc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	88fa      	ldrh	r2, [r7, #6]
 8005002:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	88fa      	ldrh	r2, [r7, #6]
 800500a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005016:	d10e      	bne.n	8005036 <HAL_UART_Receive+0x92>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d105      	bne.n	800502c <HAL_UART_Receive+0x88>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005026:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800502a:	e02d      	b.n	8005088 <HAL_UART_Receive+0xe4>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	22ff      	movs	r2, #255	; 0xff
 8005030:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005034:	e028      	b.n	8005088 <HAL_UART_Receive+0xe4>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10d      	bne.n	800505a <HAL_UART_Receive+0xb6>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d104      	bne.n	8005050 <HAL_UART_Receive+0xac>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	22ff      	movs	r2, #255	; 0xff
 800504a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800504e:	e01b      	b.n	8005088 <HAL_UART_Receive+0xe4>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	227f      	movs	r2, #127	; 0x7f
 8005054:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005058:	e016      	b.n	8005088 <HAL_UART_Receive+0xe4>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005062:	d10d      	bne.n	8005080 <HAL_UART_Receive+0xdc>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d104      	bne.n	8005076 <HAL_UART_Receive+0xd2>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	227f      	movs	r2, #127	; 0x7f
 8005070:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005074:	e008      	b.n	8005088 <HAL_UART_Receive+0xe4>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	223f      	movs	r2, #63	; 0x3f
 800507a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800507e:	e003      	b.n	8005088 <HAL_UART_Receive+0xe4>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800508e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005098:	d108      	bne.n	80050ac <HAL_UART_Receive+0x108>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d104      	bne.n	80050ac <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80050a2:	2300      	movs	r3, #0
 80050a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	61bb      	str	r3, [r7, #24]
 80050aa:	e003      	b.n	80050b4 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050b0:	2300      	movs	r3, #0
 80050b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80050bc:	e033      	b.n	8005126 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	2200      	movs	r2, #0
 80050c6:	2120      	movs	r1, #32
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f000 fbe0 	bl	800588e <UART_WaitOnFlagUntilTimeout>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e032      	b.n	800513e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10c      	bne.n	80050f8 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	8a7b      	ldrh	r3, [r7, #18]
 80050e8:	4013      	ands	r3, r2
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	3302      	adds	r3, #2
 80050f4:	61bb      	str	r3, [r7, #24]
 80050f6:	e00d      	b.n	8005114 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80050fe:	b29b      	uxth	r3, r3
 8005100:	b2da      	uxtb	r2, r3
 8005102:	8a7b      	ldrh	r3, [r7, #18]
 8005104:	b2db      	uxtb	r3, r3
 8005106:	4013      	ands	r3, r2
 8005108:	b2da      	uxtb	r2, r3
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	3301      	adds	r3, #1
 8005112:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800511a:	b29b      	uxth	r3, r3
 800511c:	3b01      	subs	r3, #1
 800511e:	b29a      	uxth	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800512c:	b29b      	uxth	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1c5      	bne.n	80050be <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2220      	movs	r2, #32
 8005136:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005138:	2300      	movs	r3, #0
 800513a:	e000      	b.n	800513e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800513c:	2302      	movs	r3, #2
  }
}
 800513e:	4618      	mov	r0, r3
 8005140:	3720      	adds	r7, #32
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
	...

08005148 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800514c:	b08a      	sub	sp, #40	; 0x28
 800514e:	af00      	add	r7, sp, #0
 8005150:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005152:	2300      	movs	r3, #0
 8005154:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	431a      	orrs	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	431a      	orrs	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	69db      	ldr	r3, [r3, #28]
 800516c:	4313      	orrs	r3, r2
 800516e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	4ba4      	ldr	r3, [pc, #656]	; (8005408 <UART_SetConfig+0x2c0>)
 8005178:	4013      	ands	r3, r2
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	6812      	ldr	r2, [r2, #0]
 800517e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005180:	430b      	orrs	r3, r1
 8005182:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a99      	ldr	r2, [pc, #612]	; (800540c <UART_SetConfig+0x2c4>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d004      	beq.n	80051b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b0:	4313      	orrs	r3, r2
 80051b2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051c4:	430a      	orrs	r2, r1
 80051c6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a90      	ldr	r2, [pc, #576]	; (8005410 <UART_SetConfig+0x2c8>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d126      	bne.n	8005220 <UART_SetConfig+0xd8>
 80051d2:	4b90      	ldr	r3, [pc, #576]	; (8005414 <UART_SetConfig+0x2cc>)
 80051d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d8:	f003 0303 	and.w	r3, r3, #3
 80051dc:	2b03      	cmp	r3, #3
 80051de:	d81b      	bhi.n	8005218 <UART_SetConfig+0xd0>
 80051e0:	a201      	add	r2, pc, #4	; (adr r2, 80051e8 <UART_SetConfig+0xa0>)
 80051e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e6:	bf00      	nop
 80051e8:	080051f9 	.word	0x080051f9
 80051ec:	08005209 	.word	0x08005209
 80051f0:	08005201 	.word	0x08005201
 80051f4:	08005211 	.word	0x08005211
 80051f8:	2301      	movs	r3, #1
 80051fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051fe:	e116      	b.n	800542e <UART_SetConfig+0x2e6>
 8005200:	2302      	movs	r3, #2
 8005202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005206:	e112      	b.n	800542e <UART_SetConfig+0x2e6>
 8005208:	2304      	movs	r3, #4
 800520a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800520e:	e10e      	b.n	800542e <UART_SetConfig+0x2e6>
 8005210:	2308      	movs	r3, #8
 8005212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005216:	e10a      	b.n	800542e <UART_SetConfig+0x2e6>
 8005218:	2310      	movs	r3, #16
 800521a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800521e:	e106      	b.n	800542e <UART_SetConfig+0x2e6>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a7c      	ldr	r2, [pc, #496]	; (8005418 <UART_SetConfig+0x2d0>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d138      	bne.n	800529c <UART_SetConfig+0x154>
 800522a:	4b7a      	ldr	r3, [pc, #488]	; (8005414 <UART_SetConfig+0x2cc>)
 800522c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005230:	f003 030c 	and.w	r3, r3, #12
 8005234:	2b0c      	cmp	r3, #12
 8005236:	d82d      	bhi.n	8005294 <UART_SetConfig+0x14c>
 8005238:	a201      	add	r2, pc, #4	; (adr r2, 8005240 <UART_SetConfig+0xf8>)
 800523a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523e:	bf00      	nop
 8005240:	08005275 	.word	0x08005275
 8005244:	08005295 	.word	0x08005295
 8005248:	08005295 	.word	0x08005295
 800524c:	08005295 	.word	0x08005295
 8005250:	08005285 	.word	0x08005285
 8005254:	08005295 	.word	0x08005295
 8005258:	08005295 	.word	0x08005295
 800525c:	08005295 	.word	0x08005295
 8005260:	0800527d 	.word	0x0800527d
 8005264:	08005295 	.word	0x08005295
 8005268:	08005295 	.word	0x08005295
 800526c:	08005295 	.word	0x08005295
 8005270:	0800528d 	.word	0x0800528d
 8005274:	2300      	movs	r3, #0
 8005276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800527a:	e0d8      	b.n	800542e <UART_SetConfig+0x2e6>
 800527c:	2302      	movs	r3, #2
 800527e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005282:	e0d4      	b.n	800542e <UART_SetConfig+0x2e6>
 8005284:	2304      	movs	r3, #4
 8005286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800528a:	e0d0      	b.n	800542e <UART_SetConfig+0x2e6>
 800528c:	2308      	movs	r3, #8
 800528e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005292:	e0cc      	b.n	800542e <UART_SetConfig+0x2e6>
 8005294:	2310      	movs	r3, #16
 8005296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800529a:	e0c8      	b.n	800542e <UART_SetConfig+0x2e6>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a5e      	ldr	r2, [pc, #376]	; (800541c <UART_SetConfig+0x2d4>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d125      	bne.n	80052f2 <UART_SetConfig+0x1aa>
 80052a6:	4b5b      	ldr	r3, [pc, #364]	; (8005414 <UART_SetConfig+0x2cc>)
 80052a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80052b0:	2b30      	cmp	r3, #48	; 0x30
 80052b2:	d016      	beq.n	80052e2 <UART_SetConfig+0x19a>
 80052b4:	2b30      	cmp	r3, #48	; 0x30
 80052b6:	d818      	bhi.n	80052ea <UART_SetConfig+0x1a2>
 80052b8:	2b20      	cmp	r3, #32
 80052ba:	d00a      	beq.n	80052d2 <UART_SetConfig+0x18a>
 80052bc:	2b20      	cmp	r3, #32
 80052be:	d814      	bhi.n	80052ea <UART_SetConfig+0x1a2>
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d002      	beq.n	80052ca <UART_SetConfig+0x182>
 80052c4:	2b10      	cmp	r3, #16
 80052c6:	d008      	beq.n	80052da <UART_SetConfig+0x192>
 80052c8:	e00f      	b.n	80052ea <UART_SetConfig+0x1a2>
 80052ca:	2300      	movs	r3, #0
 80052cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052d0:	e0ad      	b.n	800542e <UART_SetConfig+0x2e6>
 80052d2:	2302      	movs	r3, #2
 80052d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052d8:	e0a9      	b.n	800542e <UART_SetConfig+0x2e6>
 80052da:	2304      	movs	r3, #4
 80052dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052e0:	e0a5      	b.n	800542e <UART_SetConfig+0x2e6>
 80052e2:	2308      	movs	r3, #8
 80052e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052e8:	e0a1      	b.n	800542e <UART_SetConfig+0x2e6>
 80052ea:	2310      	movs	r3, #16
 80052ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052f0:	e09d      	b.n	800542e <UART_SetConfig+0x2e6>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a4a      	ldr	r2, [pc, #296]	; (8005420 <UART_SetConfig+0x2d8>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d125      	bne.n	8005348 <UART_SetConfig+0x200>
 80052fc:	4b45      	ldr	r3, [pc, #276]	; (8005414 <UART_SetConfig+0x2cc>)
 80052fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005302:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005306:	2bc0      	cmp	r3, #192	; 0xc0
 8005308:	d016      	beq.n	8005338 <UART_SetConfig+0x1f0>
 800530a:	2bc0      	cmp	r3, #192	; 0xc0
 800530c:	d818      	bhi.n	8005340 <UART_SetConfig+0x1f8>
 800530e:	2b80      	cmp	r3, #128	; 0x80
 8005310:	d00a      	beq.n	8005328 <UART_SetConfig+0x1e0>
 8005312:	2b80      	cmp	r3, #128	; 0x80
 8005314:	d814      	bhi.n	8005340 <UART_SetConfig+0x1f8>
 8005316:	2b00      	cmp	r3, #0
 8005318:	d002      	beq.n	8005320 <UART_SetConfig+0x1d8>
 800531a:	2b40      	cmp	r3, #64	; 0x40
 800531c:	d008      	beq.n	8005330 <UART_SetConfig+0x1e8>
 800531e:	e00f      	b.n	8005340 <UART_SetConfig+0x1f8>
 8005320:	2300      	movs	r3, #0
 8005322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005326:	e082      	b.n	800542e <UART_SetConfig+0x2e6>
 8005328:	2302      	movs	r3, #2
 800532a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800532e:	e07e      	b.n	800542e <UART_SetConfig+0x2e6>
 8005330:	2304      	movs	r3, #4
 8005332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005336:	e07a      	b.n	800542e <UART_SetConfig+0x2e6>
 8005338:	2308      	movs	r3, #8
 800533a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800533e:	e076      	b.n	800542e <UART_SetConfig+0x2e6>
 8005340:	2310      	movs	r3, #16
 8005342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005346:	e072      	b.n	800542e <UART_SetConfig+0x2e6>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a35      	ldr	r2, [pc, #212]	; (8005424 <UART_SetConfig+0x2dc>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d12a      	bne.n	80053a8 <UART_SetConfig+0x260>
 8005352:	4b30      	ldr	r3, [pc, #192]	; (8005414 <UART_SetConfig+0x2cc>)
 8005354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005358:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800535c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005360:	d01a      	beq.n	8005398 <UART_SetConfig+0x250>
 8005362:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005366:	d81b      	bhi.n	80053a0 <UART_SetConfig+0x258>
 8005368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800536c:	d00c      	beq.n	8005388 <UART_SetConfig+0x240>
 800536e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005372:	d815      	bhi.n	80053a0 <UART_SetConfig+0x258>
 8005374:	2b00      	cmp	r3, #0
 8005376:	d003      	beq.n	8005380 <UART_SetConfig+0x238>
 8005378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800537c:	d008      	beq.n	8005390 <UART_SetConfig+0x248>
 800537e:	e00f      	b.n	80053a0 <UART_SetConfig+0x258>
 8005380:	2300      	movs	r3, #0
 8005382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005386:	e052      	b.n	800542e <UART_SetConfig+0x2e6>
 8005388:	2302      	movs	r3, #2
 800538a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800538e:	e04e      	b.n	800542e <UART_SetConfig+0x2e6>
 8005390:	2304      	movs	r3, #4
 8005392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005396:	e04a      	b.n	800542e <UART_SetConfig+0x2e6>
 8005398:	2308      	movs	r3, #8
 800539a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800539e:	e046      	b.n	800542e <UART_SetConfig+0x2e6>
 80053a0:	2310      	movs	r3, #16
 80053a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053a6:	e042      	b.n	800542e <UART_SetConfig+0x2e6>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a17      	ldr	r2, [pc, #92]	; (800540c <UART_SetConfig+0x2c4>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d13a      	bne.n	8005428 <UART_SetConfig+0x2e0>
 80053b2:	4b18      	ldr	r3, [pc, #96]	; (8005414 <UART_SetConfig+0x2cc>)
 80053b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80053bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053c0:	d01a      	beq.n	80053f8 <UART_SetConfig+0x2b0>
 80053c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053c6:	d81b      	bhi.n	8005400 <UART_SetConfig+0x2b8>
 80053c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053cc:	d00c      	beq.n	80053e8 <UART_SetConfig+0x2a0>
 80053ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053d2:	d815      	bhi.n	8005400 <UART_SetConfig+0x2b8>
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <UART_SetConfig+0x298>
 80053d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053dc:	d008      	beq.n	80053f0 <UART_SetConfig+0x2a8>
 80053de:	e00f      	b.n	8005400 <UART_SetConfig+0x2b8>
 80053e0:	2300      	movs	r3, #0
 80053e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053e6:	e022      	b.n	800542e <UART_SetConfig+0x2e6>
 80053e8:	2302      	movs	r3, #2
 80053ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ee:	e01e      	b.n	800542e <UART_SetConfig+0x2e6>
 80053f0:	2304      	movs	r3, #4
 80053f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053f6:	e01a      	b.n	800542e <UART_SetConfig+0x2e6>
 80053f8:	2308      	movs	r3, #8
 80053fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053fe:	e016      	b.n	800542e <UART_SetConfig+0x2e6>
 8005400:	2310      	movs	r3, #16
 8005402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005406:	e012      	b.n	800542e <UART_SetConfig+0x2e6>
 8005408:	efff69f3 	.word	0xefff69f3
 800540c:	40008000 	.word	0x40008000
 8005410:	40013800 	.word	0x40013800
 8005414:	40021000 	.word	0x40021000
 8005418:	40004400 	.word	0x40004400
 800541c:	40004800 	.word	0x40004800
 8005420:	40004c00 	.word	0x40004c00
 8005424:	40005000 	.word	0x40005000
 8005428:	2310      	movs	r3, #16
 800542a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a9f      	ldr	r2, [pc, #636]	; (80056b0 <UART_SetConfig+0x568>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d17a      	bne.n	800552e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005438:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800543c:	2b08      	cmp	r3, #8
 800543e:	d824      	bhi.n	800548a <UART_SetConfig+0x342>
 8005440:	a201      	add	r2, pc, #4	; (adr r2, 8005448 <UART_SetConfig+0x300>)
 8005442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005446:	bf00      	nop
 8005448:	0800546d 	.word	0x0800546d
 800544c:	0800548b 	.word	0x0800548b
 8005450:	08005475 	.word	0x08005475
 8005454:	0800548b 	.word	0x0800548b
 8005458:	0800547b 	.word	0x0800547b
 800545c:	0800548b 	.word	0x0800548b
 8005460:	0800548b 	.word	0x0800548b
 8005464:	0800548b 	.word	0x0800548b
 8005468:	08005483 	.word	0x08005483
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800546c:	f7fd ffa4 	bl	80033b8 <HAL_RCC_GetPCLK1Freq>
 8005470:	61f8      	str	r0, [r7, #28]
        break;
 8005472:	e010      	b.n	8005496 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005474:	4b8f      	ldr	r3, [pc, #572]	; (80056b4 <UART_SetConfig+0x56c>)
 8005476:	61fb      	str	r3, [r7, #28]
        break;
 8005478:	e00d      	b.n	8005496 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800547a:	f7fd ff05 	bl	8003288 <HAL_RCC_GetSysClockFreq>
 800547e:	61f8      	str	r0, [r7, #28]
        break;
 8005480:	e009      	b.n	8005496 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005486:	61fb      	str	r3, [r7, #28]
        break;
 8005488:	e005      	b.n	8005496 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800548a:	2300      	movs	r3, #0
 800548c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005494:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 80fb 	beq.w	8005694 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	685a      	ldr	r2, [r3, #4]
 80054a2:	4613      	mov	r3, r2
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	4413      	add	r3, r2
 80054a8:	69fa      	ldr	r2, [r7, #28]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d305      	bcc.n	80054ba <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80054b4:	69fa      	ldr	r2, [r7, #28]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d903      	bls.n	80054c2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80054c0:	e0e8      	b.n	8005694 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	2200      	movs	r2, #0
 80054c6:	461c      	mov	r4, r3
 80054c8:	4615      	mov	r5, r2
 80054ca:	f04f 0200 	mov.w	r2, #0
 80054ce:	f04f 0300 	mov.w	r3, #0
 80054d2:	022b      	lsls	r3, r5, #8
 80054d4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80054d8:	0222      	lsls	r2, r4, #8
 80054da:	68f9      	ldr	r1, [r7, #12]
 80054dc:	6849      	ldr	r1, [r1, #4]
 80054de:	0849      	lsrs	r1, r1, #1
 80054e0:	2000      	movs	r0, #0
 80054e2:	4688      	mov	r8, r1
 80054e4:	4681      	mov	r9, r0
 80054e6:	eb12 0a08 	adds.w	sl, r2, r8
 80054ea:	eb43 0b09 	adc.w	fp, r3, r9
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	603b      	str	r3, [r7, #0]
 80054f6:	607a      	str	r2, [r7, #4]
 80054f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054fc:	4650      	mov	r0, sl
 80054fe:	4659      	mov	r1, fp
 8005500:	f7fa fece 	bl	80002a0 <__aeabi_uldivmod>
 8005504:	4602      	mov	r2, r0
 8005506:	460b      	mov	r3, r1
 8005508:	4613      	mov	r3, r2
 800550a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005512:	d308      	bcc.n	8005526 <UART_SetConfig+0x3de>
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800551a:	d204      	bcs.n	8005526 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	60da      	str	r2, [r3, #12]
 8005524:	e0b6      	b.n	8005694 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800552c:	e0b2      	b.n	8005694 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	69db      	ldr	r3, [r3, #28]
 8005532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005536:	d15e      	bne.n	80055f6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005538:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800553c:	2b08      	cmp	r3, #8
 800553e:	d828      	bhi.n	8005592 <UART_SetConfig+0x44a>
 8005540:	a201      	add	r2, pc, #4	; (adr r2, 8005548 <UART_SetConfig+0x400>)
 8005542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005546:	bf00      	nop
 8005548:	0800556d 	.word	0x0800556d
 800554c:	08005575 	.word	0x08005575
 8005550:	0800557d 	.word	0x0800557d
 8005554:	08005593 	.word	0x08005593
 8005558:	08005583 	.word	0x08005583
 800555c:	08005593 	.word	0x08005593
 8005560:	08005593 	.word	0x08005593
 8005564:	08005593 	.word	0x08005593
 8005568:	0800558b 	.word	0x0800558b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800556c:	f7fd ff24 	bl	80033b8 <HAL_RCC_GetPCLK1Freq>
 8005570:	61f8      	str	r0, [r7, #28]
        break;
 8005572:	e014      	b.n	800559e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005574:	f7fd ff36 	bl	80033e4 <HAL_RCC_GetPCLK2Freq>
 8005578:	61f8      	str	r0, [r7, #28]
        break;
 800557a:	e010      	b.n	800559e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800557c:	4b4d      	ldr	r3, [pc, #308]	; (80056b4 <UART_SetConfig+0x56c>)
 800557e:	61fb      	str	r3, [r7, #28]
        break;
 8005580:	e00d      	b.n	800559e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005582:	f7fd fe81 	bl	8003288 <HAL_RCC_GetSysClockFreq>
 8005586:	61f8      	str	r0, [r7, #28]
        break;
 8005588:	e009      	b.n	800559e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800558a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800558e:	61fb      	str	r3, [r7, #28]
        break;
 8005590:	e005      	b.n	800559e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005592:	2300      	movs	r3, #0
 8005594:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800559c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d077      	beq.n	8005694 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	005a      	lsls	r2, r3, #1
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	085b      	lsrs	r3, r3, #1
 80055ae:	441a      	add	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	2b0f      	cmp	r3, #15
 80055be:	d916      	bls.n	80055ee <UART_SetConfig+0x4a6>
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055c6:	d212      	bcs.n	80055ee <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	f023 030f 	bic.w	r3, r3, #15
 80055d0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	085b      	lsrs	r3, r3, #1
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	f003 0307 	and.w	r3, r3, #7
 80055dc:	b29a      	uxth	r2, r3
 80055de:	8afb      	ldrh	r3, [r7, #22]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	8afa      	ldrh	r2, [r7, #22]
 80055ea:	60da      	str	r2, [r3, #12]
 80055ec:	e052      	b.n	8005694 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80055f4:	e04e      	b.n	8005694 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055fa:	2b08      	cmp	r3, #8
 80055fc:	d827      	bhi.n	800564e <UART_SetConfig+0x506>
 80055fe:	a201      	add	r2, pc, #4	; (adr r2, 8005604 <UART_SetConfig+0x4bc>)
 8005600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005604:	08005629 	.word	0x08005629
 8005608:	08005631 	.word	0x08005631
 800560c:	08005639 	.word	0x08005639
 8005610:	0800564f 	.word	0x0800564f
 8005614:	0800563f 	.word	0x0800563f
 8005618:	0800564f 	.word	0x0800564f
 800561c:	0800564f 	.word	0x0800564f
 8005620:	0800564f 	.word	0x0800564f
 8005624:	08005647 	.word	0x08005647
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005628:	f7fd fec6 	bl	80033b8 <HAL_RCC_GetPCLK1Freq>
 800562c:	61f8      	str	r0, [r7, #28]
        break;
 800562e:	e014      	b.n	800565a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005630:	f7fd fed8 	bl	80033e4 <HAL_RCC_GetPCLK2Freq>
 8005634:	61f8      	str	r0, [r7, #28]
        break;
 8005636:	e010      	b.n	800565a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005638:	4b1e      	ldr	r3, [pc, #120]	; (80056b4 <UART_SetConfig+0x56c>)
 800563a:	61fb      	str	r3, [r7, #28]
        break;
 800563c:	e00d      	b.n	800565a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800563e:	f7fd fe23 	bl	8003288 <HAL_RCC_GetSysClockFreq>
 8005642:	61f8      	str	r0, [r7, #28]
        break;
 8005644:	e009      	b.n	800565a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800564a:	61fb      	str	r3, [r7, #28]
        break;
 800564c:	e005      	b.n	800565a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800564e:	2300      	movs	r3, #0
 8005650:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005658:	bf00      	nop
    }

    if (pclk != 0U)
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d019      	beq.n	8005694 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	085a      	lsrs	r2, r3, #1
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	441a      	add	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005672:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	2b0f      	cmp	r3, #15
 8005678:	d909      	bls.n	800568e <UART_SetConfig+0x546>
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005680:	d205      	bcs.n	800568e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	b29a      	uxth	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	60da      	str	r2, [r3, #12]
 800568c:	e002      	b.n	8005694 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80056a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3728      	adds	r7, #40	; 0x28
 80056a8:	46bd      	mov	sp, r7
 80056aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056ae:	bf00      	nop
 80056b0:	40008000 	.word	0x40008000
 80056b4:	00f42400 	.word	0x00f42400

080056b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00a      	beq.n	80056e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00a      	beq.n	8005704 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	430a      	orrs	r2, r1
 8005702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	f003 0304 	and.w	r3, r3, #4
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00a      	beq.n	8005726 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	430a      	orrs	r2, r1
 8005724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572a:	f003 0308 	and.w	r3, r3, #8
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00a      	beq.n	8005748 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	430a      	orrs	r2, r1
 8005746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574c:	f003 0310 	and.w	r3, r3, #16
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00a      	beq.n	800576a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576e:	f003 0320 	and.w	r3, r3, #32
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00a      	beq.n	800578c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005794:	2b00      	cmp	r3, #0
 8005796:	d01a      	beq.n	80057ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057b6:	d10a      	bne.n	80057ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	430a      	orrs	r2, r1
 80057ee:	605a      	str	r2, [r3, #4]
  }
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af02      	add	r7, sp, #8
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800580c:	f7fb ff32 	bl	8001674 <HAL_GetTick>
 8005810:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0308 	and.w	r3, r3, #8
 800581c:	2b08      	cmp	r3, #8
 800581e:	d10e      	bne.n	800583e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005820:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f82d 	bl	800588e <UART_WaitOnFlagUntilTimeout>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e023      	b.n	8005886 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0304 	and.w	r3, r3, #4
 8005848:	2b04      	cmp	r3, #4
 800584a:	d10e      	bne.n	800586a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800584c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f817 	bl	800588e <UART_WaitOnFlagUntilTimeout>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e00d      	b.n	8005886 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2220      	movs	r2, #32
 800586e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2220      	movs	r2, #32
 8005874:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b09c      	sub	sp, #112	; 0x70
 8005892:	af00      	add	r7, sp, #0
 8005894:	60f8      	str	r0, [r7, #12]
 8005896:	60b9      	str	r1, [r7, #8]
 8005898:	603b      	str	r3, [r7, #0]
 800589a:	4613      	mov	r3, r2
 800589c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800589e:	e0a5      	b.n	80059ec <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a6:	f000 80a1 	beq.w	80059ec <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058aa:	f7fb fee3 	bl	8001674 <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d302      	bcc.n	80058c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80058ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d13e      	bne.n	800593e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058c8:	e853 3f00 	ldrex	r3, [r3]
 80058cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80058ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058d4:	667b      	str	r3, [r7, #100]	; 0x64
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	461a      	mov	r2, r3
 80058dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80058e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80058e6:	e841 2300 	strex	r3, r2, [r1]
 80058ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80058ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1e6      	bne.n	80058c0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	3308      	adds	r3, #8
 80058f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058fc:	e853 3f00 	ldrex	r3, [r3]
 8005900:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005904:	f023 0301 	bic.w	r3, r3, #1
 8005908:	663b      	str	r3, [r7, #96]	; 0x60
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	3308      	adds	r3, #8
 8005910:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005912:	64ba      	str	r2, [r7, #72]	; 0x48
 8005914:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005916:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005918:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800591a:	e841 2300 	strex	r3, r2, [r1]
 800591e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1e5      	bne.n	80058f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2220      	movs	r2, #32
 800592a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2220      	movs	r2, #32
 8005930:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e067      	b.n	8005a0e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0304 	and.w	r3, r3, #4
 8005948:	2b00      	cmp	r3, #0
 800594a:	d04f      	beq.n	80059ec <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005956:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800595a:	d147      	bne.n	80059ec <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005964:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596e:	e853 3f00 	ldrex	r3, [r3]
 8005972:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800597a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	461a      	mov	r2, r3
 8005982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005984:	637b      	str	r3, [r7, #52]	; 0x34
 8005986:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005988:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800598a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800598c:	e841 2300 	strex	r3, r2, [r1]
 8005990:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1e6      	bne.n	8005966 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	3308      	adds	r3, #8
 800599e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	e853 3f00 	ldrex	r3, [r3]
 80059a6:	613b      	str	r3, [r7, #16]
   return(result);
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	f023 0301 	bic.w	r3, r3, #1
 80059ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	3308      	adds	r3, #8
 80059b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80059b8:	623a      	str	r2, [r7, #32]
 80059ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059bc:	69f9      	ldr	r1, [r7, #28]
 80059be:	6a3a      	ldr	r2, [r7, #32]
 80059c0:	e841 2300 	strex	r3, r2, [r1]
 80059c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1e5      	bne.n	8005998 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2220      	movs	r2, #32
 80059d0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2220      	movs	r2, #32
 80059d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2220      	movs	r2, #32
 80059dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e010      	b.n	8005a0e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	69da      	ldr	r2, [r3, #28]
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	4013      	ands	r3, r2
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	bf0c      	ite	eq
 80059fc:	2301      	moveq	r3, #1
 80059fe:	2300      	movne	r3, #0
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	461a      	mov	r2, r3
 8005a04:	79fb      	ldrb	r3, [r7, #7]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	f43f af4a 	beq.w	80058a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3770      	adds	r7, #112	; 0x70
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
	...

08005a18 <__NVIC_SetPriority>:
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	4603      	mov	r3, r0
 8005a20:	6039      	str	r1, [r7, #0]
 8005a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	db0a      	blt.n	8005a42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	b2da      	uxtb	r2, r3
 8005a30:	490c      	ldr	r1, [pc, #48]	; (8005a64 <__NVIC_SetPriority+0x4c>)
 8005a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a36:	0112      	lsls	r2, r2, #4
 8005a38:	b2d2      	uxtb	r2, r2
 8005a3a:	440b      	add	r3, r1
 8005a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005a40:	e00a      	b.n	8005a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	4908      	ldr	r1, [pc, #32]	; (8005a68 <__NVIC_SetPriority+0x50>)
 8005a48:	79fb      	ldrb	r3, [r7, #7]
 8005a4a:	f003 030f 	and.w	r3, r3, #15
 8005a4e:	3b04      	subs	r3, #4
 8005a50:	0112      	lsls	r2, r2, #4
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	440b      	add	r3, r1
 8005a56:	761a      	strb	r2, [r3, #24]
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr
 8005a64:	e000e100 	.word	0xe000e100
 8005a68:	e000ed00 	.word	0xe000ed00

08005a6c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005a70:	4b05      	ldr	r3, [pc, #20]	; (8005a88 <SysTick_Handler+0x1c>)
 8005a72:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005a74:	f001 fcfe 	bl	8007474 <xTaskGetSchedulerState>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d001      	beq.n	8005a82 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005a7e:	f002 fae3 	bl	8008048 <xPortSysTickHandler>
  }
}
 8005a82:	bf00      	nop
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	e000e010 	.word	0xe000e010

08005a8c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005a90:	2100      	movs	r1, #0
 8005a92:	f06f 0004 	mvn.w	r0, #4
 8005a96:	f7ff ffbf 	bl	8005a18 <__NVIC_SetPriority>
#endif
}
 8005a9a:	bf00      	nop
 8005a9c:	bd80      	pop	{r7, pc}
	...

08005aa0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005aa6:	f3ef 8305 	mrs	r3, IPSR
 8005aaa:	603b      	str	r3, [r7, #0]
  return(result);
 8005aac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005ab2:	f06f 0305 	mvn.w	r3, #5
 8005ab6:	607b      	str	r3, [r7, #4]
 8005ab8:	e00c      	b.n	8005ad4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005aba:	4b0a      	ldr	r3, [pc, #40]	; (8005ae4 <osKernelInitialize+0x44>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d105      	bne.n	8005ace <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005ac2:	4b08      	ldr	r3, [pc, #32]	; (8005ae4 <osKernelInitialize+0x44>)
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	607b      	str	r3, [r7, #4]
 8005acc:	e002      	b.n	8005ad4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005ace:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005ad4:	687b      	ldr	r3, [r7, #4]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	20001388 	.word	0x20001388

08005ae8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005aee:	f3ef 8305 	mrs	r3, IPSR
 8005af2:	603b      	str	r3, [r7, #0]
  return(result);
 8005af4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005afa:	f06f 0305 	mvn.w	r3, #5
 8005afe:	607b      	str	r3, [r7, #4]
 8005b00:	e010      	b.n	8005b24 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005b02:	4b0b      	ldr	r3, [pc, #44]	; (8005b30 <osKernelStart+0x48>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d109      	bne.n	8005b1e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005b0a:	f7ff ffbf 	bl	8005a8c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005b0e:	4b08      	ldr	r3, [pc, #32]	; (8005b30 <osKernelStart+0x48>)
 8005b10:	2202      	movs	r2, #2
 8005b12:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005b14:	f001 f866 	bl	8006be4 <vTaskStartScheduler>
      stat = osOK;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	607b      	str	r3, [r7, #4]
 8005b1c:	e002      	b.n	8005b24 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005b24:	687b      	ldr	r3, [r7, #4]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	20001388 	.word	0x20001388

08005b34 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b08e      	sub	sp, #56	; 0x38
 8005b38:	af04      	add	r7, sp, #16
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005b40:	2300      	movs	r3, #0
 8005b42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b44:	f3ef 8305 	mrs	r3, IPSR
 8005b48:	617b      	str	r3, [r7, #20]
  return(result);
 8005b4a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d17e      	bne.n	8005c4e <osThreadNew+0x11a>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d07b      	beq.n	8005c4e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005b56:	2380      	movs	r3, #128	; 0x80
 8005b58:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005b5a:	2318      	movs	r3, #24
 8005b5c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005b62:	f04f 33ff 	mov.w	r3, #4294967295
 8005b66:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d045      	beq.n	8005bfa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d002      	beq.n	8005b7c <osThreadNew+0x48>
        name = attr->name;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d002      	beq.n	8005b8a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d008      	beq.n	8005ba2 <osThreadNew+0x6e>
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	2b38      	cmp	r3, #56	; 0x38
 8005b94:	d805      	bhi.n	8005ba2 <osThreadNew+0x6e>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d001      	beq.n	8005ba6 <osThreadNew+0x72>
        return (NULL);
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	e054      	b.n	8005c50 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	089b      	lsrs	r3, r3, #2
 8005bb4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00e      	beq.n	8005bdc <osThreadNew+0xa8>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	2b5b      	cmp	r3, #91	; 0x5b
 8005bc4:	d90a      	bls.n	8005bdc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d006      	beq.n	8005bdc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d002      	beq.n	8005bdc <osThreadNew+0xa8>
        mem = 1;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	61bb      	str	r3, [r7, #24]
 8005bda:	e010      	b.n	8005bfe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10c      	bne.n	8005bfe <osThreadNew+0xca>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d108      	bne.n	8005bfe <osThreadNew+0xca>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d104      	bne.n	8005bfe <osThreadNew+0xca>
          mem = 0;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	61bb      	str	r3, [r7, #24]
 8005bf8:	e001      	b.n	8005bfe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d110      	bne.n	8005c26 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005c0c:	9202      	str	r2, [sp, #8]
 8005c0e:	9301      	str	r3, [sp, #4]
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	6a3a      	ldr	r2, [r7, #32]
 8005c18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 fe0c 	bl	8006838 <xTaskCreateStatic>
 8005c20:	4603      	mov	r3, r0
 8005c22:	613b      	str	r3, [r7, #16]
 8005c24:	e013      	b.n	8005c4e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d110      	bne.n	8005c4e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	f107 0310 	add.w	r3, r7, #16
 8005c34:	9301      	str	r3, [sp, #4]
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f000 fe57 	bl	80068f2 <xTaskCreate>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d001      	beq.n	8005c4e <osThreadNew+0x11a>
            hTask = NULL;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005c4e:	693b      	ldr	r3, [r7, #16]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3728      	adds	r7, #40	; 0x28
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c60:	f3ef 8305 	mrs	r3, IPSR
 8005c64:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c66:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d003      	beq.n	8005c74 <osDelay+0x1c>
    stat = osErrorISR;
 8005c6c:	f06f 0305 	mvn.w	r3, #5
 8005c70:	60fb      	str	r3, [r7, #12]
 8005c72:	e007      	b.n	8005c84 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005c74:	2300      	movs	r3, #0
 8005c76:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d002      	beq.n	8005c84 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 ff7c 	bl	8006b7c <vTaskDelay>
    }
  }

  return (stat);
 8005c84:	68fb      	ldr	r3, [r7, #12]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
	...

08005c90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	4a07      	ldr	r2, [pc, #28]	; (8005cbc <vApplicationGetIdleTaskMemory+0x2c>)
 8005ca0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	4a06      	ldr	r2, [pc, #24]	; (8005cc0 <vApplicationGetIdleTaskMemory+0x30>)
 8005ca6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2280      	movs	r2, #128	; 0x80
 8005cac:	601a      	str	r2, [r3, #0]
}
 8005cae:	bf00      	nop
 8005cb0:	3714      	adds	r7, #20
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	2000138c 	.word	0x2000138c
 8005cc0:	200013e8 	.word	0x200013e8

08005cc4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	4a07      	ldr	r2, [pc, #28]	; (8005cf0 <vApplicationGetTimerTaskMemory+0x2c>)
 8005cd4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	4a06      	ldr	r2, [pc, #24]	; (8005cf4 <vApplicationGetTimerTaskMemory+0x30>)
 8005cda:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ce2:	601a      	str	r2, [r3, #0]
}
 8005ce4:	bf00      	nop
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr
 8005cf0:	200015e8 	.word	0x200015e8
 8005cf4:	20001644 	.word	0x20001644

08005cf8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f103 0208 	add.w	r2, r3, #8
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f103 0208 	add.w	r2, r3, #8
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f103 0208 	add.w	r2, r3, #8
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d46:	bf00      	nop
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d52:	b480      	push	{r7}
 8005d54:	b085      	sub	sp, #20
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	689a      	ldr	r2, [r3, #8]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	683a      	ldr	r2, [r7, #0]
 8005d76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	1c5a      	adds	r2, r3, #1
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	601a      	str	r2, [r3, #0]
}
 8005d8e:	bf00      	nop
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b085      	sub	sp, #20
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db0:	d103      	bne.n	8005dba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	60fb      	str	r3, [r7, #12]
 8005db8:	e00c      	b.n	8005dd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	3308      	adds	r3, #8
 8005dbe:	60fb      	str	r3, [r7, #12]
 8005dc0:	e002      	b.n	8005dc8 <vListInsert+0x2e>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	60fb      	str	r3, [r7, #12]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d2f6      	bcs.n	8005dc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	683a      	ldr	r2, [r7, #0]
 8005de2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	1c5a      	adds	r2, r3, #1
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	601a      	str	r2, [r3, #0]
}
 8005e00:	bf00      	nop
 8005e02:	3714      	adds	r7, #20
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	6892      	ldr	r2, [r2, #8]
 8005e22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	6852      	ldr	r2, [r2, #4]
 8005e2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d103      	bne.n	8005e40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689a      	ldr	r2, [r3, #8]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	1e5a      	subs	r2, r3, #1
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3714      	adds	r7, #20
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10a      	bne.n	8005e8a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e78:	f383 8811 	msr	BASEPRI, r3
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005e86:	bf00      	nop
 8005e88:	e7fe      	b.n	8005e88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005e8a:	f002 f84b 	bl	8007f24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e96:	68f9      	ldr	r1, [r7, #12]
 8005e98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e9a:	fb01 f303 	mul.w	r3, r1, r3
 8005e9e:	441a      	add	r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	68f9      	ldr	r1, [r7, #12]
 8005ebe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005ec0:	fb01 f303 	mul.w	r3, r1, r3
 8005ec4:	441a      	add	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	22ff      	movs	r2, #255	; 0xff
 8005ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	22ff      	movs	r2, #255	; 0xff
 8005ed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d114      	bne.n	8005f0a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d01a      	beq.n	8005f1e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	3310      	adds	r3, #16
 8005eec:	4618      	mov	r0, r3
 8005eee:	f001 f903 	bl	80070f8 <xTaskRemoveFromEventList>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d012      	beq.n	8005f1e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ef8:	4b0c      	ldr	r3, [pc, #48]	; (8005f2c <xQueueGenericReset+0xcc>)
 8005efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005efe:	601a      	str	r2, [r3, #0]
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	f3bf 8f6f 	isb	sy
 8005f08:	e009      	b.n	8005f1e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	3310      	adds	r3, #16
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7ff fef2 	bl	8005cf8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	3324      	adds	r3, #36	; 0x24
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7ff feed 	bl	8005cf8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f1e:	f002 f831 	bl	8007f84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f22:	2301      	movs	r3, #1
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	e000ed04 	.word	0xe000ed04

08005f30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b08e      	sub	sp, #56	; 0x38
 8005f34:	af02      	add	r7, sp, #8
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
 8005f3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10a      	bne.n	8005f5a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f48:	f383 8811 	msr	BASEPRI, r3
 8005f4c:	f3bf 8f6f 	isb	sy
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f56:	bf00      	nop
 8005f58:	e7fe      	b.n	8005f58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d10a      	bne.n	8005f76 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f64:	f383 8811 	msr	BASEPRI, r3
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f72:	bf00      	nop
 8005f74:	e7fe      	b.n	8005f74 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d002      	beq.n	8005f82 <xQueueGenericCreateStatic+0x52>
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d001      	beq.n	8005f86 <xQueueGenericCreateStatic+0x56>
 8005f82:	2301      	movs	r3, #1
 8005f84:	e000      	b.n	8005f88 <xQueueGenericCreateStatic+0x58>
 8005f86:	2300      	movs	r3, #0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10a      	bne.n	8005fa2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	623b      	str	r3, [r7, #32]
}
 8005f9e:	bf00      	nop
 8005fa0:	e7fe      	b.n	8005fa0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d102      	bne.n	8005fae <xQueueGenericCreateStatic+0x7e>
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d101      	bne.n	8005fb2 <xQueueGenericCreateStatic+0x82>
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e000      	b.n	8005fb4 <xQueueGenericCreateStatic+0x84>
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10a      	bne.n	8005fce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbc:	f383 8811 	msr	BASEPRI, r3
 8005fc0:	f3bf 8f6f 	isb	sy
 8005fc4:	f3bf 8f4f 	dsb	sy
 8005fc8:	61fb      	str	r3, [r7, #28]
}
 8005fca:	bf00      	nop
 8005fcc:	e7fe      	b.n	8005fcc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005fce:	2350      	movs	r3, #80	; 0x50
 8005fd0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	2b50      	cmp	r3, #80	; 0x50
 8005fd6:	d00a      	beq.n	8005fee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fdc:	f383 8811 	msr	BASEPRI, r3
 8005fe0:	f3bf 8f6f 	isb	sy
 8005fe4:	f3bf 8f4f 	dsb	sy
 8005fe8:	61bb      	str	r3, [r7, #24]
}
 8005fea:	bf00      	nop
 8005fec:	e7fe      	b.n	8005fec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005fee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00d      	beq.n	8006016 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006002:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006008:	9300      	str	r3, [sp, #0]
 800600a:	4613      	mov	r3, r2
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	68b9      	ldr	r1, [r7, #8]
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f000 f805 	bl	8006020 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006018:	4618      	mov	r0, r3
 800601a:	3730      	adds	r7, #48	; 0x30
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
 800602c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d103      	bne.n	800603c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	69ba      	ldr	r2, [r7, #24]
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	e002      	b.n	8006042 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800604e:	2101      	movs	r1, #1
 8006050:	69b8      	ldr	r0, [r7, #24]
 8006052:	f7ff ff05 	bl	8005e60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	78fa      	ldrb	r2, [r7, #3]
 800605a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800605e:	bf00      	nop
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
	...

08006068 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b08e      	sub	sp, #56	; 0x38
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
 8006074:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006076:	2300      	movs	r3, #0
 8006078:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800607e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006080:	2b00      	cmp	r3, #0
 8006082:	d10a      	bne.n	800609a <xQueueGenericSend+0x32>
	__asm volatile
 8006084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006088:	f383 8811 	msr	BASEPRI, r3
 800608c:	f3bf 8f6f 	isb	sy
 8006090:	f3bf 8f4f 	dsb	sy
 8006094:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006096:	bf00      	nop
 8006098:	e7fe      	b.n	8006098 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d103      	bne.n	80060a8 <xQueueGenericSend+0x40>
 80060a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d101      	bne.n	80060ac <xQueueGenericSend+0x44>
 80060a8:	2301      	movs	r3, #1
 80060aa:	e000      	b.n	80060ae <xQueueGenericSend+0x46>
 80060ac:	2300      	movs	r3, #0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10a      	bne.n	80060c8 <xQueueGenericSend+0x60>
	__asm volatile
 80060b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b6:	f383 8811 	msr	BASEPRI, r3
 80060ba:	f3bf 8f6f 	isb	sy
 80060be:	f3bf 8f4f 	dsb	sy
 80060c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060c4:	bf00      	nop
 80060c6:	e7fe      	b.n	80060c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d103      	bne.n	80060d6 <xQueueGenericSend+0x6e>
 80060ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d101      	bne.n	80060da <xQueueGenericSend+0x72>
 80060d6:	2301      	movs	r3, #1
 80060d8:	e000      	b.n	80060dc <xQueueGenericSend+0x74>
 80060da:	2300      	movs	r3, #0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10a      	bne.n	80060f6 <xQueueGenericSend+0x8e>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	623b      	str	r3, [r7, #32]
}
 80060f2:	bf00      	nop
 80060f4:	e7fe      	b.n	80060f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060f6:	f001 f9bd 	bl	8007474 <xTaskGetSchedulerState>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d102      	bne.n	8006106 <xQueueGenericSend+0x9e>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <xQueueGenericSend+0xa2>
 8006106:	2301      	movs	r3, #1
 8006108:	e000      	b.n	800610c <xQueueGenericSend+0xa4>
 800610a:	2300      	movs	r3, #0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10a      	bne.n	8006126 <xQueueGenericSend+0xbe>
	__asm volatile
 8006110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006114:	f383 8811 	msr	BASEPRI, r3
 8006118:	f3bf 8f6f 	isb	sy
 800611c:	f3bf 8f4f 	dsb	sy
 8006120:	61fb      	str	r3, [r7, #28]
}
 8006122:	bf00      	nop
 8006124:	e7fe      	b.n	8006124 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006126:	f001 fefd 	bl	8007f24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800612a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800612e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006132:	429a      	cmp	r2, r3
 8006134:	d302      	bcc.n	800613c <xQueueGenericSend+0xd4>
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	2b02      	cmp	r3, #2
 800613a:	d129      	bne.n	8006190 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800613c:	683a      	ldr	r2, [r7, #0]
 800613e:	68b9      	ldr	r1, [r7, #8]
 8006140:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006142:	f000 fa0b 	bl	800655c <prvCopyDataToQueue>
 8006146:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614c:	2b00      	cmp	r3, #0
 800614e:	d010      	beq.n	8006172 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006152:	3324      	adds	r3, #36	; 0x24
 8006154:	4618      	mov	r0, r3
 8006156:	f000 ffcf 	bl	80070f8 <xTaskRemoveFromEventList>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d013      	beq.n	8006188 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006160:	4b3f      	ldr	r3, [pc, #252]	; (8006260 <xQueueGenericSend+0x1f8>)
 8006162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006166:	601a      	str	r2, [r3, #0]
 8006168:	f3bf 8f4f 	dsb	sy
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	e00a      	b.n	8006188 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006174:	2b00      	cmp	r3, #0
 8006176:	d007      	beq.n	8006188 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006178:	4b39      	ldr	r3, [pc, #228]	; (8006260 <xQueueGenericSend+0x1f8>)
 800617a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800617e:	601a      	str	r2, [r3, #0]
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006188:	f001 fefc 	bl	8007f84 <vPortExitCritical>
				return pdPASS;
 800618c:	2301      	movs	r3, #1
 800618e:	e063      	b.n	8006258 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d103      	bne.n	800619e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006196:	f001 fef5 	bl	8007f84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800619a:	2300      	movs	r3, #0
 800619c:	e05c      	b.n	8006258 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800619e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d106      	bne.n	80061b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061a4:	f107 0314 	add.w	r3, r7, #20
 80061a8:	4618      	mov	r0, r3
 80061aa:	f001 f809 	bl	80071c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061ae:	2301      	movs	r3, #1
 80061b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061b2:	f001 fee7 	bl	8007f84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061b6:	f000 fd7b 	bl	8006cb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061ba:	f001 feb3 	bl	8007f24 <vPortEnterCritical>
 80061be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061c4:	b25b      	sxtb	r3, r3
 80061c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ca:	d103      	bne.n	80061d4 <xQueueGenericSend+0x16c>
 80061cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061da:	b25b      	sxtb	r3, r3
 80061dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e0:	d103      	bne.n	80061ea <xQueueGenericSend+0x182>
 80061e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061ea:	f001 fecb 	bl	8007f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061ee:	1d3a      	adds	r2, r7, #4
 80061f0:	f107 0314 	add.w	r3, r7, #20
 80061f4:	4611      	mov	r1, r2
 80061f6:	4618      	mov	r0, r3
 80061f8:	f000 fff8 	bl	80071ec <xTaskCheckForTimeOut>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d124      	bne.n	800624c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006202:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006204:	f000 faa2 	bl	800674c <prvIsQueueFull>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d018      	beq.n	8006240 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800620e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006210:	3310      	adds	r3, #16
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	4611      	mov	r1, r2
 8006216:	4618      	mov	r0, r3
 8006218:	f000 ff1e 	bl	8007058 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800621c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800621e:	f000 fa2d 	bl	800667c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006222:	f000 fd53 	bl	8006ccc <xTaskResumeAll>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	f47f af7c 	bne.w	8006126 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800622e:	4b0c      	ldr	r3, [pc, #48]	; (8006260 <xQueueGenericSend+0x1f8>)
 8006230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006234:	601a      	str	r2, [r3, #0]
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	e772      	b.n	8006126 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006240:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006242:	f000 fa1b 	bl	800667c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006246:	f000 fd41 	bl	8006ccc <xTaskResumeAll>
 800624a:	e76c      	b.n	8006126 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800624c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800624e:	f000 fa15 	bl	800667c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006252:	f000 fd3b 	bl	8006ccc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006256:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006258:	4618      	mov	r0, r3
 800625a:	3738      	adds	r7, #56	; 0x38
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	e000ed04 	.word	0xe000ed04

08006264 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b090      	sub	sp, #64	; 0x40
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
 8006270:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10a      	bne.n	8006292 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800627c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006280:	f383 8811 	msr	BASEPRI, r3
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800628e:	bf00      	nop
 8006290:	e7fe      	b.n	8006290 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d103      	bne.n	80062a0 <xQueueGenericSendFromISR+0x3c>
 8006298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629c:	2b00      	cmp	r3, #0
 800629e:	d101      	bne.n	80062a4 <xQueueGenericSendFromISR+0x40>
 80062a0:	2301      	movs	r3, #1
 80062a2:	e000      	b.n	80062a6 <xQueueGenericSendFromISR+0x42>
 80062a4:	2300      	movs	r3, #0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10a      	bne.n	80062c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80062aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ae:	f383 8811 	msr	BASEPRI, r3
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	f3bf 8f4f 	dsb	sy
 80062ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80062bc:	bf00      	nop
 80062be:	e7fe      	b.n	80062be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d103      	bne.n	80062ce <xQueueGenericSendFromISR+0x6a>
 80062c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d101      	bne.n	80062d2 <xQueueGenericSendFromISR+0x6e>
 80062ce:	2301      	movs	r3, #1
 80062d0:	e000      	b.n	80062d4 <xQueueGenericSendFromISR+0x70>
 80062d2:	2300      	movs	r3, #0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d10a      	bne.n	80062ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80062d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062dc:	f383 8811 	msr	BASEPRI, r3
 80062e0:	f3bf 8f6f 	isb	sy
 80062e4:	f3bf 8f4f 	dsb	sy
 80062e8:	623b      	str	r3, [r7, #32]
}
 80062ea:	bf00      	nop
 80062ec:	e7fe      	b.n	80062ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062ee:	f001 fefb 	bl	80080e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80062f2:	f3ef 8211 	mrs	r2, BASEPRI
 80062f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fa:	f383 8811 	msr	BASEPRI, r3
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	f3bf 8f4f 	dsb	sy
 8006306:	61fa      	str	r2, [r7, #28]
 8006308:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800630a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800630c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800630e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006316:	429a      	cmp	r2, r3
 8006318:	d302      	bcc.n	8006320 <xQueueGenericSendFromISR+0xbc>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b02      	cmp	r3, #2
 800631e:	d12f      	bne.n	8006380 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006322:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800632a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	68b9      	ldr	r1, [r7, #8]
 8006334:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006336:	f000 f911 	bl	800655c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800633a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800633e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006342:	d112      	bne.n	800636a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006348:	2b00      	cmp	r3, #0
 800634a:	d016      	beq.n	800637a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800634c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634e:	3324      	adds	r3, #36	; 0x24
 8006350:	4618      	mov	r0, r3
 8006352:	f000 fed1 	bl	80070f8 <xTaskRemoveFromEventList>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00e      	beq.n	800637a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00b      	beq.n	800637a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	601a      	str	r2, [r3, #0]
 8006368:	e007      	b.n	800637a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800636a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800636e:	3301      	adds	r3, #1
 8006370:	b2db      	uxtb	r3, r3
 8006372:	b25a      	sxtb	r2, r3
 8006374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800637a:	2301      	movs	r3, #1
 800637c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800637e:	e001      	b.n	8006384 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006380:	2300      	movs	r3, #0
 8006382:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006386:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800638e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006392:	4618      	mov	r0, r3
 8006394:	3740      	adds	r7, #64	; 0x40
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
	...

0800639c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b08c      	sub	sp, #48	; 0x30
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80063a8:	2300      	movs	r3, #0
 80063aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80063b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10a      	bne.n	80063cc <xQueueReceive+0x30>
	__asm volatile
 80063b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ba:	f383 8811 	msr	BASEPRI, r3
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f3bf 8f4f 	dsb	sy
 80063c6:	623b      	str	r3, [r7, #32]
}
 80063c8:	bf00      	nop
 80063ca:	e7fe      	b.n	80063ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d103      	bne.n	80063da <xQueueReceive+0x3e>
 80063d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <xQueueReceive+0x42>
 80063da:	2301      	movs	r3, #1
 80063dc:	e000      	b.n	80063e0 <xQueueReceive+0x44>
 80063de:	2300      	movs	r3, #0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10a      	bne.n	80063fa <xQueueReceive+0x5e>
	__asm volatile
 80063e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e8:	f383 8811 	msr	BASEPRI, r3
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	61fb      	str	r3, [r7, #28]
}
 80063f6:	bf00      	nop
 80063f8:	e7fe      	b.n	80063f8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063fa:	f001 f83b 	bl	8007474 <xTaskGetSchedulerState>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d102      	bne.n	800640a <xQueueReceive+0x6e>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d101      	bne.n	800640e <xQueueReceive+0x72>
 800640a:	2301      	movs	r3, #1
 800640c:	e000      	b.n	8006410 <xQueueReceive+0x74>
 800640e:	2300      	movs	r3, #0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10a      	bne.n	800642a <xQueueReceive+0x8e>
	__asm volatile
 8006414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	61bb      	str	r3, [r7, #24]
}
 8006426:	bf00      	nop
 8006428:	e7fe      	b.n	8006428 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800642a:	f001 fd7b 	bl	8007f24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800642e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006432:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006436:	2b00      	cmp	r3, #0
 8006438:	d01f      	beq.n	800647a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800643a:	68b9      	ldr	r1, [r7, #8]
 800643c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800643e:	f000 f8f7 	bl	8006630 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006444:	1e5a      	subs	r2, r3, #1
 8006446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006448:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800644a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00f      	beq.n	8006472 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006454:	3310      	adds	r3, #16
 8006456:	4618      	mov	r0, r3
 8006458:	f000 fe4e 	bl	80070f8 <xTaskRemoveFromEventList>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d007      	beq.n	8006472 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006462:	4b3d      	ldr	r3, [pc, #244]	; (8006558 <xQueueReceive+0x1bc>)
 8006464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006468:	601a      	str	r2, [r3, #0]
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006472:	f001 fd87 	bl	8007f84 <vPortExitCritical>
				return pdPASS;
 8006476:	2301      	movs	r3, #1
 8006478:	e069      	b.n	800654e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d103      	bne.n	8006488 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006480:	f001 fd80 	bl	8007f84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006484:	2300      	movs	r3, #0
 8006486:	e062      	b.n	800654e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648a:	2b00      	cmp	r3, #0
 800648c:	d106      	bne.n	800649c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800648e:	f107 0310 	add.w	r3, r7, #16
 8006492:	4618      	mov	r0, r3
 8006494:	f000 fe94 	bl	80071c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006498:	2301      	movs	r3, #1
 800649a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800649c:	f001 fd72 	bl	8007f84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064a0:	f000 fc06 	bl	8006cb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064a4:	f001 fd3e 	bl	8007f24 <vPortEnterCritical>
 80064a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064ae:	b25b      	sxtb	r3, r3
 80064b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b4:	d103      	bne.n	80064be <xQueueReceive+0x122>
 80064b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064c4:	b25b      	sxtb	r3, r3
 80064c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ca:	d103      	bne.n	80064d4 <xQueueReceive+0x138>
 80064cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064d4:	f001 fd56 	bl	8007f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064d8:	1d3a      	adds	r2, r7, #4
 80064da:	f107 0310 	add.w	r3, r7, #16
 80064de:	4611      	mov	r1, r2
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 fe83 	bl	80071ec <xTaskCheckForTimeOut>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d123      	bne.n	8006534 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064ee:	f000 f917 	bl	8006720 <prvIsQueueEmpty>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d017      	beq.n	8006528 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80064f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fa:	3324      	adds	r3, #36	; 0x24
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	4611      	mov	r1, r2
 8006500:	4618      	mov	r0, r3
 8006502:	f000 fda9 	bl	8007058 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006506:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006508:	f000 f8b8 	bl	800667c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800650c:	f000 fbde 	bl	8006ccc <xTaskResumeAll>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d189      	bne.n	800642a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006516:	4b10      	ldr	r3, [pc, #64]	; (8006558 <xQueueReceive+0x1bc>)
 8006518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800651c:	601a      	str	r2, [r3, #0]
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	e780      	b.n	800642a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800652a:	f000 f8a7 	bl	800667c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800652e:	f000 fbcd 	bl	8006ccc <xTaskResumeAll>
 8006532:	e77a      	b.n	800642a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006534:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006536:	f000 f8a1 	bl	800667c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800653a:	f000 fbc7 	bl	8006ccc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800653e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006540:	f000 f8ee 	bl	8006720 <prvIsQueueEmpty>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	f43f af6f 	beq.w	800642a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800654c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800654e:	4618      	mov	r0, r3
 8006550:	3730      	adds	r7, #48	; 0x30
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	e000ed04 	.word	0xe000ed04

0800655c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006568:	2300      	movs	r3, #0
 800656a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006570:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006576:	2b00      	cmp	r3, #0
 8006578:	d10d      	bne.n	8006596 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d14d      	bne.n	800661e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	4618      	mov	r0, r3
 8006588:	f000 ff92 	bl	80074b0 <xTaskPriorityDisinherit>
 800658c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	609a      	str	r2, [r3, #8]
 8006594:	e043      	b.n	800661e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d119      	bne.n	80065d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6858      	ldr	r0, [r3, #4]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a4:	461a      	mov	r2, r3
 80065a6:	68b9      	ldr	r1, [r7, #8]
 80065a8:	f001 fff6 	bl	8008598 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b4:	441a      	add	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	685a      	ldr	r2, [r3, #4]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d32b      	bcc.n	800661e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	605a      	str	r2, [r3, #4]
 80065ce:	e026      	b.n	800661e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	68d8      	ldr	r0, [r3, #12]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d8:	461a      	mov	r2, r3
 80065da:	68b9      	ldr	r1, [r7, #8]
 80065dc:	f001 ffdc 	bl	8008598 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	68da      	ldr	r2, [r3, #12]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e8:	425b      	negs	r3, r3
 80065ea:	441a      	add	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	68da      	ldr	r2, [r3, #12]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d207      	bcs.n	800660c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	689a      	ldr	r2, [r3, #8]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006604:	425b      	negs	r3, r3
 8006606:	441a      	add	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b02      	cmp	r3, #2
 8006610:	d105      	bne.n	800661e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d002      	beq.n	800661e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	3b01      	subs	r3, #1
 800661c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	1c5a      	adds	r2, r3, #1
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006626:	697b      	ldr	r3, [r7, #20]
}
 8006628:	4618      	mov	r0, r3
 800662a:	3718      	adds	r7, #24
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663e:	2b00      	cmp	r3, #0
 8006640:	d018      	beq.n	8006674 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	68da      	ldr	r2, [r3, #12]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664a:	441a      	add	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68da      	ldr	r2, [r3, #12]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	429a      	cmp	r2, r3
 800665a:	d303      	bcc.n	8006664 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	68d9      	ldr	r1, [r3, #12]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666c:	461a      	mov	r2, r3
 800666e:	6838      	ldr	r0, [r7, #0]
 8006670:	f001 ff92 	bl	8008598 <memcpy>
	}
}
 8006674:	bf00      	nop
 8006676:	3708      	adds	r7, #8
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006684:	f001 fc4e 	bl	8007f24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800668e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006690:	e011      	b.n	80066b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006696:	2b00      	cmp	r3, #0
 8006698:	d012      	beq.n	80066c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	3324      	adds	r3, #36	; 0x24
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 fd2a 	bl	80070f8 <xTaskRemoveFromEventList>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d001      	beq.n	80066ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80066aa:	f000 fe01 	bl	80072b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80066ae:	7bfb      	ldrb	r3, [r7, #15]
 80066b0:	3b01      	subs	r3, #1
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	dce9      	bgt.n	8006692 <prvUnlockQueue+0x16>
 80066be:	e000      	b.n	80066c2 <prvUnlockQueue+0x46>
					break;
 80066c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	22ff      	movs	r2, #255	; 0xff
 80066c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80066ca:	f001 fc5b 	bl	8007f84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80066ce:	f001 fc29 	bl	8007f24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80066da:	e011      	b.n	8006700 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d012      	beq.n	800670a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	3310      	adds	r3, #16
 80066e8:	4618      	mov	r0, r3
 80066ea:	f000 fd05 	bl	80070f8 <xTaskRemoveFromEventList>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d001      	beq.n	80066f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80066f4:	f000 fddc 	bl	80072b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80066f8:	7bbb      	ldrb	r3, [r7, #14]
 80066fa:	3b01      	subs	r3, #1
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006700:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006704:	2b00      	cmp	r3, #0
 8006706:	dce9      	bgt.n	80066dc <prvUnlockQueue+0x60>
 8006708:	e000      	b.n	800670c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800670a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	22ff      	movs	r2, #255	; 0xff
 8006710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006714:	f001 fc36 	bl	8007f84 <vPortExitCritical>
}
 8006718:	bf00      	nop
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006728:	f001 fbfc 	bl	8007f24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006730:	2b00      	cmp	r3, #0
 8006732:	d102      	bne.n	800673a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006734:	2301      	movs	r3, #1
 8006736:	60fb      	str	r3, [r7, #12]
 8006738:	e001      	b.n	800673e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800673a:	2300      	movs	r3, #0
 800673c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800673e:	f001 fc21 	bl	8007f84 <vPortExitCritical>

	return xReturn;
 8006742:	68fb      	ldr	r3, [r7, #12]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006754:	f001 fbe6 	bl	8007f24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006760:	429a      	cmp	r2, r3
 8006762:	d102      	bne.n	800676a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006764:	2301      	movs	r3, #1
 8006766:	60fb      	str	r3, [r7, #12]
 8006768:	e001      	b.n	800676e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800676a:	2300      	movs	r3, #0
 800676c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800676e:	f001 fc09 	bl	8007f84 <vPortExitCritical>

	return xReturn;
 8006772:	68fb      	ldr	r3, [r7, #12]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006786:	2300      	movs	r3, #0
 8006788:	60fb      	str	r3, [r7, #12]
 800678a:	e014      	b.n	80067b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800678c:	4a0f      	ldr	r2, [pc, #60]	; (80067cc <vQueueAddToRegistry+0x50>)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10b      	bne.n	80067b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006798:	490c      	ldr	r1, [pc, #48]	; (80067cc <vQueueAddToRegistry+0x50>)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	683a      	ldr	r2, [r7, #0]
 800679e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80067a2:	4a0a      	ldr	r2, [pc, #40]	; (80067cc <vQueueAddToRegistry+0x50>)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	00db      	lsls	r3, r3, #3
 80067a8:	4413      	add	r3, r2
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80067ae:	e006      	b.n	80067be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	3301      	adds	r3, #1
 80067b4:	60fb      	str	r3, [r7, #12]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2b07      	cmp	r3, #7
 80067ba:	d9e7      	bls.n	800678c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80067bc:	bf00      	nop
 80067be:	bf00      	nop
 80067c0:	3714      	adds	r7, #20
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	20001a44 	.word	0x20001a44

080067d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80067e0:	f001 fba0 	bl	8007f24 <vPortEnterCritical>
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067ea:	b25b      	sxtb	r3, r3
 80067ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f0:	d103      	bne.n	80067fa <vQueueWaitForMessageRestricted+0x2a>
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006800:	b25b      	sxtb	r3, r3
 8006802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006806:	d103      	bne.n	8006810 <vQueueWaitForMessageRestricted+0x40>
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006810:	f001 fbb8 	bl	8007f84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006818:	2b00      	cmp	r3, #0
 800681a:	d106      	bne.n	800682a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	3324      	adds	r3, #36	; 0x24
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	68b9      	ldr	r1, [r7, #8]
 8006824:	4618      	mov	r0, r3
 8006826:	f000 fc3b 	bl	80070a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800682a:	6978      	ldr	r0, [r7, #20]
 800682c:	f7ff ff26 	bl	800667c <prvUnlockQueue>
	}
 8006830:	bf00      	nop
 8006832:	3718      	adds	r7, #24
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006838:	b580      	push	{r7, lr}
 800683a:	b08e      	sub	sp, #56	; 0x38
 800683c:	af04      	add	r7, sp, #16
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	607a      	str	r2, [r7, #4]
 8006844:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006848:	2b00      	cmp	r3, #0
 800684a:	d10a      	bne.n	8006862 <xTaskCreateStatic+0x2a>
	__asm volatile
 800684c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006850:	f383 8811 	msr	BASEPRI, r3
 8006854:	f3bf 8f6f 	isb	sy
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	623b      	str	r3, [r7, #32]
}
 800685e:	bf00      	nop
 8006860:	e7fe      	b.n	8006860 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10a      	bne.n	800687e <xTaskCreateStatic+0x46>
	__asm volatile
 8006868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686c:	f383 8811 	msr	BASEPRI, r3
 8006870:	f3bf 8f6f 	isb	sy
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	61fb      	str	r3, [r7, #28]
}
 800687a:	bf00      	nop
 800687c:	e7fe      	b.n	800687c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800687e:	235c      	movs	r3, #92	; 0x5c
 8006880:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	2b5c      	cmp	r3, #92	; 0x5c
 8006886:	d00a      	beq.n	800689e <xTaskCreateStatic+0x66>
	__asm volatile
 8006888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688c:	f383 8811 	msr	BASEPRI, r3
 8006890:	f3bf 8f6f 	isb	sy
 8006894:	f3bf 8f4f 	dsb	sy
 8006898:	61bb      	str	r3, [r7, #24]
}
 800689a:	bf00      	nop
 800689c:	e7fe      	b.n	800689c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800689e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80068a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d01e      	beq.n	80068e4 <xTaskCreateStatic+0xac>
 80068a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d01b      	beq.n	80068e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80068ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80068b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b8:	2202      	movs	r2, #2
 80068ba:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80068be:	2300      	movs	r3, #0
 80068c0:	9303      	str	r3, [sp, #12]
 80068c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c4:	9302      	str	r3, [sp, #8]
 80068c6:	f107 0314 	add.w	r3, r7, #20
 80068ca:	9301      	str	r3, [sp, #4]
 80068cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ce:	9300      	str	r3, [sp, #0]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	68b9      	ldr	r1, [r7, #8]
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f000 f850 	bl	800697c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068de:	f000 f8dd 	bl	8006a9c <prvAddNewTaskToReadyList>
 80068e2:	e001      	b.n	80068e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80068e4:	2300      	movs	r3, #0
 80068e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80068e8:	697b      	ldr	r3, [r7, #20]
	}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3728      	adds	r7, #40	; 0x28
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b08c      	sub	sp, #48	; 0x30
 80068f6:	af04      	add	r7, sp, #16
 80068f8:	60f8      	str	r0, [r7, #12]
 80068fa:	60b9      	str	r1, [r7, #8]
 80068fc:	603b      	str	r3, [r7, #0]
 80068fe:	4613      	mov	r3, r2
 8006900:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006902:	88fb      	ldrh	r3, [r7, #6]
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	4618      	mov	r0, r3
 8006908:	f001 fc2e 	bl	8008168 <pvPortMalloc>
 800690c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00e      	beq.n	8006932 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006914:	205c      	movs	r0, #92	; 0x5c
 8006916:	f001 fc27 	bl	8008168 <pvPortMalloc>
 800691a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d003      	beq.n	800692a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	697a      	ldr	r2, [r7, #20]
 8006926:	631a      	str	r2, [r3, #48]	; 0x30
 8006928:	e005      	b.n	8006936 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800692a:	6978      	ldr	r0, [r7, #20]
 800692c:	f001 fce8 	bl	8008300 <vPortFree>
 8006930:	e001      	b.n	8006936 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006932:	2300      	movs	r3, #0
 8006934:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d017      	beq.n	800696c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006944:	88fa      	ldrh	r2, [r7, #6]
 8006946:	2300      	movs	r3, #0
 8006948:	9303      	str	r3, [sp, #12]
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	9302      	str	r3, [sp, #8]
 800694e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006950:	9301      	str	r3, [sp, #4]
 8006952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	68b9      	ldr	r1, [r7, #8]
 800695a:	68f8      	ldr	r0, [r7, #12]
 800695c:	f000 f80e 	bl	800697c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006960:	69f8      	ldr	r0, [r7, #28]
 8006962:	f000 f89b 	bl	8006a9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006966:	2301      	movs	r3, #1
 8006968:	61bb      	str	r3, [r7, #24]
 800696a:	e002      	b.n	8006972 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800696c:	f04f 33ff 	mov.w	r3, #4294967295
 8006970:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006972:	69bb      	ldr	r3, [r7, #24]
	}
 8006974:	4618      	mov	r0, r3
 8006976:	3720      	adds	r7, #32
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b088      	sub	sp, #32
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
 8006988:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800698a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	461a      	mov	r2, r3
 8006994:	21a5      	movs	r1, #165	; 0xa5
 8006996:	f001 fe0d 	bl	80085b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800699a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80069a4:	3b01      	subs	r3, #1
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	4413      	add	r3, r2
 80069aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	f023 0307 	bic.w	r3, r3, #7
 80069b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	f003 0307 	and.w	r3, r3, #7
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00a      	beq.n	80069d4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80069be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	617b      	str	r3, [r7, #20]
}
 80069d0:	bf00      	nop
 80069d2:	e7fe      	b.n	80069d2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d01f      	beq.n	8006a1a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069da:	2300      	movs	r3, #0
 80069dc:	61fb      	str	r3, [r7, #28]
 80069de:	e012      	b.n	8006a06 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	4413      	add	r3, r2
 80069e6:	7819      	ldrb	r1, [r3, #0]
 80069e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	4413      	add	r3, r2
 80069ee:	3334      	adds	r3, #52	; 0x34
 80069f0:	460a      	mov	r2, r1
 80069f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80069f4:	68ba      	ldr	r2, [r7, #8]
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	4413      	add	r3, r2
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d006      	beq.n	8006a0e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	3301      	adds	r3, #1
 8006a04:	61fb      	str	r3, [r7, #28]
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	2b0f      	cmp	r3, #15
 8006a0a:	d9e9      	bls.n	80069e0 <prvInitialiseNewTask+0x64>
 8006a0c:	e000      	b.n	8006a10 <prvInitialiseNewTask+0x94>
			{
				break;
 8006a0e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a18:	e003      	b.n	8006a22 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a24:	2b37      	cmp	r3, #55	; 0x37
 8006a26:	d901      	bls.n	8006a2c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006a28:	2337      	movs	r3, #55	; 0x37
 8006a2a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a30:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a36:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a40:	3304      	adds	r3, #4
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7ff f978 	bl	8005d38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4a:	3318      	adds	r3, #24
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7ff f973 	bl	8005d38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a56:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a60:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a66:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a76:	683a      	ldr	r2, [r7, #0]
 8006a78:	68f9      	ldr	r1, [r7, #12]
 8006a7a:	69b8      	ldr	r0, [r7, #24]
 8006a7c:	f001 f928 	bl	8007cd0 <pxPortInitialiseStack>
 8006a80:	4602      	mov	r2, r0
 8006a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a84:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d002      	beq.n	8006a92 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a92:	bf00      	nop
 8006a94:	3720      	adds	r7, #32
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
	...

08006a9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006aa4:	f001 fa3e 	bl	8007f24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006aa8:	4b2d      	ldr	r3, [pc, #180]	; (8006b60 <prvAddNewTaskToReadyList+0xc4>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3301      	adds	r3, #1
 8006aae:	4a2c      	ldr	r2, [pc, #176]	; (8006b60 <prvAddNewTaskToReadyList+0xc4>)
 8006ab0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006ab2:	4b2c      	ldr	r3, [pc, #176]	; (8006b64 <prvAddNewTaskToReadyList+0xc8>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d109      	bne.n	8006ace <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006aba:	4a2a      	ldr	r2, [pc, #168]	; (8006b64 <prvAddNewTaskToReadyList+0xc8>)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006ac0:	4b27      	ldr	r3, [pc, #156]	; (8006b60 <prvAddNewTaskToReadyList+0xc4>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d110      	bne.n	8006aea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006ac8:	f000 fc16 	bl	80072f8 <prvInitialiseTaskLists>
 8006acc:	e00d      	b.n	8006aea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006ace:	4b26      	ldr	r3, [pc, #152]	; (8006b68 <prvAddNewTaskToReadyList+0xcc>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d109      	bne.n	8006aea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006ad6:	4b23      	ldr	r3, [pc, #140]	; (8006b64 <prvAddNewTaskToReadyList+0xc8>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d802      	bhi.n	8006aea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006ae4:	4a1f      	ldr	r2, [pc, #124]	; (8006b64 <prvAddNewTaskToReadyList+0xc8>)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006aea:	4b20      	ldr	r3, [pc, #128]	; (8006b6c <prvAddNewTaskToReadyList+0xd0>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	3301      	adds	r3, #1
 8006af0:	4a1e      	ldr	r2, [pc, #120]	; (8006b6c <prvAddNewTaskToReadyList+0xd0>)
 8006af2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006af4:	4b1d      	ldr	r3, [pc, #116]	; (8006b6c <prvAddNewTaskToReadyList+0xd0>)
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b00:	4b1b      	ldr	r3, [pc, #108]	; (8006b70 <prvAddNewTaskToReadyList+0xd4>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d903      	bls.n	8006b10 <prvAddNewTaskToReadyList+0x74>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0c:	4a18      	ldr	r2, [pc, #96]	; (8006b70 <prvAddNewTaskToReadyList+0xd4>)
 8006b0e:	6013      	str	r3, [r2, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b14:	4613      	mov	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4a15      	ldr	r2, [pc, #84]	; (8006b74 <prvAddNewTaskToReadyList+0xd8>)
 8006b1e:	441a      	add	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	3304      	adds	r3, #4
 8006b24:	4619      	mov	r1, r3
 8006b26:	4610      	mov	r0, r2
 8006b28:	f7ff f913 	bl	8005d52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006b2c:	f001 fa2a 	bl	8007f84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006b30:	4b0d      	ldr	r3, [pc, #52]	; (8006b68 <prvAddNewTaskToReadyList+0xcc>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00e      	beq.n	8006b56 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006b38:	4b0a      	ldr	r3, [pc, #40]	; (8006b64 <prvAddNewTaskToReadyList+0xc8>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d207      	bcs.n	8006b56 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006b46:	4b0c      	ldr	r3, [pc, #48]	; (8006b78 <prvAddNewTaskToReadyList+0xdc>)
 8006b48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b4c:	601a      	str	r2, [r3, #0]
 8006b4e:	f3bf 8f4f 	dsb	sy
 8006b52:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b56:	bf00      	nop
 8006b58:	3708      	adds	r7, #8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	20001f58 	.word	0x20001f58
 8006b64:	20001a84 	.word	0x20001a84
 8006b68:	20001f64 	.word	0x20001f64
 8006b6c:	20001f74 	.word	0x20001f74
 8006b70:	20001f60 	.word	0x20001f60
 8006b74:	20001a88 	.word	0x20001a88
 8006b78:	e000ed04 	.word	0xe000ed04

08006b7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b84:	2300      	movs	r3, #0
 8006b86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d017      	beq.n	8006bbe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b8e:	4b13      	ldr	r3, [pc, #76]	; (8006bdc <vTaskDelay+0x60>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00a      	beq.n	8006bac <vTaskDelay+0x30>
	__asm volatile
 8006b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9a:	f383 8811 	msr	BASEPRI, r3
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	60bb      	str	r3, [r7, #8]
}
 8006ba8:	bf00      	nop
 8006baa:	e7fe      	b.n	8006baa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006bac:	f000 f880 	bl	8006cb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fcea 	bl	800758c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006bb8:	f000 f888 	bl	8006ccc <xTaskResumeAll>
 8006bbc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d107      	bne.n	8006bd4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006bc4:	4b06      	ldr	r3, [pc, #24]	; (8006be0 <vTaskDelay+0x64>)
 8006bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bca:	601a      	str	r2, [r3, #0]
 8006bcc:	f3bf 8f4f 	dsb	sy
 8006bd0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006bd4:	bf00      	nop
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	20001f80 	.word	0x20001f80
 8006be0:	e000ed04 	.word	0xe000ed04

08006be4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b08a      	sub	sp, #40	; 0x28
 8006be8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006bea:	2300      	movs	r3, #0
 8006bec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006bf2:	463a      	mov	r2, r7
 8006bf4:	1d39      	adds	r1, r7, #4
 8006bf6:	f107 0308 	add.w	r3, r7, #8
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7ff f848 	bl	8005c90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006c00:	6839      	ldr	r1, [r7, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68ba      	ldr	r2, [r7, #8]
 8006c06:	9202      	str	r2, [sp, #8]
 8006c08:	9301      	str	r3, [sp, #4]
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	9300      	str	r3, [sp, #0]
 8006c0e:	2300      	movs	r3, #0
 8006c10:	460a      	mov	r2, r1
 8006c12:	4921      	ldr	r1, [pc, #132]	; (8006c98 <vTaskStartScheduler+0xb4>)
 8006c14:	4821      	ldr	r0, [pc, #132]	; (8006c9c <vTaskStartScheduler+0xb8>)
 8006c16:	f7ff fe0f 	bl	8006838 <xTaskCreateStatic>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	4a20      	ldr	r2, [pc, #128]	; (8006ca0 <vTaskStartScheduler+0xbc>)
 8006c1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006c20:	4b1f      	ldr	r3, [pc, #124]	; (8006ca0 <vTaskStartScheduler+0xbc>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d002      	beq.n	8006c2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	617b      	str	r3, [r7, #20]
 8006c2c:	e001      	b.n	8006c32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d102      	bne.n	8006c3e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006c38:	f000 fcfc 	bl	8007634 <xTimerCreateTimerTask>
 8006c3c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d116      	bne.n	8006c72 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c48:	f383 8811 	msr	BASEPRI, r3
 8006c4c:	f3bf 8f6f 	isb	sy
 8006c50:	f3bf 8f4f 	dsb	sy
 8006c54:	613b      	str	r3, [r7, #16]
}
 8006c56:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c58:	4b12      	ldr	r3, [pc, #72]	; (8006ca4 <vTaskStartScheduler+0xc0>)
 8006c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c5e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c60:	4b11      	ldr	r3, [pc, #68]	; (8006ca8 <vTaskStartScheduler+0xc4>)
 8006c62:	2201      	movs	r2, #1
 8006c64:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006c66:	4b11      	ldr	r3, [pc, #68]	; (8006cac <vTaskStartScheduler+0xc8>)
 8006c68:	2200      	movs	r2, #0
 8006c6a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c6c:	f001 f8b8 	bl	8007de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c70:	e00e      	b.n	8006c90 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c78:	d10a      	bne.n	8006c90 <vTaskStartScheduler+0xac>
	__asm volatile
 8006c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7e:	f383 8811 	msr	BASEPRI, r3
 8006c82:	f3bf 8f6f 	isb	sy
 8006c86:	f3bf 8f4f 	dsb	sy
 8006c8a:	60fb      	str	r3, [r7, #12]
}
 8006c8c:	bf00      	nop
 8006c8e:	e7fe      	b.n	8006c8e <vTaskStartScheduler+0xaa>
}
 8006c90:	bf00      	nop
 8006c92:	3718      	adds	r7, #24
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	0800a380 	.word	0x0800a380
 8006c9c:	080072c9 	.word	0x080072c9
 8006ca0:	20001f7c 	.word	0x20001f7c
 8006ca4:	20001f78 	.word	0x20001f78
 8006ca8:	20001f64 	.word	0x20001f64
 8006cac:	20001f5c 	.word	0x20001f5c

08006cb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006cb4:	4b04      	ldr	r3, [pc, #16]	; (8006cc8 <vTaskSuspendAll+0x18>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	4a03      	ldr	r2, [pc, #12]	; (8006cc8 <vTaskSuspendAll+0x18>)
 8006cbc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006cbe:	bf00      	nop
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	20001f80 	.word	0x20001f80

08006ccc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006cda:	4b42      	ldr	r3, [pc, #264]	; (8006de4 <xTaskResumeAll+0x118>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10a      	bne.n	8006cf8 <xTaskResumeAll+0x2c>
	__asm volatile
 8006ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	603b      	str	r3, [r7, #0]
}
 8006cf4:	bf00      	nop
 8006cf6:	e7fe      	b.n	8006cf6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006cf8:	f001 f914 	bl	8007f24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006cfc:	4b39      	ldr	r3, [pc, #228]	; (8006de4 <xTaskResumeAll+0x118>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	3b01      	subs	r3, #1
 8006d02:	4a38      	ldr	r2, [pc, #224]	; (8006de4 <xTaskResumeAll+0x118>)
 8006d04:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d06:	4b37      	ldr	r3, [pc, #220]	; (8006de4 <xTaskResumeAll+0x118>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d162      	bne.n	8006dd4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d0e:	4b36      	ldr	r3, [pc, #216]	; (8006de8 <xTaskResumeAll+0x11c>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d05e      	beq.n	8006dd4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d16:	e02f      	b.n	8006d78 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d18:	4b34      	ldr	r3, [pc, #208]	; (8006dec <xTaskResumeAll+0x120>)
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	3318      	adds	r3, #24
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7ff f871 	bl	8005e0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	3304      	adds	r3, #4
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7ff f86c 	bl	8005e0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d38:	4b2d      	ldr	r3, [pc, #180]	; (8006df0 <xTaskResumeAll+0x124>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d903      	bls.n	8006d48 <xTaskResumeAll+0x7c>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d44:	4a2a      	ldr	r2, [pc, #168]	; (8006df0 <xTaskResumeAll+0x124>)
 8006d46:	6013      	str	r3, [r2, #0]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4413      	add	r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4a27      	ldr	r2, [pc, #156]	; (8006df4 <xTaskResumeAll+0x128>)
 8006d56:	441a      	add	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	3304      	adds	r3, #4
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	4610      	mov	r0, r2
 8006d60:	f7fe fff7 	bl	8005d52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d68:	4b23      	ldr	r3, [pc, #140]	; (8006df8 <xTaskResumeAll+0x12c>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d302      	bcc.n	8006d78 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006d72:	4b22      	ldr	r3, [pc, #136]	; (8006dfc <xTaskResumeAll+0x130>)
 8006d74:	2201      	movs	r2, #1
 8006d76:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d78:	4b1c      	ldr	r3, [pc, #112]	; (8006dec <xTaskResumeAll+0x120>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1cb      	bne.n	8006d18 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d86:	f000 fb55 	bl	8007434 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006d8a:	4b1d      	ldr	r3, [pc, #116]	; (8006e00 <xTaskResumeAll+0x134>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d010      	beq.n	8006db8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d96:	f000 f847 	bl	8006e28 <xTaskIncrementTick>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d002      	beq.n	8006da6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006da0:	4b16      	ldr	r3, [pc, #88]	; (8006dfc <xTaskResumeAll+0x130>)
 8006da2:	2201      	movs	r2, #1
 8006da4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	3b01      	subs	r3, #1
 8006daa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1f1      	bne.n	8006d96 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006db2:	4b13      	ldr	r3, [pc, #76]	; (8006e00 <xTaskResumeAll+0x134>)
 8006db4:	2200      	movs	r2, #0
 8006db6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006db8:	4b10      	ldr	r3, [pc, #64]	; (8006dfc <xTaskResumeAll+0x130>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d009      	beq.n	8006dd4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006dc4:	4b0f      	ldr	r3, [pc, #60]	; (8006e04 <xTaskResumeAll+0x138>)
 8006dc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dca:	601a      	str	r2, [r3, #0]
 8006dcc:	f3bf 8f4f 	dsb	sy
 8006dd0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006dd4:	f001 f8d6 	bl	8007f84 <vPortExitCritical>

	return xAlreadyYielded;
 8006dd8:	68bb      	ldr	r3, [r7, #8]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	20001f80 	.word	0x20001f80
 8006de8:	20001f58 	.word	0x20001f58
 8006dec:	20001f18 	.word	0x20001f18
 8006df0:	20001f60 	.word	0x20001f60
 8006df4:	20001a88 	.word	0x20001a88
 8006df8:	20001a84 	.word	0x20001a84
 8006dfc:	20001f6c 	.word	0x20001f6c
 8006e00:	20001f68 	.word	0x20001f68
 8006e04:	e000ed04 	.word	0xe000ed04

08006e08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006e0e:	4b05      	ldr	r3, [pc, #20]	; (8006e24 <xTaskGetTickCount+0x1c>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006e14:	687b      	ldr	r3, [r7, #4]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	20001f5c 	.word	0x20001f5c

08006e28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e32:	4b4f      	ldr	r3, [pc, #316]	; (8006f70 <xTaskIncrementTick+0x148>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	f040 808f 	bne.w	8006f5a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e3c:	4b4d      	ldr	r3, [pc, #308]	; (8006f74 <xTaskIncrementTick+0x14c>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	3301      	adds	r3, #1
 8006e42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e44:	4a4b      	ldr	r2, [pc, #300]	; (8006f74 <xTaskIncrementTick+0x14c>)
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d120      	bne.n	8006e92 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e50:	4b49      	ldr	r3, [pc, #292]	; (8006f78 <xTaskIncrementTick+0x150>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00a      	beq.n	8006e70 <xTaskIncrementTick+0x48>
	__asm volatile
 8006e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5e:	f383 8811 	msr	BASEPRI, r3
 8006e62:	f3bf 8f6f 	isb	sy
 8006e66:	f3bf 8f4f 	dsb	sy
 8006e6a:	603b      	str	r3, [r7, #0]
}
 8006e6c:	bf00      	nop
 8006e6e:	e7fe      	b.n	8006e6e <xTaskIncrementTick+0x46>
 8006e70:	4b41      	ldr	r3, [pc, #260]	; (8006f78 <xTaskIncrementTick+0x150>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	60fb      	str	r3, [r7, #12]
 8006e76:	4b41      	ldr	r3, [pc, #260]	; (8006f7c <xTaskIncrementTick+0x154>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a3f      	ldr	r2, [pc, #252]	; (8006f78 <xTaskIncrementTick+0x150>)
 8006e7c:	6013      	str	r3, [r2, #0]
 8006e7e:	4a3f      	ldr	r2, [pc, #252]	; (8006f7c <xTaskIncrementTick+0x154>)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6013      	str	r3, [r2, #0]
 8006e84:	4b3e      	ldr	r3, [pc, #248]	; (8006f80 <xTaskIncrementTick+0x158>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	3301      	adds	r3, #1
 8006e8a:	4a3d      	ldr	r2, [pc, #244]	; (8006f80 <xTaskIncrementTick+0x158>)
 8006e8c:	6013      	str	r3, [r2, #0]
 8006e8e:	f000 fad1 	bl	8007434 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e92:	4b3c      	ldr	r3, [pc, #240]	; (8006f84 <xTaskIncrementTick+0x15c>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d349      	bcc.n	8006f30 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e9c:	4b36      	ldr	r3, [pc, #216]	; (8006f78 <xTaskIncrementTick+0x150>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d104      	bne.n	8006eb0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ea6:	4b37      	ldr	r3, [pc, #220]	; (8006f84 <xTaskIncrementTick+0x15c>)
 8006ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8006eac:	601a      	str	r2, [r3, #0]
					break;
 8006eae:	e03f      	b.n	8006f30 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eb0:	4b31      	ldr	r3, [pc, #196]	; (8006f78 <xTaskIncrementTick+0x150>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d203      	bcs.n	8006ed0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ec8:	4a2e      	ldr	r2, [pc, #184]	; (8006f84 <xTaskIncrementTick+0x15c>)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006ece:	e02f      	b.n	8006f30 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	3304      	adds	r3, #4
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7fe ff99 	bl	8005e0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d004      	beq.n	8006eec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	3318      	adds	r3, #24
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7fe ff90 	bl	8005e0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef0:	4b25      	ldr	r3, [pc, #148]	; (8006f88 <xTaskIncrementTick+0x160>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d903      	bls.n	8006f00 <xTaskIncrementTick+0xd8>
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efc:	4a22      	ldr	r2, [pc, #136]	; (8006f88 <xTaskIncrementTick+0x160>)
 8006efe:	6013      	str	r3, [r2, #0]
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f04:	4613      	mov	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	4413      	add	r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4a1f      	ldr	r2, [pc, #124]	; (8006f8c <xTaskIncrementTick+0x164>)
 8006f0e:	441a      	add	r2, r3
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	3304      	adds	r3, #4
 8006f14:	4619      	mov	r1, r3
 8006f16:	4610      	mov	r0, r2
 8006f18:	f7fe ff1b 	bl	8005d52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f20:	4b1b      	ldr	r3, [pc, #108]	; (8006f90 <xTaskIncrementTick+0x168>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d3b8      	bcc.n	8006e9c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f2e:	e7b5      	b.n	8006e9c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f30:	4b17      	ldr	r3, [pc, #92]	; (8006f90 <xTaskIncrementTick+0x168>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f36:	4915      	ldr	r1, [pc, #84]	; (8006f8c <xTaskIncrementTick+0x164>)
 8006f38:	4613      	mov	r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	4413      	add	r3, r2
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	440b      	add	r3, r1
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d901      	bls.n	8006f4c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006f4c:	4b11      	ldr	r3, [pc, #68]	; (8006f94 <xTaskIncrementTick+0x16c>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d007      	beq.n	8006f64 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006f54:	2301      	movs	r3, #1
 8006f56:	617b      	str	r3, [r7, #20]
 8006f58:	e004      	b.n	8006f64 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006f5a:	4b0f      	ldr	r3, [pc, #60]	; (8006f98 <xTaskIncrementTick+0x170>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	4a0d      	ldr	r2, [pc, #52]	; (8006f98 <xTaskIncrementTick+0x170>)
 8006f62:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006f64:	697b      	ldr	r3, [r7, #20]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3718      	adds	r7, #24
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	20001f80 	.word	0x20001f80
 8006f74:	20001f5c 	.word	0x20001f5c
 8006f78:	20001f10 	.word	0x20001f10
 8006f7c:	20001f14 	.word	0x20001f14
 8006f80:	20001f70 	.word	0x20001f70
 8006f84:	20001f78 	.word	0x20001f78
 8006f88:	20001f60 	.word	0x20001f60
 8006f8c:	20001a88 	.word	0x20001a88
 8006f90:	20001a84 	.word	0x20001a84
 8006f94:	20001f6c 	.word	0x20001f6c
 8006f98:	20001f68 	.word	0x20001f68

08006f9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006fa2:	4b28      	ldr	r3, [pc, #160]	; (8007044 <vTaskSwitchContext+0xa8>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d003      	beq.n	8006fb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006faa:	4b27      	ldr	r3, [pc, #156]	; (8007048 <vTaskSwitchContext+0xac>)
 8006fac:	2201      	movs	r2, #1
 8006fae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006fb0:	e041      	b.n	8007036 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006fb2:	4b25      	ldr	r3, [pc, #148]	; (8007048 <vTaskSwitchContext+0xac>)
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fb8:	4b24      	ldr	r3, [pc, #144]	; (800704c <vTaskSwitchContext+0xb0>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	60fb      	str	r3, [r7, #12]
 8006fbe:	e010      	b.n	8006fe2 <vTaskSwitchContext+0x46>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10a      	bne.n	8006fdc <vTaskSwitchContext+0x40>
	__asm volatile
 8006fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fca:	f383 8811 	msr	BASEPRI, r3
 8006fce:	f3bf 8f6f 	isb	sy
 8006fd2:	f3bf 8f4f 	dsb	sy
 8006fd6:	607b      	str	r3, [r7, #4]
}
 8006fd8:	bf00      	nop
 8006fda:	e7fe      	b.n	8006fda <vTaskSwitchContext+0x3e>
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	60fb      	str	r3, [r7, #12]
 8006fe2:	491b      	ldr	r1, [pc, #108]	; (8007050 <vTaskSwitchContext+0xb4>)
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	4413      	add	r3, r2
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	440b      	add	r3, r1
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d0e4      	beq.n	8006fc0 <vTaskSwitchContext+0x24>
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	4613      	mov	r3, r2
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	4413      	add	r3, r2
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	4a13      	ldr	r2, [pc, #76]	; (8007050 <vTaskSwitchContext+0xb4>)
 8007002:	4413      	add	r3, r2
 8007004:	60bb      	str	r3, [r7, #8]
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	605a      	str	r2, [r3, #4]
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	685a      	ldr	r2, [r3, #4]
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	3308      	adds	r3, #8
 8007018:	429a      	cmp	r2, r3
 800701a:	d104      	bne.n	8007026 <vTaskSwitchContext+0x8a>
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	685a      	ldr	r2, [r3, #4]
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	605a      	str	r2, [r3, #4]
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	4a09      	ldr	r2, [pc, #36]	; (8007054 <vTaskSwitchContext+0xb8>)
 800702e:	6013      	str	r3, [r2, #0]
 8007030:	4a06      	ldr	r2, [pc, #24]	; (800704c <vTaskSwitchContext+0xb0>)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6013      	str	r3, [r2, #0]
}
 8007036:	bf00      	nop
 8007038:	3714      	adds	r7, #20
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	20001f80 	.word	0x20001f80
 8007048:	20001f6c 	.word	0x20001f6c
 800704c:	20001f60 	.word	0x20001f60
 8007050:	20001a88 	.word	0x20001a88
 8007054:	20001a84 	.word	0x20001a84

08007058 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d10a      	bne.n	800707e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706c:	f383 8811 	msr	BASEPRI, r3
 8007070:	f3bf 8f6f 	isb	sy
 8007074:	f3bf 8f4f 	dsb	sy
 8007078:	60fb      	str	r3, [r7, #12]
}
 800707a:	bf00      	nop
 800707c:	e7fe      	b.n	800707c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800707e:	4b07      	ldr	r3, [pc, #28]	; (800709c <vTaskPlaceOnEventList+0x44>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	3318      	adds	r3, #24
 8007084:	4619      	mov	r1, r3
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f7fe fe87 	bl	8005d9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800708c:	2101      	movs	r1, #1
 800708e:	6838      	ldr	r0, [r7, #0]
 8007090:	f000 fa7c 	bl	800758c <prvAddCurrentTaskToDelayedList>
}
 8007094:	bf00      	nop
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	20001a84 	.word	0x20001a84

080070a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b086      	sub	sp, #24
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10a      	bne.n	80070c8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80070b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b6:	f383 8811 	msr	BASEPRI, r3
 80070ba:	f3bf 8f6f 	isb	sy
 80070be:	f3bf 8f4f 	dsb	sy
 80070c2:	617b      	str	r3, [r7, #20]
}
 80070c4:	bf00      	nop
 80070c6:	e7fe      	b.n	80070c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80070c8:	4b0a      	ldr	r3, [pc, #40]	; (80070f4 <vTaskPlaceOnEventListRestricted+0x54>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	3318      	adds	r3, #24
 80070ce:	4619      	mov	r1, r3
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f7fe fe3e 	bl	8005d52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d002      	beq.n	80070e2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80070dc:	f04f 33ff 	mov.w	r3, #4294967295
 80070e0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80070e2:	6879      	ldr	r1, [r7, #4]
 80070e4:	68b8      	ldr	r0, [r7, #8]
 80070e6:	f000 fa51 	bl	800758c <prvAddCurrentTaskToDelayedList>
	}
 80070ea:	bf00      	nop
 80070ec:	3718      	adds	r7, #24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	20001a84 	.word	0x20001a84

080070f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10a      	bne.n	8007124 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800710e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007112:	f383 8811 	msr	BASEPRI, r3
 8007116:	f3bf 8f6f 	isb	sy
 800711a:	f3bf 8f4f 	dsb	sy
 800711e:	60fb      	str	r3, [r7, #12]
}
 8007120:	bf00      	nop
 8007122:	e7fe      	b.n	8007122 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	3318      	adds	r3, #24
 8007128:	4618      	mov	r0, r3
 800712a:	f7fe fe6f 	bl	8005e0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800712e:	4b1e      	ldr	r3, [pc, #120]	; (80071a8 <xTaskRemoveFromEventList+0xb0>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d11d      	bne.n	8007172 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	3304      	adds	r3, #4
 800713a:	4618      	mov	r0, r3
 800713c:	f7fe fe66 	bl	8005e0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007144:	4b19      	ldr	r3, [pc, #100]	; (80071ac <xTaskRemoveFromEventList+0xb4>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	429a      	cmp	r2, r3
 800714a:	d903      	bls.n	8007154 <xTaskRemoveFromEventList+0x5c>
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007150:	4a16      	ldr	r2, [pc, #88]	; (80071ac <xTaskRemoveFromEventList+0xb4>)
 8007152:	6013      	str	r3, [r2, #0]
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007158:	4613      	mov	r3, r2
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	4413      	add	r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	4a13      	ldr	r2, [pc, #76]	; (80071b0 <xTaskRemoveFromEventList+0xb8>)
 8007162:	441a      	add	r2, r3
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	3304      	adds	r3, #4
 8007168:	4619      	mov	r1, r3
 800716a:	4610      	mov	r0, r2
 800716c:	f7fe fdf1 	bl	8005d52 <vListInsertEnd>
 8007170:	e005      	b.n	800717e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	3318      	adds	r3, #24
 8007176:	4619      	mov	r1, r3
 8007178:	480e      	ldr	r0, [pc, #56]	; (80071b4 <xTaskRemoveFromEventList+0xbc>)
 800717a:	f7fe fdea 	bl	8005d52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007182:	4b0d      	ldr	r3, [pc, #52]	; (80071b8 <xTaskRemoveFromEventList+0xc0>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007188:	429a      	cmp	r2, r3
 800718a:	d905      	bls.n	8007198 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800718c:	2301      	movs	r3, #1
 800718e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007190:	4b0a      	ldr	r3, [pc, #40]	; (80071bc <xTaskRemoveFromEventList+0xc4>)
 8007192:	2201      	movs	r2, #1
 8007194:	601a      	str	r2, [r3, #0]
 8007196:	e001      	b.n	800719c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007198:	2300      	movs	r3, #0
 800719a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800719c:	697b      	ldr	r3, [r7, #20]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3718      	adds	r7, #24
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	20001f80 	.word	0x20001f80
 80071ac:	20001f60 	.word	0x20001f60
 80071b0:	20001a88 	.word	0x20001a88
 80071b4:	20001f18 	.word	0x20001f18
 80071b8:	20001a84 	.word	0x20001a84
 80071bc:	20001f6c 	.word	0x20001f6c

080071c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80071c8:	4b06      	ldr	r3, [pc, #24]	; (80071e4 <vTaskInternalSetTimeOutState+0x24>)
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80071d0:	4b05      	ldr	r3, [pc, #20]	; (80071e8 <vTaskInternalSetTimeOutState+0x28>)
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	605a      	str	r2, [r3, #4]
}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr
 80071e4:	20001f70 	.word	0x20001f70
 80071e8:	20001f5c 	.word	0x20001f5c

080071ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b088      	sub	sp, #32
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10a      	bne.n	8007212 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80071fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007200:	f383 8811 	msr	BASEPRI, r3
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	613b      	str	r3, [r7, #16]
}
 800720e:	bf00      	nop
 8007210:	e7fe      	b.n	8007210 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10a      	bne.n	800722e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721c:	f383 8811 	msr	BASEPRI, r3
 8007220:	f3bf 8f6f 	isb	sy
 8007224:	f3bf 8f4f 	dsb	sy
 8007228:	60fb      	str	r3, [r7, #12]
}
 800722a:	bf00      	nop
 800722c:	e7fe      	b.n	800722c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800722e:	f000 fe79 	bl	8007f24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007232:	4b1d      	ldr	r3, [pc, #116]	; (80072a8 <xTaskCheckForTimeOut+0xbc>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	69ba      	ldr	r2, [r7, #24]
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800724a:	d102      	bne.n	8007252 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800724c:	2300      	movs	r3, #0
 800724e:	61fb      	str	r3, [r7, #28]
 8007250:	e023      	b.n	800729a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	4b15      	ldr	r3, [pc, #84]	; (80072ac <xTaskCheckForTimeOut+0xc0>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	429a      	cmp	r2, r3
 800725c:	d007      	beq.n	800726e <xTaskCheckForTimeOut+0x82>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	69ba      	ldr	r2, [r7, #24]
 8007264:	429a      	cmp	r2, r3
 8007266:	d302      	bcc.n	800726e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007268:	2301      	movs	r3, #1
 800726a:	61fb      	str	r3, [r7, #28]
 800726c:	e015      	b.n	800729a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	697a      	ldr	r2, [r7, #20]
 8007274:	429a      	cmp	r2, r3
 8007276:	d20b      	bcs.n	8007290 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	1ad2      	subs	r2, r2, r3
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f7ff ff9b 	bl	80071c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800728a:	2300      	movs	r3, #0
 800728c:	61fb      	str	r3, [r7, #28]
 800728e:	e004      	b.n	800729a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	2200      	movs	r2, #0
 8007294:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007296:	2301      	movs	r3, #1
 8007298:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800729a:	f000 fe73 	bl	8007f84 <vPortExitCritical>

	return xReturn;
 800729e:	69fb      	ldr	r3, [r7, #28]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3720      	adds	r7, #32
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	20001f5c 	.word	0x20001f5c
 80072ac:	20001f70 	.word	0x20001f70

080072b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80072b0:	b480      	push	{r7}
 80072b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80072b4:	4b03      	ldr	r3, [pc, #12]	; (80072c4 <vTaskMissedYield+0x14>)
 80072b6:	2201      	movs	r2, #1
 80072b8:	601a      	str	r2, [r3, #0]
}
 80072ba:	bf00      	nop
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr
 80072c4:	20001f6c 	.word	0x20001f6c

080072c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80072d0:	f000 f852 	bl	8007378 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80072d4:	4b06      	ldr	r3, [pc, #24]	; (80072f0 <prvIdleTask+0x28>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d9f9      	bls.n	80072d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80072dc:	4b05      	ldr	r3, [pc, #20]	; (80072f4 <prvIdleTask+0x2c>)
 80072de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072e2:	601a      	str	r2, [r3, #0]
 80072e4:	f3bf 8f4f 	dsb	sy
 80072e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80072ec:	e7f0      	b.n	80072d0 <prvIdleTask+0x8>
 80072ee:	bf00      	nop
 80072f0:	20001a88 	.word	0x20001a88
 80072f4:	e000ed04 	.word	0xe000ed04

080072f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072fe:	2300      	movs	r3, #0
 8007300:	607b      	str	r3, [r7, #4]
 8007302:	e00c      	b.n	800731e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	4613      	mov	r3, r2
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	4413      	add	r3, r2
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	4a12      	ldr	r2, [pc, #72]	; (8007358 <prvInitialiseTaskLists+0x60>)
 8007310:	4413      	add	r3, r2
 8007312:	4618      	mov	r0, r3
 8007314:	f7fe fcf0 	bl	8005cf8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	3301      	adds	r3, #1
 800731c:	607b      	str	r3, [r7, #4]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2b37      	cmp	r3, #55	; 0x37
 8007322:	d9ef      	bls.n	8007304 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007324:	480d      	ldr	r0, [pc, #52]	; (800735c <prvInitialiseTaskLists+0x64>)
 8007326:	f7fe fce7 	bl	8005cf8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800732a:	480d      	ldr	r0, [pc, #52]	; (8007360 <prvInitialiseTaskLists+0x68>)
 800732c:	f7fe fce4 	bl	8005cf8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007330:	480c      	ldr	r0, [pc, #48]	; (8007364 <prvInitialiseTaskLists+0x6c>)
 8007332:	f7fe fce1 	bl	8005cf8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007336:	480c      	ldr	r0, [pc, #48]	; (8007368 <prvInitialiseTaskLists+0x70>)
 8007338:	f7fe fcde 	bl	8005cf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800733c:	480b      	ldr	r0, [pc, #44]	; (800736c <prvInitialiseTaskLists+0x74>)
 800733e:	f7fe fcdb 	bl	8005cf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007342:	4b0b      	ldr	r3, [pc, #44]	; (8007370 <prvInitialiseTaskLists+0x78>)
 8007344:	4a05      	ldr	r2, [pc, #20]	; (800735c <prvInitialiseTaskLists+0x64>)
 8007346:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007348:	4b0a      	ldr	r3, [pc, #40]	; (8007374 <prvInitialiseTaskLists+0x7c>)
 800734a:	4a05      	ldr	r2, [pc, #20]	; (8007360 <prvInitialiseTaskLists+0x68>)
 800734c:	601a      	str	r2, [r3, #0]
}
 800734e:	bf00      	nop
 8007350:	3708      	adds	r7, #8
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	20001a88 	.word	0x20001a88
 800735c:	20001ee8 	.word	0x20001ee8
 8007360:	20001efc 	.word	0x20001efc
 8007364:	20001f18 	.word	0x20001f18
 8007368:	20001f2c 	.word	0x20001f2c
 800736c:	20001f44 	.word	0x20001f44
 8007370:	20001f10 	.word	0x20001f10
 8007374:	20001f14 	.word	0x20001f14

08007378 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800737e:	e019      	b.n	80073b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007380:	f000 fdd0 	bl	8007f24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007384:	4b10      	ldr	r3, [pc, #64]	; (80073c8 <prvCheckTasksWaitingTermination+0x50>)
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	3304      	adds	r3, #4
 8007390:	4618      	mov	r0, r3
 8007392:	f7fe fd3b 	bl	8005e0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007396:	4b0d      	ldr	r3, [pc, #52]	; (80073cc <prvCheckTasksWaitingTermination+0x54>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	3b01      	subs	r3, #1
 800739c:	4a0b      	ldr	r2, [pc, #44]	; (80073cc <prvCheckTasksWaitingTermination+0x54>)
 800739e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80073a0:	4b0b      	ldr	r3, [pc, #44]	; (80073d0 <prvCheckTasksWaitingTermination+0x58>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	3b01      	subs	r3, #1
 80073a6:	4a0a      	ldr	r2, [pc, #40]	; (80073d0 <prvCheckTasksWaitingTermination+0x58>)
 80073a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80073aa:	f000 fdeb 	bl	8007f84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f810 	bl	80073d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073b4:	4b06      	ldr	r3, [pc, #24]	; (80073d0 <prvCheckTasksWaitingTermination+0x58>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1e1      	bne.n	8007380 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80073bc:	bf00      	nop
 80073be:	bf00      	nop
 80073c0:	3708      	adds	r7, #8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	20001f2c 	.word	0x20001f2c
 80073cc:	20001f58 	.word	0x20001f58
 80073d0:	20001f40 	.word	0x20001f40

080073d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d108      	bne.n	80073f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ea:	4618      	mov	r0, r3
 80073ec:	f000 ff88 	bl	8008300 <vPortFree>
				vPortFree( pxTCB );
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 ff85 	bl	8008300 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80073f6:	e018      	b.n	800742a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d103      	bne.n	800740a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 ff7c 	bl	8008300 <vPortFree>
	}
 8007408:	e00f      	b.n	800742a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007410:	2b02      	cmp	r3, #2
 8007412:	d00a      	beq.n	800742a <prvDeleteTCB+0x56>
	__asm volatile
 8007414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007418:	f383 8811 	msr	BASEPRI, r3
 800741c:	f3bf 8f6f 	isb	sy
 8007420:	f3bf 8f4f 	dsb	sy
 8007424:	60fb      	str	r3, [r7, #12]
}
 8007426:	bf00      	nop
 8007428:	e7fe      	b.n	8007428 <prvDeleteTCB+0x54>
	}
 800742a:	bf00      	nop
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
	...

08007434 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800743a:	4b0c      	ldr	r3, [pc, #48]	; (800746c <prvResetNextTaskUnblockTime+0x38>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d104      	bne.n	800744e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007444:	4b0a      	ldr	r3, [pc, #40]	; (8007470 <prvResetNextTaskUnblockTime+0x3c>)
 8007446:	f04f 32ff 	mov.w	r2, #4294967295
 800744a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800744c:	e008      	b.n	8007460 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800744e:	4b07      	ldr	r3, [pc, #28]	; (800746c <prvResetNextTaskUnblockTime+0x38>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	4a04      	ldr	r2, [pc, #16]	; (8007470 <prvResetNextTaskUnblockTime+0x3c>)
 800745e:	6013      	str	r3, [r2, #0]
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr
 800746c:	20001f10 	.word	0x20001f10
 8007470:	20001f78 	.word	0x20001f78

08007474 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800747a:	4b0b      	ldr	r3, [pc, #44]	; (80074a8 <xTaskGetSchedulerState+0x34>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d102      	bne.n	8007488 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007482:	2301      	movs	r3, #1
 8007484:	607b      	str	r3, [r7, #4]
 8007486:	e008      	b.n	800749a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007488:	4b08      	ldr	r3, [pc, #32]	; (80074ac <xTaskGetSchedulerState+0x38>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d102      	bne.n	8007496 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007490:	2302      	movs	r3, #2
 8007492:	607b      	str	r3, [r7, #4]
 8007494:	e001      	b.n	800749a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007496:	2300      	movs	r3, #0
 8007498:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800749a:	687b      	ldr	r3, [r7, #4]
	}
 800749c:	4618      	mov	r0, r3
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	20001f64 	.word	0x20001f64
 80074ac:	20001f80 	.word	0x20001f80

080074b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80074bc:	2300      	movs	r3, #0
 80074be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d056      	beq.n	8007574 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80074c6:	4b2e      	ldr	r3, [pc, #184]	; (8007580 <xTaskPriorityDisinherit+0xd0>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	693a      	ldr	r2, [r7, #16]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d00a      	beq.n	80074e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	60fb      	str	r3, [r7, #12]
}
 80074e2:	bf00      	nop
 80074e4:	e7fe      	b.n	80074e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d10a      	bne.n	8007504 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80074ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f2:	f383 8811 	msr	BASEPRI, r3
 80074f6:	f3bf 8f6f 	isb	sy
 80074fa:	f3bf 8f4f 	dsb	sy
 80074fe:	60bb      	str	r3, [r7, #8]
}
 8007500:	bf00      	nop
 8007502:	e7fe      	b.n	8007502 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007508:	1e5a      	subs	r2, r3, #1
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007516:	429a      	cmp	r2, r3
 8007518:	d02c      	beq.n	8007574 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800751e:	2b00      	cmp	r3, #0
 8007520:	d128      	bne.n	8007574 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	3304      	adds	r3, #4
 8007526:	4618      	mov	r0, r3
 8007528:	f7fe fc70 	bl	8005e0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007538:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007544:	4b0f      	ldr	r3, [pc, #60]	; (8007584 <xTaskPriorityDisinherit+0xd4>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	429a      	cmp	r2, r3
 800754a:	d903      	bls.n	8007554 <xTaskPriorityDisinherit+0xa4>
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007550:	4a0c      	ldr	r2, [pc, #48]	; (8007584 <xTaskPriorityDisinherit+0xd4>)
 8007552:	6013      	str	r3, [r2, #0]
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007558:	4613      	mov	r3, r2
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	4413      	add	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4a09      	ldr	r2, [pc, #36]	; (8007588 <xTaskPriorityDisinherit+0xd8>)
 8007562:	441a      	add	r2, r3
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	3304      	adds	r3, #4
 8007568:	4619      	mov	r1, r3
 800756a:	4610      	mov	r0, r2
 800756c:	f7fe fbf1 	bl	8005d52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007570:	2301      	movs	r3, #1
 8007572:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007574:	697b      	ldr	r3, [r7, #20]
	}
 8007576:	4618      	mov	r0, r3
 8007578:	3718      	adds	r7, #24
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	20001a84 	.word	0x20001a84
 8007584:	20001f60 	.word	0x20001f60
 8007588:	20001a88 	.word	0x20001a88

0800758c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007596:	4b21      	ldr	r3, [pc, #132]	; (800761c <prvAddCurrentTaskToDelayedList+0x90>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800759c:	4b20      	ldr	r3, [pc, #128]	; (8007620 <prvAddCurrentTaskToDelayedList+0x94>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	3304      	adds	r3, #4
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fe fc32 	bl	8005e0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ae:	d10a      	bne.n	80075c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d007      	beq.n	80075c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075b6:	4b1a      	ldr	r3, [pc, #104]	; (8007620 <prvAddCurrentTaskToDelayedList+0x94>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	3304      	adds	r3, #4
 80075bc:	4619      	mov	r1, r3
 80075be:	4819      	ldr	r0, [pc, #100]	; (8007624 <prvAddCurrentTaskToDelayedList+0x98>)
 80075c0:	f7fe fbc7 	bl	8005d52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80075c4:	e026      	b.n	8007614 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4413      	add	r3, r2
 80075cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80075ce:	4b14      	ldr	r3, [pc, #80]	; (8007620 <prvAddCurrentTaskToDelayedList+0x94>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d209      	bcs.n	80075f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075de:	4b12      	ldr	r3, [pc, #72]	; (8007628 <prvAddCurrentTaskToDelayedList+0x9c>)
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	4b0f      	ldr	r3, [pc, #60]	; (8007620 <prvAddCurrentTaskToDelayedList+0x94>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	3304      	adds	r3, #4
 80075e8:	4619      	mov	r1, r3
 80075ea:	4610      	mov	r0, r2
 80075ec:	f7fe fbd5 	bl	8005d9a <vListInsert>
}
 80075f0:	e010      	b.n	8007614 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075f2:	4b0e      	ldr	r3, [pc, #56]	; (800762c <prvAddCurrentTaskToDelayedList+0xa0>)
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	4b0a      	ldr	r3, [pc, #40]	; (8007620 <prvAddCurrentTaskToDelayedList+0x94>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	3304      	adds	r3, #4
 80075fc:	4619      	mov	r1, r3
 80075fe:	4610      	mov	r0, r2
 8007600:	f7fe fbcb 	bl	8005d9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007604:	4b0a      	ldr	r3, [pc, #40]	; (8007630 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	429a      	cmp	r2, r3
 800760c:	d202      	bcs.n	8007614 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800760e:	4a08      	ldr	r2, [pc, #32]	; (8007630 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	6013      	str	r3, [r2, #0]
}
 8007614:	bf00      	nop
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}
 800761c:	20001f5c 	.word	0x20001f5c
 8007620:	20001a84 	.word	0x20001a84
 8007624:	20001f44 	.word	0x20001f44
 8007628:	20001f14 	.word	0x20001f14
 800762c:	20001f10 	.word	0x20001f10
 8007630:	20001f78 	.word	0x20001f78

08007634 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b08a      	sub	sp, #40	; 0x28
 8007638:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800763a:	2300      	movs	r3, #0
 800763c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800763e:	f000 fb07 	bl	8007c50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007642:	4b1c      	ldr	r3, [pc, #112]	; (80076b4 <xTimerCreateTimerTask+0x80>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d021      	beq.n	800768e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800764a:	2300      	movs	r3, #0
 800764c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800764e:	2300      	movs	r3, #0
 8007650:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007652:	1d3a      	adds	r2, r7, #4
 8007654:	f107 0108 	add.w	r1, r7, #8
 8007658:	f107 030c 	add.w	r3, r7, #12
 800765c:	4618      	mov	r0, r3
 800765e:	f7fe fb31 	bl	8005cc4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007662:	6879      	ldr	r1, [r7, #4]
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	9202      	str	r2, [sp, #8]
 800766a:	9301      	str	r3, [sp, #4]
 800766c:	2302      	movs	r3, #2
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	2300      	movs	r3, #0
 8007672:	460a      	mov	r2, r1
 8007674:	4910      	ldr	r1, [pc, #64]	; (80076b8 <xTimerCreateTimerTask+0x84>)
 8007676:	4811      	ldr	r0, [pc, #68]	; (80076bc <xTimerCreateTimerTask+0x88>)
 8007678:	f7ff f8de 	bl	8006838 <xTaskCreateStatic>
 800767c:	4603      	mov	r3, r0
 800767e:	4a10      	ldr	r2, [pc, #64]	; (80076c0 <xTimerCreateTimerTask+0x8c>)
 8007680:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007682:	4b0f      	ldr	r3, [pc, #60]	; (80076c0 <xTimerCreateTimerTask+0x8c>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d001      	beq.n	800768e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800768a:	2301      	movs	r3, #1
 800768c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d10a      	bne.n	80076aa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007698:	f383 8811 	msr	BASEPRI, r3
 800769c:	f3bf 8f6f 	isb	sy
 80076a0:	f3bf 8f4f 	dsb	sy
 80076a4:	613b      	str	r3, [r7, #16]
}
 80076a6:	bf00      	nop
 80076a8:	e7fe      	b.n	80076a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80076aa:	697b      	ldr	r3, [r7, #20]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3718      	adds	r7, #24
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	20001fb4 	.word	0x20001fb4
 80076b8:	0800a388 	.word	0x0800a388
 80076bc:	080077f9 	.word	0x080077f9
 80076c0:	20001fb8 	.word	0x20001fb8

080076c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b08a      	sub	sp, #40	; 0x28
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
 80076d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80076d2:	2300      	movs	r3, #0
 80076d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d10a      	bne.n	80076f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80076dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e0:	f383 8811 	msr	BASEPRI, r3
 80076e4:	f3bf 8f6f 	isb	sy
 80076e8:	f3bf 8f4f 	dsb	sy
 80076ec:	623b      	str	r3, [r7, #32]
}
 80076ee:	bf00      	nop
 80076f0:	e7fe      	b.n	80076f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80076f2:	4b1a      	ldr	r3, [pc, #104]	; (800775c <xTimerGenericCommand+0x98>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d02a      	beq.n	8007750 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	2b05      	cmp	r3, #5
 800770a:	dc18      	bgt.n	800773e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800770c:	f7ff feb2 	bl	8007474 <xTaskGetSchedulerState>
 8007710:	4603      	mov	r3, r0
 8007712:	2b02      	cmp	r3, #2
 8007714:	d109      	bne.n	800772a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007716:	4b11      	ldr	r3, [pc, #68]	; (800775c <xTimerGenericCommand+0x98>)
 8007718:	6818      	ldr	r0, [r3, #0]
 800771a:	f107 0110 	add.w	r1, r7, #16
 800771e:	2300      	movs	r3, #0
 8007720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007722:	f7fe fca1 	bl	8006068 <xQueueGenericSend>
 8007726:	6278      	str	r0, [r7, #36]	; 0x24
 8007728:	e012      	b.n	8007750 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800772a:	4b0c      	ldr	r3, [pc, #48]	; (800775c <xTimerGenericCommand+0x98>)
 800772c:	6818      	ldr	r0, [r3, #0]
 800772e:	f107 0110 	add.w	r1, r7, #16
 8007732:	2300      	movs	r3, #0
 8007734:	2200      	movs	r2, #0
 8007736:	f7fe fc97 	bl	8006068 <xQueueGenericSend>
 800773a:	6278      	str	r0, [r7, #36]	; 0x24
 800773c:	e008      	b.n	8007750 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800773e:	4b07      	ldr	r3, [pc, #28]	; (800775c <xTimerGenericCommand+0x98>)
 8007740:	6818      	ldr	r0, [r3, #0]
 8007742:	f107 0110 	add.w	r1, r7, #16
 8007746:	2300      	movs	r3, #0
 8007748:	683a      	ldr	r2, [r7, #0]
 800774a:	f7fe fd8b 	bl	8006264 <xQueueGenericSendFromISR>
 800774e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007752:	4618      	mov	r0, r3
 8007754:	3728      	adds	r7, #40	; 0x28
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	20001fb4 	.word	0x20001fb4

08007760 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b088      	sub	sp, #32
 8007764:	af02      	add	r7, sp, #8
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800776a:	4b22      	ldr	r3, [pc, #136]	; (80077f4 <prvProcessExpiredTimer+0x94>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	3304      	adds	r3, #4
 8007778:	4618      	mov	r0, r3
 800777a:	f7fe fb47 	bl	8005e0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007784:	f003 0304 	and.w	r3, r3, #4
 8007788:	2b00      	cmp	r3, #0
 800778a:	d022      	beq.n	80077d2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	699a      	ldr	r2, [r3, #24]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	18d1      	adds	r1, r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	683a      	ldr	r2, [r7, #0]
 8007798:	6978      	ldr	r0, [r7, #20]
 800779a:	f000 f8d1 	bl	8007940 <prvInsertTimerInActiveList>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d01f      	beq.n	80077e4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80077a4:	2300      	movs	r3, #0
 80077a6:	9300      	str	r3, [sp, #0]
 80077a8:	2300      	movs	r3, #0
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	2100      	movs	r1, #0
 80077ae:	6978      	ldr	r0, [r7, #20]
 80077b0:	f7ff ff88 	bl	80076c4 <xTimerGenericCommand>
 80077b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d113      	bne.n	80077e4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80077bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c0:	f383 8811 	msr	BASEPRI, r3
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	60fb      	str	r3, [r7, #12]
}
 80077ce:	bf00      	nop
 80077d0:	e7fe      	b.n	80077d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077d8:	f023 0301 	bic.w	r3, r3, #1
 80077dc:	b2da      	uxtb	r2, r3
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	6a1b      	ldr	r3, [r3, #32]
 80077e8:	6978      	ldr	r0, [r7, #20]
 80077ea:	4798      	blx	r3
}
 80077ec:	bf00      	nop
 80077ee:	3718      	adds	r7, #24
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	20001fac 	.word	0x20001fac

080077f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007800:	f107 0308 	add.w	r3, r7, #8
 8007804:	4618      	mov	r0, r3
 8007806:	f000 f857 	bl	80078b8 <prvGetNextExpireTime>
 800780a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	4619      	mov	r1, r3
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	f000 f803 	bl	800781c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007816:	f000 f8d5 	bl	80079c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800781a:	e7f1      	b.n	8007800 <prvTimerTask+0x8>

0800781c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007826:	f7ff fa43 	bl	8006cb0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800782a:	f107 0308 	add.w	r3, r7, #8
 800782e:	4618      	mov	r0, r3
 8007830:	f000 f866 	bl	8007900 <prvSampleTimeNow>
 8007834:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d130      	bne.n	800789e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d10a      	bne.n	8007858 <prvProcessTimerOrBlockTask+0x3c>
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	429a      	cmp	r2, r3
 8007848:	d806      	bhi.n	8007858 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800784a:	f7ff fa3f 	bl	8006ccc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800784e:	68f9      	ldr	r1, [r7, #12]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f7ff ff85 	bl	8007760 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007856:	e024      	b.n	80078a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d008      	beq.n	8007870 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800785e:	4b13      	ldr	r3, [pc, #76]	; (80078ac <prvProcessTimerOrBlockTask+0x90>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d101      	bne.n	800786c <prvProcessTimerOrBlockTask+0x50>
 8007868:	2301      	movs	r3, #1
 800786a:	e000      	b.n	800786e <prvProcessTimerOrBlockTask+0x52>
 800786c:	2300      	movs	r3, #0
 800786e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007870:	4b0f      	ldr	r3, [pc, #60]	; (80078b0 <prvProcessTimerOrBlockTask+0x94>)
 8007872:	6818      	ldr	r0, [r3, #0]
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	683a      	ldr	r2, [r7, #0]
 800787c:	4619      	mov	r1, r3
 800787e:	f7fe ffa7 	bl	80067d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007882:	f7ff fa23 	bl	8006ccc <xTaskResumeAll>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d10a      	bne.n	80078a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800788c:	4b09      	ldr	r3, [pc, #36]	; (80078b4 <prvProcessTimerOrBlockTask+0x98>)
 800788e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007892:	601a      	str	r2, [r3, #0]
 8007894:	f3bf 8f4f 	dsb	sy
 8007898:	f3bf 8f6f 	isb	sy
}
 800789c:	e001      	b.n	80078a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800789e:	f7ff fa15 	bl	8006ccc <xTaskResumeAll>
}
 80078a2:	bf00      	nop
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	20001fb0 	.word	0x20001fb0
 80078b0:	20001fb4 	.word	0x20001fb4
 80078b4:	e000ed04 	.word	0xe000ed04

080078b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80078c0:	4b0e      	ldr	r3, [pc, #56]	; (80078fc <prvGetNextExpireTime+0x44>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d101      	bne.n	80078ce <prvGetNextExpireTime+0x16>
 80078ca:	2201      	movs	r2, #1
 80078cc:	e000      	b.n	80078d0 <prvGetNextExpireTime+0x18>
 80078ce:	2200      	movs	r2, #0
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d105      	bne.n	80078e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078dc:	4b07      	ldr	r3, [pc, #28]	; (80078fc <prvGetNextExpireTime+0x44>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	60fb      	str	r3, [r7, #12]
 80078e6:	e001      	b.n	80078ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80078e8:	2300      	movs	r3, #0
 80078ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80078ec:	68fb      	ldr	r3, [r7, #12]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3714      	adds	r7, #20
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	20001fac 	.word	0x20001fac

08007900 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007908:	f7ff fa7e 	bl	8006e08 <xTaskGetTickCount>
 800790c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800790e:	4b0b      	ldr	r3, [pc, #44]	; (800793c <prvSampleTimeNow+0x3c>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	429a      	cmp	r2, r3
 8007916:	d205      	bcs.n	8007924 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007918:	f000 f936 	bl	8007b88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	601a      	str	r2, [r3, #0]
 8007922:	e002      	b.n	800792a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800792a:	4a04      	ldr	r2, [pc, #16]	; (800793c <prvSampleTimeNow+0x3c>)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007930:	68fb      	ldr	r3, [r7, #12]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	20001fbc 	.word	0x20001fbc

08007940 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b086      	sub	sp, #24
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	607a      	str	r2, [r7, #4]
 800794c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800794e:	2300      	movs	r3, #0
 8007950:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	68ba      	ldr	r2, [r7, #8]
 8007956:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	429a      	cmp	r2, r3
 8007964:	d812      	bhi.n	800798c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	1ad2      	subs	r2, r2, r3
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	429a      	cmp	r2, r3
 8007972:	d302      	bcc.n	800797a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007974:	2301      	movs	r3, #1
 8007976:	617b      	str	r3, [r7, #20]
 8007978:	e01b      	b.n	80079b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800797a:	4b10      	ldr	r3, [pc, #64]	; (80079bc <prvInsertTimerInActiveList+0x7c>)
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	3304      	adds	r3, #4
 8007982:	4619      	mov	r1, r3
 8007984:	4610      	mov	r0, r2
 8007986:	f7fe fa08 	bl	8005d9a <vListInsert>
 800798a:	e012      	b.n	80079b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	429a      	cmp	r2, r3
 8007992:	d206      	bcs.n	80079a2 <prvInsertTimerInActiveList+0x62>
 8007994:	68ba      	ldr	r2, [r7, #8]
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	429a      	cmp	r2, r3
 800799a:	d302      	bcc.n	80079a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800799c:	2301      	movs	r3, #1
 800799e:	617b      	str	r3, [r7, #20]
 80079a0:	e007      	b.n	80079b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80079a2:	4b07      	ldr	r3, [pc, #28]	; (80079c0 <prvInsertTimerInActiveList+0x80>)
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	3304      	adds	r3, #4
 80079aa:	4619      	mov	r1, r3
 80079ac:	4610      	mov	r0, r2
 80079ae:	f7fe f9f4 	bl	8005d9a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80079b2:	697b      	ldr	r3, [r7, #20]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3718      	adds	r7, #24
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	20001fb0 	.word	0x20001fb0
 80079c0:	20001fac 	.word	0x20001fac

080079c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b08e      	sub	sp, #56	; 0x38
 80079c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079ca:	e0ca      	b.n	8007b62 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	da18      	bge.n	8007a04 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80079d2:	1d3b      	adds	r3, r7, #4
 80079d4:	3304      	adds	r3, #4
 80079d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80079d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d10a      	bne.n	80079f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80079de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e2:	f383 8811 	msr	BASEPRI, r3
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	61fb      	str	r3, [r7, #28]
}
 80079f0:	bf00      	nop
 80079f2:	e7fe      	b.n	80079f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80079f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079fa:	6850      	ldr	r0, [r2, #4]
 80079fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079fe:	6892      	ldr	r2, [r2, #8]
 8007a00:	4611      	mov	r1, r2
 8007a02:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f2c0 80aa 	blt.w	8007b60 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a12:	695b      	ldr	r3, [r3, #20]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d004      	beq.n	8007a22 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1a:	3304      	adds	r3, #4
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f7fe f9f5 	bl	8005e0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a22:	463b      	mov	r3, r7
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7ff ff6b 	bl	8007900 <prvSampleTimeNow>
 8007a2a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2b09      	cmp	r3, #9
 8007a30:	f200 8097 	bhi.w	8007b62 <prvProcessReceivedCommands+0x19e>
 8007a34:	a201      	add	r2, pc, #4	; (adr r2, 8007a3c <prvProcessReceivedCommands+0x78>)
 8007a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a3a:	bf00      	nop
 8007a3c:	08007a65 	.word	0x08007a65
 8007a40:	08007a65 	.word	0x08007a65
 8007a44:	08007a65 	.word	0x08007a65
 8007a48:	08007ad9 	.word	0x08007ad9
 8007a4c:	08007aed 	.word	0x08007aed
 8007a50:	08007b37 	.word	0x08007b37
 8007a54:	08007a65 	.word	0x08007a65
 8007a58:	08007a65 	.word	0x08007a65
 8007a5c:	08007ad9 	.word	0x08007ad9
 8007a60:	08007aed 	.word	0x08007aed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a6a:	f043 0301 	orr.w	r3, r3, #1
 8007a6e:	b2da      	uxtb	r2, r3
 8007a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007a76:	68ba      	ldr	r2, [r7, #8]
 8007a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	18d1      	adds	r1, r2, r3
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a84:	f7ff ff5c 	bl	8007940 <prvInsertTimerInActiveList>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d069      	beq.n	8007b62 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a90:	6a1b      	ldr	r3, [r3, #32]
 8007a92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a94:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a9c:	f003 0304 	and.w	r3, r3, #4
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d05e      	beq.n	8007b62 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007aa4:	68ba      	ldr	r2, [r7, #8]
 8007aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa8:	699b      	ldr	r3, [r3, #24]
 8007aaa:	441a      	add	r2, r3
 8007aac:	2300      	movs	r3, #0
 8007aae:	9300      	str	r3, [sp, #0]
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ab6:	f7ff fe05 	bl	80076c4 <xTimerGenericCommand>
 8007aba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007abc:	6a3b      	ldr	r3, [r7, #32]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d14f      	bne.n	8007b62 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac6:	f383 8811 	msr	BASEPRI, r3
 8007aca:	f3bf 8f6f 	isb	sy
 8007ace:	f3bf 8f4f 	dsb	sy
 8007ad2:	61bb      	str	r3, [r7, #24]
}
 8007ad4:	bf00      	nop
 8007ad6:	e7fe      	b.n	8007ad6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ada:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ade:	f023 0301 	bic.w	r3, r3, #1
 8007ae2:	b2da      	uxtb	r2, r3
 8007ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007aea:	e03a      	b.n	8007b62 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007af2:	f043 0301 	orr.w	r3, r3, #1
 8007af6:	b2da      	uxtb	r2, r3
 8007af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b02:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b06:	699b      	ldr	r3, [r3, #24]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d10a      	bne.n	8007b22 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b10:	f383 8811 	msr	BASEPRI, r3
 8007b14:	f3bf 8f6f 	isb	sy
 8007b18:	f3bf 8f4f 	dsb	sy
 8007b1c:	617b      	str	r3, [r7, #20]
}
 8007b1e:	bf00      	nop
 8007b20:	e7fe      	b.n	8007b20 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b24:	699a      	ldr	r2, [r3, #24]
 8007b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b28:	18d1      	adds	r1, r2, r3
 8007b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b30:	f7ff ff06 	bl	8007940 <prvInsertTimerInActiveList>
					break;
 8007b34:	e015      	b.n	8007b62 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b3c:	f003 0302 	and.w	r3, r3, #2
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d103      	bne.n	8007b4c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007b44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b46:	f000 fbdb 	bl	8008300 <vPortFree>
 8007b4a:	e00a      	b.n	8007b62 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b52:	f023 0301 	bic.w	r3, r3, #1
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007b5e:	e000      	b.n	8007b62 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007b60:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b62:	4b08      	ldr	r3, [pc, #32]	; (8007b84 <prvProcessReceivedCommands+0x1c0>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	1d39      	adds	r1, r7, #4
 8007b68:	2200      	movs	r2, #0
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7fe fc16 	bl	800639c <xQueueReceive>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	f47f af2a 	bne.w	80079cc <prvProcessReceivedCommands+0x8>
	}
}
 8007b78:	bf00      	nop
 8007b7a:	bf00      	nop
 8007b7c:	3730      	adds	r7, #48	; 0x30
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	20001fb4 	.word	0x20001fb4

08007b88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b088      	sub	sp, #32
 8007b8c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b8e:	e048      	b.n	8007c22 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b90:	4b2d      	ldr	r3, [pc, #180]	; (8007c48 <prvSwitchTimerLists+0xc0>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b9a:	4b2b      	ldr	r3, [pc, #172]	; (8007c48 <prvSwitchTimerLists+0xc0>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	3304      	adds	r3, #4
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7fe f92f 	bl	8005e0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6a1b      	ldr	r3, [r3, #32]
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bbc:	f003 0304 	and.w	r3, r3, #4
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d02e      	beq.n	8007c22 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	699b      	ldr	r3, [r3, #24]
 8007bc8:	693a      	ldr	r2, [r7, #16]
 8007bca:	4413      	add	r3, r2
 8007bcc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007bce:	68ba      	ldr	r2, [r7, #8]
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d90e      	bls.n	8007bf4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	68ba      	ldr	r2, [r7, #8]
 8007bda:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007be2:	4b19      	ldr	r3, [pc, #100]	; (8007c48 <prvSwitchTimerLists+0xc0>)
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	3304      	adds	r3, #4
 8007bea:	4619      	mov	r1, r3
 8007bec:	4610      	mov	r0, r2
 8007bee:	f7fe f8d4 	bl	8005d9a <vListInsert>
 8007bf2:	e016      	b.n	8007c22 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	9300      	str	r3, [sp, #0]
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	693a      	ldr	r2, [r7, #16]
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f7ff fd60 	bl	80076c4 <xTimerGenericCommand>
 8007c04:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d10a      	bne.n	8007c22 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c10:	f383 8811 	msr	BASEPRI, r3
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	603b      	str	r3, [r7, #0]
}
 8007c1e:	bf00      	nop
 8007c20:	e7fe      	b.n	8007c20 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c22:	4b09      	ldr	r3, [pc, #36]	; (8007c48 <prvSwitchTimerLists+0xc0>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d1b1      	bne.n	8007b90 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007c2c:	4b06      	ldr	r3, [pc, #24]	; (8007c48 <prvSwitchTimerLists+0xc0>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007c32:	4b06      	ldr	r3, [pc, #24]	; (8007c4c <prvSwitchTimerLists+0xc4>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a04      	ldr	r2, [pc, #16]	; (8007c48 <prvSwitchTimerLists+0xc0>)
 8007c38:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007c3a:	4a04      	ldr	r2, [pc, #16]	; (8007c4c <prvSwitchTimerLists+0xc4>)
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	6013      	str	r3, [r2, #0]
}
 8007c40:	bf00      	nop
 8007c42:	3718      	adds	r7, #24
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	20001fac 	.word	0x20001fac
 8007c4c:	20001fb0 	.word	0x20001fb0

08007c50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007c56:	f000 f965 	bl	8007f24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007c5a:	4b15      	ldr	r3, [pc, #84]	; (8007cb0 <prvCheckForValidListAndQueue+0x60>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d120      	bne.n	8007ca4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007c62:	4814      	ldr	r0, [pc, #80]	; (8007cb4 <prvCheckForValidListAndQueue+0x64>)
 8007c64:	f7fe f848 	bl	8005cf8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007c68:	4813      	ldr	r0, [pc, #76]	; (8007cb8 <prvCheckForValidListAndQueue+0x68>)
 8007c6a:	f7fe f845 	bl	8005cf8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007c6e:	4b13      	ldr	r3, [pc, #76]	; (8007cbc <prvCheckForValidListAndQueue+0x6c>)
 8007c70:	4a10      	ldr	r2, [pc, #64]	; (8007cb4 <prvCheckForValidListAndQueue+0x64>)
 8007c72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007c74:	4b12      	ldr	r3, [pc, #72]	; (8007cc0 <prvCheckForValidListAndQueue+0x70>)
 8007c76:	4a10      	ldr	r2, [pc, #64]	; (8007cb8 <prvCheckForValidListAndQueue+0x68>)
 8007c78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	9300      	str	r3, [sp, #0]
 8007c7e:	4b11      	ldr	r3, [pc, #68]	; (8007cc4 <prvCheckForValidListAndQueue+0x74>)
 8007c80:	4a11      	ldr	r2, [pc, #68]	; (8007cc8 <prvCheckForValidListAndQueue+0x78>)
 8007c82:	2110      	movs	r1, #16
 8007c84:	200a      	movs	r0, #10
 8007c86:	f7fe f953 	bl	8005f30 <xQueueGenericCreateStatic>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	4a08      	ldr	r2, [pc, #32]	; (8007cb0 <prvCheckForValidListAndQueue+0x60>)
 8007c8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007c90:	4b07      	ldr	r3, [pc, #28]	; (8007cb0 <prvCheckForValidListAndQueue+0x60>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d005      	beq.n	8007ca4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007c98:	4b05      	ldr	r3, [pc, #20]	; (8007cb0 <prvCheckForValidListAndQueue+0x60>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	490b      	ldr	r1, [pc, #44]	; (8007ccc <prvCheckForValidListAndQueue+0x7c>)
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7fe fd6c 	bl	800677c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ca4:	f000 f96e 	bl	8007f84 <vPortExitCritical>
}
 8007ca8:	bf00      	nop
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	20001fb4 	.word	0x20001fb4
 8007cb4:	20001f84 	.word	0x20001f84
 8007cb8:	20001f98 	.word	0x20001f98
 8007cbc:	20001fac 	.word	0x20001fac
 8007cc0:	20001fb0 	.word	0x20001fb0
 8007cc4:	20002060 	.word	0x20002060
 8007cc8:	20001fc0 	.word	0x20001fc0
 8007ccc:	0800a390 	.word	0x0800a390

08007cd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	3b04      	subs	r3, #4
 8007ce0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ce8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	3b04      	subs	r3, #4
 8007cee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	f023 0201 	bic.w	r2, r3, #1
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	3b04      	subs	r3, #4
 8007cfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d00:	4a0c      	ldr	r2, [pc, #48]	; (8007d34 <pxPortInitialiseStack+0x64>)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	3b14      	subs	r3, #20
 8007d0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	3b04      	subs	r3, #4
 8007d16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f06f 0202 	mvn.w	r2, #2
 8007d1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	3b20      	subs	r3, #32
 8007d24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d26:	68fb      	ldr	r3, [r7, #12]
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3714      	adds	r7, #20
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr
 8007d34:	08007d39 	.word	0x08007d39

08007d38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b085      	sub	sp, #20
 8007d3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007d42:	4b12      	ldr	r3, [pc, #72]	; (8007d8c <prvTaskExitError+0x54>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d4a:	d00a      	beq.n	8007d62 <prvTaskExitError+0x2a>
	__asm volatile
 8007d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d50:	f383 8811 	msr	BASEPRI, r3
 8007d54:	f3bf 8f6f 	isb	sy
 8007d58:	f3bf 8f4f 	dsb	sy
 8007d5c:	60fb      	str	r3, [r7, #12]
}
 8007d5e:	bf00      	nop
 8007d60:	e7fe      	b.n	8007d60 <prvTaskExitError+0x28>
	__asm volatile
 8007d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d66:	f383 8811 	msr	BASEPRI, r3
 8007d6a:	f3bf 8f6f 	isb	sy
 8007d6e:	f3bf 8f4f 	dsb	sy
 8007d72:	60bb      	str	r3, [r7, #8]
}
 8007d74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007d76:	bf00      	nop
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d0fc      	beq.n	8007d78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007d7e:	bf00      	nop
 8007d80:	bf00      	nop
 8007d82:	3714      	adds	r7, #20
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr
 8007d8c:	2000041c 	.word	0x2000041c

08007d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007d90:	4b07      	ldr	r3, [pc, #28]	; (8007db0 <pxCurrentTCBConst2>)
 8007d92:	6819      	ldr	r1, [r3, #0]
 8007d94:	6808      	ldr	r0, [r1, #0]
 8007d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d9a:	f380 8809 	msr	PSP, r0
 8007d9e:	f3bf 8f6f 	isb	sy
 8007da2:	f04f 0000 	mov.w	r0, #0
 8007da6:	f380 8811 	msr	BASEPRI, r0
 8007daa:	4770      	bx	lr
 8007dac:	f3af 8000 	nop.w

08007db0 <pxCurrentTCBConst2>:
 8007db0:	20001a84 	.word	0x20001a84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007db4:	bf00      	nop
 8007db6:	bf00      	nop

08007db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007db8:	4808      	ldr	r0, [pc, #32]	; (8007ddc <prvPortStartFirstTask+0x24>)
 8007dba:	6800      	ldr	r0, [r0, #0]
 8007dbc:	6800      	ldr	r0, [r0, #0]
 8007dbe:	f380 8808 	msr	MSP, r0
 8007dc2:	f04f 0000 	mov.w	r0, #0
 8007dc6:	f380 8814 	msr	CONTROL, r0
 8007dca:	b662      	cpsie	i
 8007dcc:	b661      	cpsie	f
 8007dce:	f3bf 8f4f 	dsb	sy
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	df00      	svc	0
 8007dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007dda:	bf00      	nop
 8007ddc:	e000ed08 	.word	0xe000ed08

08007de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b086      	sub	sp, #24
 8007de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007de6:	4b46      	ldr	r3, [pc, #280]	; (8007f00 <xPortStartScheduler+0x120>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a46      	ldr	r2, [pc, #280]	; (8007f04 <xPortStartScheduler+0x124>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d10a      	bne.n	8007e06 <xPortStartScheduler+0x26>
	__asm volatile
 8007df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	613b      	str	r3, [r7, #16]
}
 8007e02:	bf00      	nop
 8007e04:	e7fe      	b.n	8007e04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007e06:	4b3e      	ldr	r3, [pc, #248]	; (8007f00 <xPortStartScheduler+0x120>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a3f      	ldr	r2, [pc, #252]	; (8007f08 <xPortStartScheduler+0x128>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d10a      	bne.n	8007e26 <xPortStartScheduler+0x46>
	__asm volatile
 8007e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e14:	f383 8811 	msr	BASEPRI, r3
 8007e18:	f3bf 8f6f 	isb	sy
 8007e1c:	f3bf 8f4f 	dsb	sy
 8007e20:	60fb      	str	r3, [r7, #12]
}
 8007e22:	bf00      	nop
 8007e24:	e7fe      	b.n	8007e24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007e26:	4b39      	ldr	r3, [pc, #228]	; (8007f0c <xPortStartScheduler+0x12c>)
 8007e28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	22ff      	movs	r2, #255	; 0xff
 8007e36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e40:	78fb      	ldrb	r3, [r7, #3]
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e48:	b2da      	uxtb	r2, r3
 8007e4a:	4b31      	ldr	r3, [pc, #196]	; (8007f10 <xPortStartScheduler+0x130>)
 8007e4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e4e:	4b31      	ldr	r3, [pc, #196]	; (8007f14 <xPortStartScheduler+0x134>)
 8007e50:	2207      	movs	r2, #7
 8007e52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e54:	e009      	b.n	8007e6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007e56:	4b2f      	ldr	r3, [pc, #188]	; (8007f14 <xPortStartScheduler+0x134>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	4a2d      	ldr	r2, [pc, #180]	; (8007f14 <xPortStartScheduler+0x134>)
 8007e5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e60:	78fb      	ldrb	r3, [r7, #3]
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	005b      	lsls	r3, r3, #1
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e6a:	78fb      	ldrb	r3, [r7, #3]
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e72:	2b80      	cmp	r3, #128	; 0x80
 8007e74:	d0ef      	beq.n	8007e56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e76:	4b27      	ldr	r3, [pc, #156]	; (8007f14 <xPortStartScheduler+0x134>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f1c3 0307 	rsb	r3, r3, #7
 8007e7e:	2b04      	cmp	r3, #4
 8007e80:	d00a      	beq.n	8007e98 <xPortStartScheduler+0xb8>
	__asm volatile
 8007e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e86:	f383 8811 	msr	BASEPRI, r3
 8007e8a:	f3bf 8f6f 	isb	sy
 8007e8e:	f3bf 8f4f 	dsb	sy
 8007e92:	60bb      	str	r3, [r7, #8]
}
 8007e94:	bf00      	nop
 8007e96:	e7fe      	b.n	8007e96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007e98:	4b1e      	ldr	r3, [pc, #120]	; (8007f14 <xPortStartScheduler+0x134>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	021b      	lsls	r3, r3, #8
 8007e9e:	4a1d      	ldr	r2, [pc, #116]	; (8007f14 <xPortStartScheduler+0x134>)
 8007ea0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ea2:	4b1c      	ldr	r3, [pc, #112]	; (8007f14 <xPortStartScheduler+0x134>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007eaa:	4a1a      	ldr	r2, [pc, #104]	; (8007f14 <xPortStartScheduler+0x134>)
 8007eac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	b2da      	uxtb	r2, r3
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007eb6:	4b18      	ldr	r3, [pc, #96]	; (8007f18 <xPortStartScheduler+0x138>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a17      	ldr	r2, [pc, #92]	; (8007f18 <xPortStartScheduler+0x138>)
 8007ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ec0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ec2:	4b15      	ldr	r3, [pc, #84]	; (8007f18 <xPortStartScheduler+0x138>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a14      	ldr	r2, [pc, #80]	; (8007f18 <xPortStartScheduler+0x138>)
 8007ec8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007ecc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ece:	f000 f8dd 	bl	800808c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ed2:	4b12      	ldr	r3, [pc, #72]	; (8007f1c <xPortStartScheduler+0x13c>)
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007ed8:	f000 f8fc 	bl	80080d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007edc:	4b10      	ldr	r3, [pc, #64]	; (8007f20 <xPortStartScheduler+0x140>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a0f      	ldr	r2, [pc, #60]	; (8007f20 <xPortStartScheduler+0x140>)
 8007ee2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007ee6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ee8:	f7ff ff66 	bl	8007db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007eec:	f7ff f856 	bl	8006f9c <vTaskSwitchContext>
	prvTaskExitError();
 8007ef0:	f7ff ff22 	bl	8007d38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3718      	adds	r7, #24
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	e000ed00 	.word	0xe000ed00
 8007f04:	410fc271 	.word	0x410fc271
 8007f08:	410fc270 	.word	0x410fc270
 8007f0c:	e000e400 	.word	0xe000e400
 8007f10:	200020b0 	.word	0x200020b0
 8007f14:	200020b4 	.word	0x200020b4
 8007f18:	e000ed20 	.word	0xe000ed20
 8007f1c:	2000041c 	.word	0x2000041c
 8007f20:	e000ef34 	.word	0xe000ef34

08007f24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
	__asm volatile
 8007f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2e:	f383 8811 	msr	BASEPRI, r3
 8007f32:	f3bf 8f6f 	isb	sy
 8007f36:	f3bf 8f4f 	dsb	sy
 8007f3a:	607b      	str	r3, [r7, #4]
}
 8007f3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f3e:	4b0f      	ldr	r3, [pc, #60]	; (8007f7c <vPortEnterCritical+0x58>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	3301      	adds	r3, #1
 8007f44:	4a0d      	ldr	r2, [pc, #52]	; (8007f7c <vPortEnterCritical+0x58>)
 8007f46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f48:	4b0c      	ldr	r3, [pc, #48]	; (8007f7c <vPortEnterCritical+0x58>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d10f      	bne.n	8007f70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f50:	4b0b      	ldr	r3, [pc, #44]	; (8007f80 <vPortEnterCritical+0x5c>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00a      	beq.n	8007f70 <vPortEnterCritical+0x4c>
	__asm volatile
 8007f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5e:	f383 8811 	msr	BASEPRI, r3
 8007f62:	f3bf 8f6f 	isb	sy
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	603b      	str	r3, [r7, #0]
}
 8007f6c:	bf00      	nop
 8007f6e:	e7fe      	b.n	8007f6e <vPortEnterCritical+0x4a>
	}
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr
 8007f7c:	2000041c 	.word	0x2000041c
 8007f80:	e000ed04 	.word	0xe000ed04

08007f84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007f8a:	4b12      	ldr	r3, [pc, #72]	; (8007fd4 <vPortExitCritical+0x50>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d10a      	bne.n	8007fa8 <vPortExitCritical+0x24>
	__asm volatile
 8007f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f96:	f383 8811 	msr	BASEPRI, r3
 8007f9a:	f3bf 8f6f 	isb	sy
 8007f9e:	f3bf 8f4f 	dsb	sy
 8007fa2:	607b      	str	r3, [r7, #4]
}
 8007fa4:	bf00      	nop
 8007fa6:	e7fe      	b.n	8007fa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007fa8:	4b0a      	ldr	r3, [pc, #40]	; (8007fd4 <vPortExitCritical+0x50>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	3b01      	subs	r3, #1
 8007fae:	4a09      	ldr	r2, [pc, #36]	; (8007fd4 <vPortExitCritical+0x50>)
 8007fb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007fb2:	4b08      	ldr	r3, [pc, #32]	; (8007fd4 <vPortExitCritical+0x50>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d105      	bne.n	8007fc6 <vPortExitCritical+0x42>
 8007fba:	2300      	movs	r3, #0
 8007fbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	f383 8811 	msr	BASEPRI, r3
}
 8007fc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007fc6:	bf00      	nop
 8007fc8:	370c      	adds	r7, #12
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop
 8007fd4:	2000041c 	.word	0x2000041c
	...

08007fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007fe0:	f3ef 8009 	mrs	r0, PSP
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	4b15      	ldr	r3, [pc, #84]	; (8008040 <pxCurrentTCBConst>)
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	f01e 0f10 	tst.w	lr, #16
 8007ff0:	bf08      	it	eq
 8007ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ffa:	6010      	str	r0, [r2, #0]
 8007ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008000:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008004:	f380 8811 	msr	BASEPRI, r0
 8008008:	f3bf 8f4f 	dsb	sy
 800800c:	f3bf 8f6f 	isb	sy
 8008010:	f7fe ffc4 	bl	8006f9c <vTaskSwitchContext>
 8008014:	f04f 0000 	mov.w	r0, #0
 8008018:	f380 8811 	msr	BASEPRI, r0
 800801c:	bc09      	pop	{r0, r3}
 800801e:	6819      	ldr	r1, [r3, #0]
 8008020:	6808      	ldr	r0, [r1, #0]
 8008022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008026:	f01e 0f10 	tst.w	lr, #16
 800802a:	bf08      	it	eq
 800802c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008030:	f380 8809 	msr	PSP, r0
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	f3af 8000 	nop.w

08008040 <pxCurrentTCBConst>:
 8008040:	20001a84 	.word	0x20001a84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008044:	bf00      	nop
 8008046:	bf00      	nop

08008048 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
	__asm volatile
 800804e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008052:	f383 8811 	msr	BASEPRI, r3
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	607b      	str	r3, [r7, #4]
}
 8008060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008062:	f7fe fee1 	bl	8006e28 <xTaskIncrementTick>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d003      	beq.n	8008074 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800806c:	4b06      	ldr	r3, [pc, #24]	; (8008088 <xPortSysTickHandler+0x40>)
 800806e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008072:	601a      	str	r2, [r3, #0]
 8008074:	2300      	movs	r3, #0
 8008076:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	f383 8811 	msr	BASEPRI, r3
}
 800807e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008080:	bf00      	nop
 8008082:	3708      	adds	r7, #8
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	e000ed04 	.word	0xe000ed04

0800808c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800808c:	b480      	push	{r7}
 800808e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008090:	4b0b      	ldr	r3, [pc, #44]	; (80080c0 <vPortSetupTimerInterrupt+0x34>)
 8008092:	2200      	movs	r2, #0
 8008094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008096:	4b0b      	ldr	r3, [pc, #44]	; (80080c4 <vPortSetupTimerInterrupt+0x38>)
 8008098:	2200      	movs	r2, #0
 800809a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800809c:	4b0a      	ldr	r3, [pc, #40]	; (80080c8 <vPortSetupTimerInterrupt+0x3c>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a0a      	ldr	r2, [pc, #40]	; (80080cc <vPortSetupTimerInterrupt+0x40>)
 80080a2:	fba2 2303 	umull	r2, r3, r2, r3
 80080a6:	099b      	lsrs	r3, r3, #6
 80080a8:	4a09      	ldr	r2, [pc, #36]	; (80080d0 <vPortSetupTimerInterrupt+0x44>)
 80080aa:	3b01      	subs	r3, #1
 80080ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80080ae:	4b04      	ldr	r3, [pc, #16]	; (80080c0 <vPortSetupTimerInterrupt+0x34>)
 80080b0:	2207      	movs	r2, #7
 80080b2:	601a      	str	r2, [r3, #0]
}
 80080b4:	bf00      	nop
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	e000e010 	.word	0xe000e010
 80080c4:	e000e018 	.word	0xe000e018
 80080c8:	200003f0 	.word	0x200003f0
 80080cc:	10624dd3 	.word	0x10624dd3
 80080d0:	e000e014 	.word	0xe000e014

080080d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80080d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80080e4 <vPortEnableVFP+0x10>
 80080d8:	6801      	ldr	r1, [r0, #0]
 80080da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80080de:	6001      	str	r1, [r0, #0]
 80080e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80080e2:	bf00      	nop
 80080e4:	e000ed88 	.word	0xe000ed88

080080e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80080ee:	f3ef 8305 	mrs	r3, IPSR
 80080f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2b0f      	cmp	r3, #15
 80080f8:	d914      	bls.n	8008124 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80080fa:	4a17      	ldr	r2, [pc, #92]	; (8008158 <vPortValidateInterruptPriority+0x70>)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	4413      	add	r3, r2
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008104:	4b15      	ldr	r3, [pc, #84]	; (800815c <vPortValidateInterruptPriority+0x74>)
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	7afa      	ldrb	r2, [r7, #11]
 800810a:	429a      	cmp	r2, r3
 800810c:	d20a      	bcs.n	8008124 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800810e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008112:	f383 8811 	msr	BASEPRI, r3
 8008116:	f3bf 8f6f 	isb	sy
 800811a:	f3bf 8f4f 	dsb	sy
 800811e:	607b      	str	r3, [r7, #4]
}
 8008120:	bf00      	nop
 8008122:	e7fe      	b.n	8008122 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008124:	4b0e      	ldr	r3, [pc, #56]	; (8008160 <vPortValidateInterruptPriority+0x78>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800812c:	4b0d      	ldr	r3, [pc, #52]	; (8008164 <vPortValidateInterruptPriority+0x7c>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	429a      	cmp	r2, r3
 8008132:	d90a      	bls.n	800814a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008138:	f383 8811 	msr	BASEPRI, r3
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	f3bf 8f4f 	dsb	sy
 8008144:	603b      	str	r3, [r7, #0]
}
 8008146:	bf00      	nop
 8008148:	e7fe      	b.n	8008148 <vPortValidateInterruptPriority+0x60>
	}
 800814a:	bf00      	nop
 800814c:	3714      	adds	r7, #20
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr
 8008156:	bf00      	nop
 8008158:	e000e3f0 	.word	0xe000e3f0
 800815c:	200020b0 	.word	0x200020b0
 8008160:	e000ed0c 	.word	0xe000ed0c
 8008164:	200020b4 	.word	0x200020b4

08008168 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b08a      	sub	sp, #40	; 0x28
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008170:	2300      	movs	r3, #0
 8008172:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008174:	f7fe fd9c 	bl	8006cb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008178:	4b5b      	ldr	r3, [pc, #364]	; (80082e8 <pvPortMalloc+0x180>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d101      	bne.n	8008184 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008180:	f000 f920 	bl	80083c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008184:	4b59      	ldr	r3, [pc, #356]	; (80082ec <pvPortMalloc+0x184>)
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4013      	ands	r3, r2
 800818c:	2b00      	cmp	r3, #0
 800818e:	f040 8093 	bne.w	80082b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d01d      	beq.n	80081d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008198:	2208      	movs	r2, #8
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4413      	add	r3, r2
 800819e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f003 0307 	and.w	r3, r3, #7
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d014      	beq.n	80081d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f023 0307 	bic.w	r3, r3, #7
 80081b0:	3308      	adds	r3, #8
 80081b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f003 0307 	and.w	r3, r3, #7
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00a      	beq.n	80081d4 <pvPortMalloc+0x6c>
	__asm volatile
 80081be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c2:	f383 8811 	msr	BASEPRI, r3
 80081c6:	f3bf 8f6f 	isb	sy
 80081ca:	f3bf 8f4f 	dsb	sy
 80081ce:	617b      	str	r3, [r7, #20]
}
 80081d0:	bf00      	nop
 80081d2:	e7fe      	b.n	80081d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d06e      	beq.n	80082b8 <pvPortMalloc+0x150>
 80081da:	4b45      	ldr	r3, [pc, #276]	; (80082f0 <pvPortMalloc+0x188>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d869      	bhi.n	80082b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80081e4:	4b43      	ldr	r3, [pc, #268]	; (80082f4 <pvPortMalloc+0x18c>)
 80081e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80081e8:	4b42      	ldr	r3, [pc, #264]	; (80082f4 <pvPortMalloc+0x18c>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081ee:	e004      	b.n	80081fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80081f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80081f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	429a      	cmp	r2, r3
 8008202:	d903      	bls.n	800820c <pvPortMalloc+0xa4>
 8008204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d1f1      	bne.n	80081f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800820c:	4b36      	ldr	r3, [pc, #216]	; (80082e8 <pvPortMalloc+0x180>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008212:	429a      	cmp	r2, r3
 8008214:	d050      	beq.n	80082b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008216:	6a3b      	ldr	r3, [r7, #32]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2208      	movs	r2, #8
 800821c:	4413      	add	r3, r2
 800821e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	6a3b      	ldr	r3, [r7, #32]
 8008226:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822a:	685a      	ldr	r2, [r3, #4]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	1ad2      	subs	r2, r2, r3
 8008230:	2308      	movs	r3, #8
 8008232:	005b      	lsls	r3, r3, #1
 8008234:	429a      	cmp	r2, r3
 8008236:	d91f      	bls.n	8008278 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4413      	add	r3, r2
 800823e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	f003 0307 	and.w	r3, r3, #7
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00a      	beq.n	8008260 <pvPortMalloc+0xf8>
	__asm volatile
 800824a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824e:	f383 8811 	msr	BASEPRI, r3
 8008252:	f3bf 8f6f 	isb	sy
 8008256:	f3bf 8f4f 	dsb	sy
 800825a:	613b      	str	r3, [r7, #16]
}
 800825c:	bf00      	nop
 800825e:	e7fe      	b.n	800825e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008262:	685a      	ldr	r2, [r3, #4]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	1ad2      	subs	r2, r2, r3
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800826c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008272:	69b8      	ldr	r0, [r7, #24]
 8008274:	f000 f908 	bl	8008488 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008278:	4b1d      	ldr	r3, [pc, #116]	; (80082f0 <pvPortMalloc+0x188>)
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	1ad3      	subs	r3, r2, r3
 8008282:	4a1b      	ldr	r2, [pc, #108]	; (80082f0 <pvPortMalloc+0x188>)
 8008284:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008286:	4b1a      	ldr	r3, [pc, #104]	; (80082f0 <pvPortMalloc+0x188>)
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	4b1b      	ldr	r3, [pc, #108]	; (80082f8 <pvPortMalloc+0x190>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	429a      	cmp	r2, r3
 8008290:	d203      	bcs.n	800829a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008292:	4b17      	ldr	r3, [pc, #92]	; (80082f0 <pvPortMalloc+0x188>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a18      	ldr	r2, [pc, #96]	; (80082f8 <pvPortMalloc+0x190>)
 8008298:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800829a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829c:	685a      	ldr	r2, [r3, #4]
 800829e:	4b13      	ldr	r3, [pc, #76]	; (80082ec <pvPortMalloc+0x184>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	431a      	orrs	r2, r3
 80082a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80082a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082aa:	2200      	movs	r2, #0
 80082ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80082ae:	4b13      	ldr	r3, [pc, #76]	; (80082fc <pvPortMalloc+0x194>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	3301      	adds	r3, #1
 80082b4:	4a11      	ldr	r2, [pc, #68]	; (80082fc <pvPortMalloc+0x194>)
 80082b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80082b8:	f7fe fd08 	bl	8006ccc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	f003 0307 	and.w	r3, r3, #7
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00a      	beq.n	80082dc <pvPortMalloc+0x174>
	__asm volatile
 80082c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ca:	f383 8811 	msr	BASEPRI, r3
 80082ce:	f3bf 8f6f 	isb	sy
 80082d2:	f3bf 8f4f 	dsb	sy
 80082d6:	60fb      	str	r3, [r7, #12]
}
 80082d8:	bf00      	nop
 80082da:	e7fe      	b.n	80082da <pvPortMalloc+0x172>
	return pvReturn;
 80082dc:	69fb      	ldr	r3, [r7, #28]
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3728      	adds	r7, #40	; 0x28
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	20003830 	.word	0x20003830
 80082ec:	20003844 	.word	0x20003844
 80082f0:	20003834 	.word	0x20003834
 80082f4:	20003828 	.word	0x20003828
 80082f8:	20003838 	.word	0x20003838
 80082fc:	2000383c 	.word	0x2000383c

08008300 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b086      	sub	sp, #24
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d04d      	beq.n	80083ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008312:	2308      	movs	r3, #8
 8008314:	425b      	negs	r3, r3
 8008316:	697a      	ldr	r2, [r7, #20]
 8008318:	4413      	add	r3, r2
 800831a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	685a      	ldr	r2, [r3, #4]
 8008324:	4b24      	ldr	r3, [pc, #144]	; (80083b8 <vPortFree+0xb8>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4013      	ands	r3, r2
 800832a:	2b00      	cmp	r3, #0
 800832c:	d10a      	bne.n	8008344 <vPortFree+0x44>
	__asm volatile
 800832e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008332:	f383 8811 	msr	BASEPRI, r3
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	60fb      	str	r3, [r7, #12]
}
 8008340:	bf00      	nop
 8008342:	e7fe      	b.n	8008342 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00a      	beq.n	8008362 <vPortFree+0x62>
	__asm volatile
 800834c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008350:	f383 8811 	msr	BASEPRI, r3
 8008354:	f3bf 8f6f 	isb	sy
 8008358:	f3bf 8f4f 	dsb	sy
 800835c:	60bb      	str	r3, [r7, #8]
}
 800835e:	bf00      	nop
 8008360:	e7fe      	b.n	8008360 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	685a      	ldr	r2, [r3, #4]
 8008366:	4b14      	ldr	r3, [pc, #80]	; (80083b8 <vPortFree+0xb8>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4013      	ands	r3, r2
 800836c:	2b00      	cmp	r3, #0
 800836e:	d01e      	beq.n	80083ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d11a      	bne.n	80083ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	685a      	ldr	r2, [r3, #4]
 800837c:	4b0e      	ldr	r3, [pc, #56]	; (80083b8 <vPortFree+0xb8>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	43db      	mvns	r3, r3
 8008382:	401a      	ands	r2, r3
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008388:	f7fe fc92 	bl	8006cb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	685a      	ldr	r2, [r3, #4]
 8008390:	4b0a      	ldr	r3, [pc, #40]	; (80083bc <vPortFree+0xbc>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4413      	add	r3, r2
 8008396:	4a09      	ldr	r2, [pc, #36]	; (80083bc <vPortFree+0xbc>)
 8008398:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800839a:	6938      	ldr	r0, [r7, #16]
 800839c:	f000 f874 	bl	8008488 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80083a0:	4b07      	ldr	r3, [pc, #28]	; (80083c0 <vPortFree+0xc0>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	3301      	adds	r3, #1
 80083a6:	4a06      	ldr	r2, [pc, #24]	; (80083c0 <vPortFree+0xc0>)
 80083a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80083aa:	f7fe fc8f 	bl	8006ccc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80083ae:	bf00      	nop
 80083b0:	3718      	adds	r7, #24
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	20003844 	.word	0x20003844
 80083bc:	20003834 	.word	0x20003834
 80083c0:	20003840 	.word	0x20003840

080083c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80083ca:	f241 7370 	movw	r3, #6000	; 0x1770
 80083ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80083d0:	4b27      	ldr	r3, [pc, #156]	; (8008470 <prvHeapInit+0xac>)
 80083d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f003 0307 	and.w	r3, r3, #7
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00c      	beq.n	80083f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	3307      	adds	r3, #7
 80083e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f023 0307 	bic.w	r3, r3, #7
 80083ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80083ec:	68ba      	ldr	r2, [r7, #8]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	4a1f      	ldr	r2, [pc, #124]	; (8008470 <prvHeapInit+0xac>)
 80083f4:	4413      	add	r3, r2
 80083f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80083fc:	4a1d      	ldr	r2, [pc, #116]	; (8008474 <prvHeapInit+0xb0>)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008402:	4b1c      	ldr	r3, [pc, #112]	; (8008474 <prvHeapInit+0xb0>)
 8008404:	2200      	movs	r2, #0
 8008406:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	4413      	add	r3, r2
 800840e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008410:	2208      	movs	r2, #8
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	1a9b      	subs	r3, r3, r2
 8008416:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f023 0307 	bic.w	r3, r3, #7
 800841e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	4a15      	ldr	r2, [pc, #84]	; (8008478 <prvHeapInit+0xb4>)
 8008424:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008426:	4b14      	ldr	r3, [pc, #80]	; (8008478 <prvHeapInit+0xb4>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2200      	movs	r2, #0
 800842c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800842e:	4b12      	ldr	r3, [pc, #72]	; (8008478 <prvHeapInit+0xb4>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2200      	movs	r2, #0
 8008434:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	68fa      	ldr	r2, [r7, #12]
 800843e:	1ad2      	subs	r2, r2, r3
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008444:	4b0c      	ldr	r3, [pc, #48]	; (8008478 <prvHeapInit+0xb4>)
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	4a0a      	ldr	r2, [pc, #40]	; (800847c <prvHeapInit+0xb8>)
 8008452:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	4a09      	ldr	r2, [pc, #36]	; (8008480 <prvHeapInit+0xbc>)
 800845a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800845c:	4b09      	ldr	r3, [pc, #36]	; (8008484 <prvHeapInit+0xc0>)
 800845e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008462:	601a      	str	r2, [r3, #0]
}
 8008464:	bf00      	nop
 8008466:	3714      	adds	r7, #20
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr
 8008470:	200020b8 	.word	0x200020b8
 8008474:	20003828 	.word	0x20003828
 8008478:	20003830 	.word	0x20003830
 800847c:	20003838 	.word	0x20003838
 8008480:	20003834 	.word	0x20003834
 8008484:	20003844 	.word	0x20003844

08008488 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008490:	4b28      	ldr	r3, [pc, #160]	; (8008534 <prvInsertBlockIntoFreeList+0xac>)
 8008492:	60fb      	str	r3, [r7, #12]
 8008494:	e002      	b.n	800849c <prvInsertBlockIntoFreeList+0x14>
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	60fb      	str	r3, [r7, #12]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d8f7      	bhi.n	8008496 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	68ba      	ldr	r2, [r7, #8]
 80084b0:	4413      	add	r3, r2
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d108      	bne.n	80084ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	685a      	ldr	r2, [r3, #4]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	441a      	add	r2, r3
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	68ba      	ldr	r2, [r7, #8]
 80084d4:	441a      	add	r2, r3
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d118      	bne.n	8008510 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	4b15      	ldr	r3, [pc, #84]	; (8008538 <prvInsertBlockIntoFreeList+0xb0>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d00d      	beq.n	8008506 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	685a      	ldr	r2, [r3, #4]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	441a      	add	r2, r3
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	601a      	str	r2, [r3, #0]
 8008504:	e008      	b.n	8008518 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008506:	4b0c      	ldr	r3, [pc, #48]	; (8008538 <prvInsertBlockIntoFreeList+0xb0>)
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	601a      	str	r2, [r3, #0]
 800850e:	e003      	b.n	8008518 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	429a      	cmp	r2, r3
 800851e:	d002      	beq.n	8008526 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008526:	bf00      	nop
 8008528:	3714      	adds	r7, #20
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr
 8008532:	bf00      	nop
 8008534:	20003828 	.word	0x20003828
 8008538:	20003830 	.word	0x20003830

0800853c <atoi>:
 800853c:	220a      	movs	r2, #10
 800853e:	2100      	movs	r1, #0
 8008540:	f000 ba28 	b.w	8008994 <strtol>

08008544 <__errno>:
 8008544:	4b01      	ldr	r3, [pc, #4]	; (800854c <__errno+0x8>)
 8008546:	6818      	ldr	r0, [r3, #0]
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	20000420 	.word	0x20000420

08008550 <__libc_init_array>:
 8008550:	b570      	push	{r4, r5, r6, lr}
 8008552:	4d0d      	ldr	r5, [pc, #52]	; (8008588 <__libc_init_array+0x38>)
 8008554:	4c0d      	ldr	r4, [pc, #52]	; (800858c <__libc_init_array+0x3c>)
 8008556:	1b64      	subs	r4, r4, r5
 8008558:	10a4      	asrs	r4, r4, #2
 800855a:	2600      	movs	r6, #0
 800855c:	42a6      	cmp	r6, r4
 800855e:	d109      	bne.n	8008574 <__libc_init_array+0x24>
 8008560:	4d0b      	ldr	r5, [pc, #44]	; (8008590 <__libc_init_array+0x40>)
 8008562:	4c0c      	ldr	r4, [pc, #48]	; (8008594 <__libc_init_array+0x44>)
 8008564:	f001 fe18 	bl	800a198 <_init>
 8008568:	1b64      	subs	r4, r4, r5
 800856a:	10a4      	asrs	r4, r4, #2
 800856c:	2600      	movs	r6, #0
 800856e:	42a6      	cmp	r6, r4
 8008570:	d105      	bne.n	800857e <__libc_init_array+0x2e>
 8008572:	bd70      	pop	{r4, r5, r6, pc}
 8008574:	f855 3b04 	ldr.w	r3, [r5], #4
 8008578:	4798      	blx	r3
 800857a:	3601      	adds	r6, #1
 800857c:	e7ee      	b.n	800855c <__libc_init_array+0xc>
 800857e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008582:	4798      	blx	r3
 8008584:	3601      	adds	r6, #1
 8008586:	e7f2      	b.n	800856e <__libc_init_array+0x1e>
 8008588:	0800a6ec 	.word	0x0800a6ec
 800858c:	0800a6ec 	.word	0x0800a6ec
 8008590:	0800a6ec 	.word	0x0800a6ec
 8008594:	0800a6f0 	.word	0x0800a6f0

08008598 <memcpy>:
 8008598:	440a      	add	r2, r1
 800859a:	4291      	cmp	r1, r2
 800859c:	f100 33ff 	add.w	r3, r0, #4294967295
 80085a0:	d100      	bne.n	80085a4 <memcpy+0xc>
 80085a2:	4770      	bx	lr
 80085a4:	b510      	push	{r4, lr}
 80085a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085ae:	4291      	cmp	r1, r2
 80085b0:	d1f9      	bne.n	80085a6 <memcpy+0xe>
 80085b2:	bd10      	pop	{r4, pc}

080085b4 <memset>:
 80085b4:	4402      	add	r2, r0
 80085b6:	4603      	mov	r3, r0
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d100      	bne.n	80085be <memset+0xa>
 80085bc:	4770      	bx	lr
 80085be:	f803 1b01 	strb.w	r1, [r3], #1
 80085c2:	e7f9      	b.n	80085b8 <memset+0x4>

080085c4 <iprintf>:
 80085c4:	b40f      	push	{r0, r1, r2, r3}
 80085c6:	4b0a      	ldr	r3, [pc, #40]	; (80085f0 <iprintf+0x2c>)
 80085c8:	b513      	push	{r0, r1, r4, lr}
 80085ca:	681c      	ldr	r4, [r3, #0]
 80085cc:	b124      	cbz	r4, 80085d8 <iprintf+0x14>
 80085ce:	69a3      	ldr	r3, [r4, #24]
 80085d0:	b913      	cbnz	r3, 80085d8 <iprintf+0x14>
 80085d2:	4620      	mov	r0, r4
 80085d4:	f000 fc02 	bl	8008ddc <__sinit>
 80085d8:	ab05      	add	r3, sp, #20
 80085da:	9a04      	ldr	r2, [sp, #16]
 80085dc:	68a1      	ldr	r1, [r4, #8]
 80085de:	9301      	str	r3, [sp, #4]
 80085e0:	4620      	mov	r0, r4
 80085e2:	f001 f809 	bl	80095f8 <_vfiprintf_r>
 80085e6:	b002      	add	sp, #8
 80085e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085ec:	b004      	add	sp, #16
 80085ee:	4770      	bx	lr
 80085f0:	20000420 	.word	0x20000420

080085f4 <_puts_r>:
 80085f4:	b570      	push	{r4, r5, r6, lr}
 80085f6:	460e      	mov	r6, r1
 80085f8:	4605      	mov	r5, r0
 80085fa:	b118      	cbz	r0, 8008604 <_puts_r+0x10>
 80085fc:	6983      	ldr	r3, [r0, #24]
 80085fe:	b90b      	cbnz	r3, 8008604 <_puts_r+0x10>
 8008600:	f000 fbec 	bl	8008ddc <__sinit>
 8008604:	69ab      	ldr	r3, [r5, #24]
 8008606:	68ac      	ldr	r4, [r5, #8]
 8008608:	b913      	cbnz	r3, 8008610 <_puts_r+0x1c>
 800860a:	4628      	mov	r0, r5
 800860c:	f000 fbe6 	bl	8008ddc <__sinit>
 8008610:	4b2c      	ldr	r3, [pc, #176]	; (80086c4 <_puts_r+0xd0>)
 8008612:	429c      	cmp	r4, r3
 8008614:	d120      	bne.n	8008658 <_puts_r+0x64>
 8008616:	686c      	ldr	r4, [r5, #4]
 8008618:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800861a:	07db      	lsls	r3, r3, #31
 800861c:	d405      	bmi.n	800862a <_puts_r+0x36>
 800861e:	89a3      	ldrh	r3, [r4, #12]
 8008620:	0598      	lsls	r0, r3, #22
 8008622:	d402      	bmi.n	800862a <_puts_r+0x36>
 8008624:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008626:	f000 fc89 	bl	8008f3c <__retarget_lock_acquire_recursive>
 800862a:	89a3      	ldrh	r3, [r4, #12]
 800862c:	0719      	lsls	r1, r3, #28
 800862e:	d51d      	bpl.n	800866c <_puts_r+0x78>
 8008630:	6923      	ldr	r3, [r4, #16]
 8008632:	b1db      	cbz	r3, 800866c <_puts_r+0x78>
 8008634:	3e01      	subs	r6, #1
 8008636:	68a3      	ldr	r3, [r4, #8]
 8008638:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800863c:	3b01      	subs	r3, #1
 800863e:	60a3      	str	r3, [r4, #8]
 8008640:	bb39      	cbnz	r1, 8008692 <_puts_r+0x9e>
 8008642:	2b00      	cmp	r3, #0
 8008644:	da38      	bge.n	80086b8 <_puts_r+0xc4>
 8008646:	4622      	mov	r2, r4
 8008648:	210a      	movs	r1, #10
 800864a:	4628      	mov	r0, r5
 800864c:	f000 f9ac 	bl	80089a8 <__swbuf_r>
 8008650:	3001      	adds	r0, #1
 8008652:	d011      	beq.n	8008678 <_puts_r+0x84>
 8008654:	250a      	movs	r5, #10
 8008656:	e011      	b.n	800867c <_puts_r+0x88>
 8008658:	4b1b      	ldr	r3, [pc, #108]	; (80086c8 <_puts_r+0xd4>)
 800865a:	429c      	cmp	r4, r3
 800865c:	d101      	bne.n	8008662 <_puts_r+0x6e>
 800865e:	68ac      	ldr	r4, [r5, #8]
 8008660:	e7da      	b.n	8008618 <_puts_r+0x24>
 8008662:	4b1a      	ldr	r3, [pc, #104]	; (80086cc <_puts_r+0xd8>)
 8008664:	429c      	cmp	r4, r3
 8008666:	bf08      	it	eq
 8008668:	68ec      	ldreq	r4, [r5, #12]
 800866a:	e7d5      	b.n	8008618 <_puts_r+0x24>
 800866c:	4621      	mov	r1, r4
 800866e:	4628      	mov	r0, r5
 8008670:	f000 f9fe 	bl	8008a70 <__swsetup_r>
 8008674:	2800      	cmp	r0, #0
 8008676:	d0dd      	beq.n	8008634 <_puts_r+0x40>
 8008678:	f04f 35ff 	mov.w	r5, #4294967295
 800867c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800867e:	07da      	lsls	r2, r3, #31
 8008680:	d405      	bmi.n	800868e <_puts_r+0x9a>
 8008682:	89a3      	ldrh	r3, [r4, #12]
 8008684:	059b      	lsls	r3, r3, #22
 8008686:	d402      	bmi.n	800868e <_puts_r+0x9a>
 8008688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800868a:	f000 fc58 	bl	8008f3e <__retarget_lock_release_recursive>
 800868e:	4628      	mov	r0, r5
 8008690:	bd70      	pop	{r4, r5, r6, pc}
 8008692:	2b00      	cmp	r3, #0
 8008694:	da04      	bge.n	80086a0 <_puts_r+0xac>
 8008696:	69a2      	ldr	r2, [r4, #24]
 8008698:	429a      	cmp	r2, r3
 800869a:	dc06      	bgt.n	80086aa <_puts_r+0xb6>
 800869c:	290a      	cmp	r1, #10
 800869e:	d004      	beq.n	80086aa <_puts_r+0xb6>
 80086a0:	6823      	ldr	r3, [r4, #0]
 80086a2:	1c5a      	adds	r2, r3, #1
 80086a4:	6022      	str	r2, [r4, #0]
 80086a6:	7019      	strb	r1, [r3, #0]
 80086a8:	e7c5      	b.n	8008636 <_puts_r+0x42>
 80086aa:	4622      	mov	r2, r4
 80086ac:	4628      	mov	r0, r5
 80086ae:	f000 f97b 	bl	80089a8 <__swbuf_r>
 80086b2:	3001      	adds	r0, #1
 80086b4:	d1bf      	bne.n	8008636 <_puts_r+0x42>
 80086b6:	e7df      	b.n	8008678 <_puts_r+0x84>
 80086b8:	6823      	ldr	r3, [r4, #0]
 80086ba:	250a      	movs	r5, #10
 80086bc:	1c5a      	adds	r2, r3, #1
 80086be:	6022      	str	r2, [r4, #0]
 80086c0:	701d      	strb	r5, [r3, #0]
 80086c2:	e7db      	b.n	800867c <_puts_r+0x88>
 80086c4:	0800a654 	.word	0x0800a654
 80086c8:	0800a674 	.word	0x0800a674
 80086cc:	0800a634 	.word	0x0800a634

080086d0 <puts>:
 80086d0:	4b02      	ldr	r3, [pc, #8]	; (80086dc <puts+0xc>)
 80086d2:	4601      	mov	r1, r0
 80086d4:	6818      	ldr	r0, [r3, #0]
 80086d6:	f7ff bf8d 	b.w	80085f4 <_puts_r>
 80086da:	bf00      	nop
 80086dc:	20000420 	.word	0x20000420

080086e0 <siscanf>:
 80086e0:	b40e      	push	{r1, r2, r3}
 80086e2:	b510      	push	{r4, lr}
 80086e4:	b09f      	sub	sp, #124	; 0x7c
 80086e6:	ac21      	add	r4, sp, #132	; 0x84
 80086e8:	f44f 7101 	mov.w	r1, #516	; 0x204
 80086ec:	f854 2b04 	ldr.w	r2, [r4], #4
 80086f0:	9201      	str	r2, [sp, #4]
 80086f2:	f8ad 101c 	strh.w	r1, [sp, #28]
 80086f6:	9004      	str	r0, [sp, #16]
 80086f8:	9008      	str	r0, [sp, #32]
 80086fa:	f7f7 fd73 	bl	80001e4 <strlen>
 80086fe:	4b0c      	ldr	r3, [pc, #48]	; (8008730 <siscanf+0x50>)
 8008700:	9005      	str	r0, [sp, #20]
 8008702:	9009      	str	r0, [sp, #36]	; 0x24
 8008704:	930d      	str	r3, [sp, #52]	; 0x34
 8008706:	480b      	ldr	r0, [pc, #44]	; (8008734 <siscanf+0x54>)
 8008708:	9a01      	ldr	r2, [sp, #4]
 800870a:	6800      	ldr	r0, [r0, #0]
 800870c:	9403      	str	r4, [sp, #12]
 800870e:	2300      	movs	r3, #0
 8008710:	9311      	str	r3, [sp, #68]	; 0x44
 8008712:	9316      	str	r3, [sp, #88]	; 0x58
 8008714:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008718:	f8ad 301e 	strh.w	r3, [sp, #30]
 800871c:	a904      	add	r1, sp, #16
 800871e:	4623      	mov	r3, r4
 8008720:	f000 fdc8 	bl	80092b4 <__ssvfiscanf_r>
 8008724:	b01f      	add	sp, #124	; 0x7c
 8008726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800872a:	b003      	add	sp, #12
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	0800875b 	.word	0x0800875b
 8008734:	20000420 	.word	0x20000420

08008738 <__sread>:
 8008738:	b510      	push	{r4, lr}
 800873a:	460c      	mov	r4, r1
 800873c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008740:	f001 fb70 	bl	8009e24 <_read_r>
 8008744:	2800      	cmp	r0, #0
 8008746:	bfab      	itete	ge
 8008748:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800874a:	89a3      	ldrhlt	r3, [r4, #12]
 800874c:	181b      	addge	r3, r3, r0
 800874e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008752:	bfac      	ite	ge
 8008754:	6563      	strge	r3, [r4, #84]	; 0x54
 8008756:	81a3      	strhlt	r3, [r4, #12]
 8008758:	bd10      	pop	{r4, pc}

0800875a <__seofread>:
 800875a:	2000      	movs	r0, #0
 800875c:	4770      	bx	lr

0800875e <__swrite>:
 800875e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008762:	461f      	mov	r7, r3
 8008764:	898b      	ldrh	r3, [r1, #12]
 8008766:	05db      	lsls	r3, r3, #23
 8008768:	4605      	mov	r5, r0
 800876a:	460c      	mov	r4, r1
 800876c:	4616      	mov	r6, r2
 800876e:	d505      	bpl.n	800877c <__swrite+0x1e>
 8008770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008774:	2302      	movs	r3, #2
 8008776:	2200      	movs	r2, #0
 8008778:	f000 fbe2 	bl	8008f40 <_lseek_r>
 800877c:	89a3      	ldrh	r3, [r4, #12]
 800877e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008782:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008786:	81a3      	strh	r3, [r4, #12]
 8008788:	4632      	mov	r2, r6
 800878a:	463b      	mov	r3, r7
 800878c:	4628      	mov	r0, r5
 800878e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008792:	f000 b95b 	b.w	8008a4c <_write_r>

08008796 <__sseek>:
 8008796:	b510      	push	{r4, lr}
 8008798:	460c      	mov	r4, r1
 800879a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800879e:	f000 fbcf 	bl	8008f40 <_lseek_r>
 80087a2:	1c43      	adds	r3, r0, #1
 80087a4:	89a3      	ldrh	r3, [r4, #12]
 80087a6:	bf15      	itete	ne
 80087a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80087aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80087ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80087b2:	81a3      	strheq	r3, [r4, #12]
 80087b4:	bf18      	it	ne
 80087b6:	81a3      	strhne	r3, [r4, #12]
 80087b8:	bd10      	pop	{r4, pc}

080087ba <__sclose>:
 80087ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087be:	f000 b9e3 	b.w	8008b88 <_close_r>

080087c2 <strcpy>:
 80087c2:	4603      	mov	r3, r0
 80087c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087c8:	f803 2b01 	strb.w	r2, [r3], #1
 80087cc:	2a00      	cmp	r2, #0
 80087ce:	d1f9      	bne.n	80087c4 <strcpy+0x2>
 80087d0:	4770      	bx	lr
	...

080087d4 <strtok>:
 80087d4:	4b16      	ldr	r3, [pc, #88]	; (8008830 <strtok+0x5c>)
 80087d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80087d8:	681e      	ldr	r6, [r3, #0]
 80087da:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80087dc:	4605      	mov	r5, r0
 80087de:	b9fc      	cbnz	r4, 8008820 <strtok+0x4c>
 80087e0:	2050      	movs	r0, #80	; 0x50
 80087e2:	9101      	str	r1, [sp, #4]
 80087e4:	f000 fc24 	bl	8009030 <malloc>
 80087e8:	9901      	ldr	r1, [sp, #4]
 80087ea:	65b0      	str	r0, [r6, #88]	; 0x58
 80087ec:	4602      	mov	r2, r0
 80087ee:	b920      	cbnz	r0, 80087fa <strtok+0x26>
 80087f0:	4b10      	ldr	r3, [pc, #64]	; (8008834 <strtok+0x60>)
 80087f2:	4811      	ldr	r0, [pc, #68]	; (8008838 <strtok+0x64>)
 80087f4:	2157      	movs	r1, #87	; 0x57
 80087f6:	f000 f9a9 	bl	8008b4c <__assert_func>
 80087fa:	e9c0 4400 	strd	r4, r4, [r0]
 80087fe:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008802:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008806:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800880a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800880e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008812:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008816:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800881a:	6184      	str	r4, [r0, #24]
 800881c:	7704      	strb	r4, [r0, #28]
 800881e:	6244      	str	r4, [r0, #36]	; 0x24
 8008820:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8008822:	2301      	movs	r3, #1
 8008824:	4628      	mov	r0, r5
 8008826:	b002      	add	sp, #8
 8008828:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800882c:	f000 b806 	b.w	800883c <__strtok_r>
 8008830:	20000420 	.word	0x20000420
 8008834:	0800a480 	.word	0x0800a480
 8008838:	0800a497 	.word	0x0800a497

0800883c <__strtok_r>:
 800883c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800883e:	b908      	cbnz	r0, 8008844 <__strtok_r+0x8>
 8008840:	6810      	ldr	r0, [r2, #0]
 8008842:	b188      	cbz	r0, 8008868 <__strtok_r+0x2c>
 8008844:	4604      	mov	r4, r0
 8008846:	4620      	mov	r0, r4
 8008848:	f814 5b01 	ldrb.w	r5, [r4], #1
 800884c:	460f      	mov	r7, r1
 800884e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008852:	b91e      	cbnz	r6, 800885c <__strtok_r+0x20>
 8008854:	b965      	cbnz	r5, 8008870 <__strtok_r+0x34>
 8008856:	6015      	str	r5, [r2, #0]
 8008858:	4628      	mov	r0, r5
 800885a:	e005      	b.n	8008868 <__strtok_r+0x2c>
 800885c:	42b5      	cmp	r5, r6
 800885e:	d1f6      	bne.n	800884e <__strtok_r+0x12>
 8008860:	2b00      	cmp	r3, #0
 8008862:	d1f0      	bne.n	8008846 <__strtok_r+0xa>
 8008864:	6014      	str	r4, [r2, #0]
 8008866:	7003      	strb	r3, [r0, #0]
 8008868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800886a:	461c      	mov	r4, r3
 800886c:	e00c      	b.n	8008888 <__strtok_r+0x4c>
 800886e:	b915      	cbnz	r5, 8008876 <__strtok_r+0x3a>
 8008870:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008874:	460e      	mov	r6, r1
 8008876:	f816 5b01 	ldrb.w	r5, [r6], #1
 800887a:	42ab      	cmp	r3, r5
 800887c:	d1f7      	bne.n	800886e <__strtok_r+0x32>
 800887e:	2b00      	cmp	r3, #0
 8008880:	d0f3      	beq.n	800886a <__strtok_r+0x2e>
 8008882:	2300      	movs	r3, #0
 8008884:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008888:	6014      	str	r4, [r2, #0]
 800888a:	e7ed      	b.n	8008868 <__strtok_r+0x2c>

0800888c <_strtol_l.constprop.0>:
 800888c:	2b01      	cmp	r3, #1
 800888e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008892:	d001      	beq.n	8008898 <_strtol_l.constprop.0+0xc>
 8008894:	2b24      	cmp	r3, #36	; 0x24
 8008896:	d906      	bls.n	80088a6 <_strtol_l.constprop.0+0x1a>
 8008898:	f7ff fe54 	bl	8008544 <__errno>
 800889c:	2316      	movs	r3, #22
 800889e:	6003      	str	r3, [r0, #0]
 80088a0:	2000      	movs	r0, #0
 80088a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088a6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800898c <_strtol_l.constprop.0+0x100>
 80088aa:	460d      	mov	r5, r1
 80088ac:	462e      	mov	r6, r5
 80088ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80088b2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80088b6:	f017 0708 	ands.w	r7, r7, #8
 80088ba:	d1f7      	bne.n	80088ac <_strtol_l.constprop.0+0x20>
 80088bc:	2c2d      	cmp	r4, #45	; 0x2d
 80088be:	d132      	bne.n	8008926 <_strtol_l.constprop.0+0x9a>
 80088c0:	782c      	ldrb	r4, [r5, #0]
 80088c2:	2701      	movs	r7, #1
 80088c4:	1cb5      	adds	r5, r6, #2
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d05b      	beq.n	8008982 <_strtol_l.constprop.0+0xf6>
 80088ca:	2b10      	cmp	r3, #16
 80088cc:	d109      	bne.n	80088e2 <_strtol_l.constprop.0+0x56>
 80088ce:	2c30      	cmp	r4, #48	; 0x30
 80088d0:	d107      	bne.n	80088e2 <_strtol_l.constprop.0+0x56>
 80088d2:	782c      	ldrb	r4, [r5, #0]
 80088d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80088d8:	2c58      	cmp	r4, #88	; 0x58
 80088da:	d14d      	bne.n	8008978 <_strtol_l.constprop.0+0xec>
 80088dc:	786c      	ldrb	r4, [r5, #1]
 80088de:	2310      	movs	r3, #16
 80088e0:	3502      	adds	r5, #2
 80088e2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80088e6:	f108 38ff 	add.w	r8, r8, #4294967295
 80088ea:	f04f 0c00 	mov.w	ip, #0
 80088ee:	fbb8 f9f3 	udiv	r9, r8, r3
 80088f2:	4666      	mov	r6, ip
 80088f4:	fb03 8a19 	mls	sl, r3, r9, r8
 80088f8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80088fc:	f1be 0f09 	cmp.w	lr, #9
 8008900:	d816      	bhi.n	8008930 <_strtol_l.constprop.0+0xa4>
 8008902:	4674      	mov	r4, lr
 8008904:	42a3      	cmp	r3, r4
 8008906:	dd24      	ble.n	8008952 <_strtol_l.constprop.0+0xc6>
 8008908:	f1bc 0f00 	cmp.w	ip, #0
 800890c:	db1e      	blt.n	800894c <_strtol_l.constprop.0+0xc0>
 800890e:	45b1      	cmp	r9, r6
 8008910:	d31c      	bcc.n	800894c <_strtol_l.constprop.0+0xc0>
 8008912:	d101      	bne.n	8008918 <_strtol_l.constprop.0+0x8c>
 8008914:	45a2      	cmp	sl, r4
 8008916:	db19      	blt.n	800894c <_strtol_l.constprop.0+0xc0>
 8008918:	fb06 4603 	mla	r6, r6, r3, r4
 800891c:	f04f 0c01 	mov.w	ip, #1
 8008920:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008924:	e7e8      	b.n	80088f8 <_strtol_l.constprop.0+0x6c>
 8008926:	2c2b      	cmp	r4, #43	; 0x2b
 8008928:	bf04      	itt	eq
 800892a:	782c      	ldrbeq	r4, [r5, #0]
 800892c:	1cb5      	addeq	r5, r6, #2
 800892e:	e7ca      	b.n	80088c6 <_strtol_l.constprop.0+0x3a>
 8008930:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008934:	f1be 0f19 	cmp.w	lr, #25
 8008938:	d801      	bhi.n	800893e <_strtol_l.constprop.0+0xb2>
 800893a:	3c37      	subs	r4, #55	; 0x37
 800893c:	e7e2      	b.n	8008904 <_strtol_l.constprop.0+0x78>
 800893e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008942:	f1be 0f19 	cmp.w	lr, #25
 8008946:	d804      	bhi.n	8008952 <_strtol_l.constprop.0+0xc6>
 8008948:	3c57      	subs	r4, #87	; 0x57
 800894a:	e7db      	b.n	8008904 <_strtol_l.constprop.0+0x78>
 800894c:	f04f 3cff 	mov.w	ip, #4294967295
 8008950:	e7e6      	b.n	8008920 <_strtol_l.constprop.0+0x94>
 8008952:	f1bc 0f00 	cmp.w	ip, #0
 8008956:	da05      	bge.n	8008964 <_strtol_l.constprop.0+0xd8>
 8008958:	2322      	movs	r3, #34	; 0x22
 800895a:	6003      	str	r3, [r0, #0]
 800895c:	4646      	mov	r6, r8
 800895e:	b942      	cbnz	r2, 8008972 <_strtol_l.constprop.0+0xe6>
 8008960:	4630      	mov	r0, r6
 8008962:	e79e      	b.n	80088a2 <_strtol_l.constprop.0+0x16>
 8008964:	b107      	cbz	r7, 8008968 <_strtol_l.constprop.0+0xdc>
 8008966:	4276      	negs	r6, r6
 8008968:	2a00      	cmp	r2, #0
 800896a:	d0f9      	beq.n	8008960 <_strtol_l.constprop.0+0xd4>
 800896c:	f1bc 0f00 	cmp.w	ip, #0
 8008970:	d000      	beq.n	8008974 <_strtol_l.constprop.0+0xe8>
 8008972:	1e69      	subs	r1, r5, #1
 8008974:	6011      	str	r1, [r2, #0]
 8008976:	e7f3      	b.n	8008960 <_strtol_l.constprop.0+0xd4>
 8008978:	2430      	movs	r4, #48	; 0x30
 800897a:	2b00      	cmp	r3, #0
 800897c:	d1b1      	bne.n	80088e2 <_strtol_l.constprop.0+0x56>
 800897e:	2308      	movs	r3, #8
 8008980:	e7af      	b.n	80088e2 <_strtol_l.constprop.0+0x56>
 8008982:	2c30      	cmp	r4, #48	; 0x30
 8008984:	d0a5      	beq.n	80088d2 <_strtol_l.constprop.0+0x46>
 8008986:	230a      	movs	r3, #10
 8008988:	e7ab      	b.n	80088e2 <_strtol_l.constprop.0+0x56>
 800898a:	bf00      	nop
 800898c:	0800a531 	.word	0x0800a531

08008990 <_strtol_r>:
 8008990:	f7ff bf7c 	b.w	800888c <_strtol_l.constprop.0>

08008994 <strtol>:
 8008994:	4613      	mov	r3, r2
 8008996:	460a      	mov	r2, r1
 8008998:	4601      	mov	r1, r0
 800899a:	4802      	ldr	r0, [pc, #8]	; (80089a4 <strtol+0x10>)
 800899c:	6800      	ldr	r0, [r0, #0]
 800899e:	f7ff bf75 	b.w	800888c <_strtol_l.constprop.0>
 80089a2:	bf00      	nop
 80089a4:	20000420 	.word	0x20000420

080089a8 <__swbuf_r>:
 80089a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089aa:	460e      	mov	r6, r1
 80089ac:	4614      	mov	r4, r2
 80089ae:	4605      	mov	r5, r0
 80089b0:	b118      	cbz	r0, 80089ba <__swbuf_r+0x12>
 80089b2:	6983      	ldr	r3, [r0, #24]
 80089b4:	b90b      	cbnz	r3, 80089ba <__swbuf_r+0x12>
 80089b6:	f000 fa11 	bl	8008ddc <__sinit>
 80089ba:	4b21      	ldr	r3, [pc, #132]	; (8008a40 <__swbuf_r+0x98>)
 80089bc:	429c      	cmp	r4, r3
 80089be:	d12b      	bne.n	8008a18 <__swbuf_r+0x70>
 80089c0:	686c      	ldr	r4, [r5, #4]
 80089c2:	69a3      	ldr	r3, [r4, #24]
 80089c4:	60a3      	str	r3, [r4, #8]
 80089c6:	89a3      	ldrh	r3, [r4, #12]
 80089c8:	071a      	lsls	r2, r3, #28
 80089ca:	d52f      	bpl.n	8008a2c <__swbuf_r+0x84>
 80089cc:	6923      	ldr	r3, [r4, #16]
 80089ce:	b36b      	cbz	r3, 8008a2c <__swbuf_r+0x84>
 80089d0:	6923      	ldr	r3, [r4, #16]
 80089d2:	6820      	ldr	r0, [r4, #0]
 80089d4:	1ac0      	subs	r0, r0, r3
 80089d6:	6963      	ldr	r3, [r4, #20]
 80089d8:	b2f6      	uxtb	r6, r6
 80089da:	4283      	cmp	r3, r0
 80089dc:	4637      	mov	r7, r6
 80089de:	dc04      	bgt.n	80089ea <__swbuf_r+0x42>
 80089e0:	4621      	mov	r1, r4
 80089e2:	4628      	mov	r0, r5
 80089e4:	f000 f966 	bl	8008cb4 <_fflush_r>
 80089e8:	bb30      	cbnz	r0, 8008a38 <__swbuf_r+0x90>
 80089ea:	68a3      	ldr	r3, [r4, #8]
 80089ec:	3b01      	subs	r3, #1
 80089ee:	60a3      	str	r3, [r4, #8]
 80089f0:	6823      	ldr	r3, [r4, #0]
 80089f2:	1c5a      	adds	r2, r3, #1
 80089f4:	6022      	str	r2, [r4, #0]
 80089f6:	701e      	strb	r6, [r3, #0]
 80089f8:	6963      	ldr	r3, [r4, #20]
 80089fa:	3001      	adds	r0, #1
 80089fc:	4283      	cmp	r3, r0
 80089fe:	d004      	beq.n	8008a0a <__swbuf_r+0x62>
 8008a00:	89a3      	ldrh	r3, [r4, #12]
 8008a02:	07db      	lsls	r3, r3, #31
 8008a04:	d506      	bpl.n	8008a14 <__swbuf_r+0x6c>
 8008a06:	2e0a      	cmp	r6, #10
 8008a08:	d104      	bne.n	8008a14 <__swbuf_r+0x6c>
 8008a0a:	4621      	mov	r1, r4
 8008a0c:	4628      	mov	r0, r5
 8008a0e:	f000 f951 	bl	8008cb4 <_fflush_r>
 8008a12:	b988      	cbnz	r0, 8008a38 <__swbuf_r+0x90>
 8008a14:	4638      	mov	r0, r7
 8008a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a18:	4b0a      	ldr	r3, [pc, #40]	; (8008a44 <__swbuf_r+0x9c>)
 8008a1a:	429c      	cmp	r4, r3
 8008a1c:	d101      	bne.n	8008a22 <__swbuf_r+0x7a>
 8008a1e:	68ac      	ldr	r4, [r5, #8]
 8008a20:	e7cf      	b.n	80089c2 <__swbuf_r+0x1a>
 8008a22:	4b09      	ldr	r3, [pc, #36]	; (8008a48 <__swbuf_r+0xa0>)
 8008a24:	429c      	cmp	r4, r3
 8008a26:	bf08      	it	eq
 8008a28:	68ec      	ldreq	r4, [r5, #12]
 8008a2a:	e7ca      	b.n	80089c2 <__swbuf_r+0x1a>
 8008a2c:	4621      	mov	r1, r4
 8008a2e:	4628      	mov	r0, r5
 8008a30:	f000 f81e 	bl	8008a70 <__swsetup_r>
 8008a34:	2800      	cmp	r0, #0
 8008a36:	d0cb      	beq.n	80089d0 <__swbuf_r+0x28>
 8008a38:	f04f 37ff 	mov.w	r7, #4294967295
 8008a3c:	e7ea      	b.n	8008a14 <__swbuf_r+0x6c>
 8008a3e:	bf00      	nop
 8008a40:	0800a654 	.word	0x0800a654
 8008a44:	0800a674 	.word	0x0800a674
 8008a48:	0800a634 	.word	0x0800a634

08008a4c <_write_r>:
 8008a4c:	b538      	push	{r3, r4, r5, lr}
 8008a4e:	4d07      	ldr	r5, [pc, #28]	; (8008a6c <_write_r+0x20>)
 8008a50:	4604      	mov	r4, r0
 8008a52:	4608      	mov	r0, r1
 8008a54:	4611      	mov	r1, r2
 8008a56:	2200      	movs	r2, #0
 8008a58:	602a      	str	r2, [r5, #0]
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	f7f8 fa04 	bl	8000e68 <_write>
 8008a60:	1c43      	adds	r3, r0, #1
 8008a62:	d102      	bne.n	8008a6a <_write_r+0x1e>
 8008a64:	682b      	ldr	r3, [r5, #0]
 8008a66:	b103      	cbz	r3, 8008a6a <_write_r+0x1e>
 8008a68:	6023      	str	r3, [r4, #0]
 8008a6a:	bd38      	pop	{r3, r4, r5, pc}
 8008a6c:	20003854 	.word	0x20003854

08008a70 <__swsetup_r>:
 8008a70:	4b32      	ldr	r3, [pc, #200]	; (8008b3c <__swsetup_r+0xcc>)
 8008a72:	b570      	push	{r4, r5, r6, lr}
 8008a74:	681d      	ldr	r5, [r3, #0]
 8008a76:	4606      	mov	r6, r0
 8008a78:	460c      	mov	r4, r1
 8008a7a:	b125      	cbz	r5, 8008a86 <__swsetup_r+0x16>
 8008a7c:	69ab      	ldr	r3, [r5, #24]
 8008a7e:	b913      	cbnz	r3, 8008a86 <__swsetup_r+0x16>
 8008a80:	4628      	mov	r0, r5
 8008a82:	f000 f9ab 	bl	8008ddc <__sinit>
 8008a86:	4b2e      	ldr	r3, [pc, #184]	; (8008b40 <__swsetup_r+0xd0>)
 8008a88:	429c      	cmp	r4, r3
 8008a8a:	d10f      	bne.n	8008aac <__swsetup_r+0x3c>
 8008a8c:	686c      	ldr	r4, [r5, #4]
 8008a8e:	89a3      	ldrh	r3, [r4, #12]
 8008a90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a94:	0719      	lsls	r1, r3, #28
 8008a96:	d42c      	bmi.n	8008af2 <__swsetup_r+0x82>
 8008a98:	06dd      	lsls	r5, r3, #27
 8008a9a:	d411      	bmi.n	8008ac0 <__swsetup_r+0x50>
 8008a9c:	2309      	movs	r3, #9
 8008a9e:	6033      	str	r3, [r6, #0]
 8008aa0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008aa4:	81a3      	strh	r3, [r4, #12]
 8008aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8008aaa:	e03e      	b.n	8008b2a <__swsetup_r+0xba>
 8008aac:	4b25      	ldr	r3, [pc, #148]	; (8008b44 <__swsetup_r+0xd4>)
 8008aae:	429c      	cmp	r4, r3
 8008ab0:	d101      	bne.n	8008ab6 <__swsetup_r+0x46>
 8008ab2:	68ac      	ldr	r4, [r5, #8]
 8008ab4:	e7eb      	b.n	8008a8e <__swsetup_r+0x1e>
 8008ab6:	4b24      	ldr	r3, [pc, #144]	; (8008b48 <__swsetup_r+0xd8>)
 8008ab8:	429c      	cmp	r4, r3
 8008aba:	bf08      	it	eq
 8008abc:	68ec      	ldreq	r4, [r5, #12]
 8008abe:	e7e6      	b.n	8008a8e <__swsetup_r+0x1e>
 8008ac0:	0758      	lsls	r0, r3, #29
 8008ac2:	d512      	bpl.n	8008aea <__swsetup_r+0x7a>
 8008ac4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ac6:	b141      	cbz	r1, 8008ada <__swsetup_r+0x6a>
 8008ac8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008acc:	4299      	cmp	r1, r3
 8008ace:	d002      	beq.n	8008ad6 <__swsetup_r+0x66>
 8008ad0:	4630      	mov	r0, r6
 8008ad2:	f000 fab5 	bl	8009040 <_free_r>
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	6363      	str	r3, [r4, #52]	; 0x34
 8008ada:	89a3      	ldrh	r3, [r4, #12]
 8008adc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ae0:	81a3      	strh	r3, [r4, #12]
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	6063      	str	r3, [r4, #4]
 8008ae6:	6923      	ldr	r3, [r4, #16]
 8008ae8:	6023      	str	r3, [r4, #0]
 8008aea:	89a3      	ldrh	r3, [r4, #12]
 8008aec:	f043 0308 	orr.w	r3, r3, #8
 8008af0:	81a3      	strh	r3, [r4, #12]
 8008af2:	6923      	ldr	r3, [r4, #16]
 8008af4:	b94b      	cbnz	r3, 8008b0a <__swsetup_r+0x9a>
 8008af6:	89a3      	ldrh	r3, [r4, #12]
 8008af8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b00:	d003      	beq.n	8008b0a <__swsetup_r+0x9a>
 8008b02:	4621      	mov	r1, r4
 8008b04:	4630      	mov	r0, r6
 8008b06:	f000 fa53 	bl	8008fb0 <__smakebuf_r>
 8008b0a:	89a0      	ldrh	r0, [r4, #12]
 8008b0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b10:	f010 0301 	ands.w	r3, r0, #1
 8008b14:	d00a      	beq.n	8008b2c <__swsetup_r+0xbc>
 8008b16:	2300      	movs	r3, #0
 8008b18:	60a3      	str	r3, [r4, #8]
 8008b1a:	6963      	ldr	r3, [r4, #20]
 8008b1c:	425b      	negs	r3, r3
 8008b1e:	61a3      	str	r3, [r4, #24]
 8008b20:	6923      	ldr	r3, [r4, #16]
 8008b22:	b943      	cbnz	r3, 8008b36 <__swsetup_r+0xc6>
 8008b24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b28:	d1ba      	bne.n	8008aa0 <__swsetup_r+0x30>
 8008b2a:	bd70      	pop	{r4, r5, r6, pc}
 8008b2c:	0781      	lsls	r1, r0, #30
 8008b2e:	bf58      	it	pl
 8008b30:	6963      	ldrpl	r3, [r4, #20]
 8008b32:	60a3      	str	r3, [r4, #8]
 8008b34:	e7f4      	b.n	8008b20 <__swsetup_r+0xb0>
 8008b36:	2000      	movs	r0, #0
 8008b38:	e7f7      	b.n	8008b2a <__swsetup_r+0xba>
 8008b3a:	bf00      	nop
 8008b3c:	20000420 	.word	0x20000420
 8008b40:	0800a654 	.word	0x0800a654
 8008b44:	0800a674 	.word	0x0800a674
 8008b48:	0800a634 	.word	0x0800a634

08008b4c <__assert_func>:
 8008b4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b4e:	4614      	mov	r4, r2
 8008b50:	461a      	mov	r2, r3
 8008b52:	4b09      	ldr	r3, [pc, #36]	; (8008b78 <__assert_func+0x2c>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4605      	mov	r5, r0
 8008b58:	68d8      	ldr	r0, [r3, #12]
 8008b5a:	b14c      	cbz	r4, 8008b70 <__assert_func+0x24>
 8008b5c:	4b07      	ldr	r3, [pc, #28]	; (8008b7c <__assert_func+0x30>)
 8008b5e:	9100      	str	r1, [sp, #0]
 8008b60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b64:	4906      	ldr	r1, [pc, #24]	; (8008b80 <__assert_func+0x34>)
 8008b66:	462b      	mov	r3, r5
 8008b68:	f000 f9b6 	bl	8008ed8 <fiprintf>
 8008b6c:	f001 fa62 	bl	800a034 <abort>
 8008b70:	4b04      	ldr	r3, [pc, #16]	; (8008b84 <__assert_func+0x38>)
 8008b72:	461c      	mov	r4, r3
 8008b74:	e7f3      	b.n	8008b5e <__assert_func+0x12>
 8008b76:	bf00      	nop
 8008b78:	20000420 	.word	0x20000420
 8008b7c:	0800a4f4 	.word	0x0800a4f4
 8008b80:	0800a501 	.word	0x0800a501
 8008b84:	0800a52f 	.word	0x0800a52f

08008b88 <_close_r>:
 8008b88:	b538      	push	{r3, r4, r5, lr}
 8008b8a:	4d06      	ldr	r5, [pc, #24]	; (8008ba4 <_close_r+0x1c>)
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	4604      	mov	r4, r0
 8008b90:	4608      	mov	r0, r1
 8008b92:	602b      	str	r3, [r5, #0]
 8008b94:	f7f8 fc93 	bl	80014be <_close>
 8008b98:	1c43      	adds	r3, r0, #1
 8008b9a:	d102      	bne.n	8008ba2 <_close_r+0x1a>
 8008b9c:	682b      	ldr	r3, [r5, #0]
 8008b9e:	b103      	cbz	r3, 8008ba2 <_close_r+0x1a>
 8008ba0:	6023      	str	r3, [r4, #0]
 8008ba2:	bd38      	pop	{r3, r4, r5, pc}
 8008ba4:	20003854 	.word	0x20003854

08008ba8 <__sflush_r>:
 8008ba8:	898a      	ldrh	r2, [r1, #12]
 8008baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bae:	4605      	mov	r5, r0
 8008bb0:	0710      	lsls	r0, r2, #28
 8008bb2:	460c      	mov	r4, r1
 8008bb4:	d458      	bmi.n	8008c68 <__sflush_r+0xc0>
 8008bb6:	684b      	ldr	r3, [r1, #4]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	dc05      	bgt.n	8008bc8 <__sflush_r+0x20>
 8008bbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	dc02      	bgt.n	8008bc8 <__sflush_r+0x20>
 8008bc2:	2000      	movs	r0, #0
 8008bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bca:	2e00      	cmp	r6, #0
 8008bcc:	d0f9      	beq.n	8008bc2 <__sflush_r+0x1a>
 8008bce:	2300      	movs	r3, #0
 8008bd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008bd4:	682f      	ldr	r7, [r5, #0]
 8008bd6:	602b      	str	r3, [r5, #0]
 8008bd8:	d032      	beq.n	8008c40 <__sflush_r+0x98>
 8008bda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008bdc:	89a3      	ldrh	r3, [r4, #12]
 8008bde:	075a      	lsls	r2, r3, #29
 8008be0:	d505      	bpl.n	8008bee <__sflush_r+0x46>
 8008be2:	6863      	ldr	r3, [r4, #4]
 8008be4:	1ac0      	subs	r0, r0, r3
 8008be6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008be8:	b10b      	cbz	r3, 8008bee <__sflush_r+0x46>
 8008bea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008bec:	1ac0      	subs	r0, r0, r3
 8008bee:	2300      	movs	r3, #0
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bf4:	6a21      	ldr	r1, [r4, #32]
 8008bf6:	4628      	mov	r0, r5
 8008bf8:	47b0      	blx	r6
 8008bfa:	1c43      	adds	r3, r0, #1
 8008bfc:	89a3      	ldrh	r3, [r4, #12]
 8008bfe:	d106      	bne.n	8008c0e <__sflush_r+0x66>
 8008c00:	6829      	ldr	r1, [r5, #0]
 8008c02:	291d      	cmp	r1, #29
 8008c04:	d82c      	bhi.n	8008c60 <__sflush_r+0xb8>
 8008c06:	4a2a      	ldr	r2, [pc, #168]	; (8008cb0 <__sflush_r+0x108>)
 8008c08:	40ca      	lsrs	r2, r1
 8008c0a:	07d6      	lsls	r6, r2, #31
 8008c0c:	d528      	bpl.n	8008c60 <__sflush_r+0xb8>
 8008c0e:	2200      	movs	r2, #0
 8008c10:	6062      	str	r2, [r4, #4]
 8008c12:	04d9      	lsls	r1, r3, #19
 8008c14:	6922      	ldr	r2, [r4, #16]
 8008c16:	6022      	str	r2, [r4, #0]
 8008c18:	d504      	bpl.n	8008c24 <__sflush_r+0x7c>
 8008c1a:	1c42      	adds	r2, r0, #1
 8008c1c:	d101      	bne.n	8008c22 <__sflush_r+0x7a>
 8008c1e:	682b      	ldr	r3, [r5, #0]
 8008c20:	b903      	cbnz	r3, 8008c24 <__sflush_r+0x7c>
 8008c22:	6560      	str	r0, [r4, #84]	; 0x54
 8008c24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c26:	602f      	str	r7, [r5, #0]
 8008c28:	2900      	cmp	r1, #0
 8008c2a:	d0ca      	beq.n	8008bc2 <__sflush_r+0x1a>
 8008c2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c30:	4299      	cmp	r1, r3
 8008c32:	d002      	beq.n	8008c3a <__sflush_r+0x92>
 8008c34:	4628      	mov	r0, r5
 8008c36:	f000 fa03 	bl	8009040 <_free_r>
 8008c3a:	2000      	movs	r0, #0
 8008c3c:	6360      	str	r0, [r4, #52]	; 0x34
 8008c3e:	e7c1      	b.n	8008bc4 <__sflush_r+0x1c>
 8008c40:	6a21      	ldr	r1, [r4, #32]
 8008c42:	2301      	movs	r3, #1
 8008c44:	4628      	mov	r0, r5
 8008c46:	47b0      	blx	r6
 8008c48:	1c41      	adds	r1, r0, #1
 8008c4a:	d1c7      	bne.n	8008bdc <__sflush_r+0x34>
 8008c4c:	682b      	ldr	r3, [r5, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d0c4      	beq.n	8008bdc <__sflush_r+0x34>
 8008c52:	2b1d      	cmp	r3, #29
 8008c54:	d001      	beq.n	8008c5a <__sflush_r+0xb2>
 8008c56:	2b16      	cmp	r3, #22
 8008c58:	d101      	bne.n	8008c5e <__sflush_r+0xb6>
 8008c5a:	602f      	str	r7, [r5, #0]
 8008c5c:	e7b1      	b.n	8008bc2 <__sflush_r+0x1a>
 8008c5e:	89a3      	ldrh	r3, [r4, #12]
 8008c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c64:	81a3      	strh	r3, [r4, #12]
 8008c66:	e7ad      	b.n	8008bc4 <__sflush_r+0x1c>
 8008c68:	690f      	ldr	r7, [r1, #16]
 8008c6a:	2f00      	cmp	r7, #0
 8008c6c:	d0a9      	beq.n	8008bc2 <__sflush_r+0x1a>
 8008c6e:	0793      	lsls	r3, r2, #30
 8008c70:	680e      	ldr	r6, [r1, #0]
 8008c72:	bf08      	it	eq
 8008c74:	694b      	ldreq	r3, [r1, #20]
 8008c76:	600f      	str	r7, [r1, #0]
 8008c78:	bf18      	it	ne
 8008c7a:	2300      	movne	r3, #0
 8008c7c:	eba6 0807 	sub.w	r8, r6, r7
 8008c80:	608b      	str	r3, [r1, #8]
 8008c82:	f1b8 0f00 	cmp.w	r8, #0
 8008c86:	dd9c      	ble.n	8008bc2 <__sflush_r+0x1a>
 8008c88:	6a21      	ldr	r1, [r4, #32]
 8008c8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c8c:	4643      	mov	r3, r8
 8008c8e:	463a      	mov	r2, r7
 8008c90:	4628      	mov	r0, r5
 8008c92:	47b0      	blx	r6
 8008c94:	2800      	cmp	r0, #0
 8008c96:	dc06      	bgt.n	8008ca6 <__sflush_r+0xfe>
 8008c98:	89a3      	ldrh	r3, [r4, #12]
 8008c9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c9e:	81a3      	strh	r3, [r4, #12]
 8008ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca4:	e78e      	b.n	8008bc4 <__sflush_r+0x1c>
 8008ca6:	4407      	add	r7, r0
 8008ca8:	eba8 0800 	sub.w	r8, r8, r0
 8008cac:	e7e9      	b.n	8008c82 <__sflush_r+0xda>
 8008cae:	bf00      	nop
 8008cb0:	20400001 	.word	0x20400001

08008cb4 <_fflush_r>:
 8008cb4:	b538      	push	{r3, r4, r5, lr}
 8008cb6:	690b      	ldr	r3, [r1, #16]
 8008cb8:	4605      	mov	r5, r0
 8008cba:	460c      	mov	r4, r1
 8008cbc:	b913      	cbnz	r3, 8008cc4 <_fflush_r+0x10>
 8008cbe:	2500      	movs	r5, #0
 8008cc0:	4628      	mov	r0, r5
 8008cc2:	bd38      	pop	{r3, r4, r5, pc}
 8008cc4:	b118      	cbz	r0, 8008cce <_fflush_r+0x1a>
 8008cc6:	6983      	ldr	r3, [r0, #24]
 8008cc8:	b90b      	cbnz	r3, 8008cce <_fflush_r+0x1a>
 8008cca:	f000 f887 	bl	8008ddc <__sinit>
 8008cce:	4b14      	ldr	r3, [pc, #80]	; (8008d20 <_fflush_r+0x6c>)
 8008cd0:	429c      	cmp	r4, r3
 8008cd2:	d11b      	bne.n	8008d0c <_fflush_r+0x58>
 8008cd4:	686c      	ldr	r4, [r5, #4]
 8008cd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d0ef      	beq.n	8008cbe <_fflush_r+0xa>
 8008cde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ce0:	07d0      	lsls	r0, r2, #31
 8008ce2:	d404      	bmi.n	8008cee <_fflush_r+0x3a>
 8008ce4:	0599      	lsls	r1, r3, #22
 8008ce6:	d402      	bmi.n	8008cee <_fflush_r+0x3a>
 8008ce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cea:	f000 f927 	bl	8008f3c <__retarget_lock_acquire_recursive>
 8008cee:	4628      	mov	r0, r5
 8008cf0:	4621      	mov	r1, r4
 8008cf2:	f7ff ff59 	bl	8008ba8 <__sflush_r>
 8008cf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cf8:	07da      	lsls	r2, r3, #31
 8008cfa:	4605      	mov	r5, r0
 8008cfc:	d4e0      	bmi.n	8008cc0 <_fflush_r+0xc>
 8008cfe:	89a3      	ldrh	r3, [r4, #12]
 8008d00:	059b      	lsls	r3, r3, #22
 8008d02:	d4dd      	bmi.n	8008cc0 <_fflush_r+0xc>
 8008d04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d06:	f000 f91a 	bl	8008f3e <__retarget_lock_release_recursive>
 8008d0a:	e7d9      	b.n	8008cc0 <_fflush_r+0xc>
 8008d0c:	4b05      	ldr	r3, [pc, #20]	; (8008d24 <_fflush_r+0x70>)
 8008d0e:	429c      	cmp	r4, r3
 8008d10:	d101      	bne.n	8008d16 <_fflush_r+0x62>
 8008d12:	68ac      	ldr	r4, [r5, #8]
 8008d14:	e7df      	b.n	8008cd6 <_fflush_r+0x22>
 8008d16:	4b04      	ldr	r3, [pc, #16]	; (8008d28 <_fflush_r+0x74>)
 8008d18:	429c      	cmp	r4, r3
 8008d1a:	bf08      	it	eq
 8008d1c:	68ec      	ldreq	r4, [r5, #12]
 8008d1e:	e7da      	b.n	8008cd6 <_fflush_r+0x22>
 8008d20:	0800a654 	.word	0x0800a654
 8008d24:	0800a674 	.word	0x0800a674
 8008d28:	0800a634 	.word	0x0800a634

08008d2c <std>:
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	b510      	push	{r4, lr}
 8008d30:	4604      	mov	r4, r0
 8008d32:	e9c0 3300 	strd	r3, r3, [r0]
 8008d36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d3a:	6083      	str	r3, [r0, #8]
 8008d3c:	8181      	strh	r1, [r0, #12]
 8008d3e:	6643      	str	r3, [r0, #100]	; 0x64
 8008d40:	81c2      	strh	r2, [r0, #14]
 8008d42:	6183      	str	r3, [r0, #24]
 8008d44:	4619      	mov	r1, r3
 8008d46:	2208      	movs	r2, #8
 8008d48:	305c      	adds	r0, #92	; 0x5c
 8008d4a:	f7ff fc33 	bl	80085b4 <memset>
 8008d4e:	4b05      	ldr	r3, [pc, #20]	; (8008d64 <std+0x38>)
 8008d50:	6263      	str	r3, [r4, #36]	; 0x24
 8008d52:	4b05      	ldr	r3, [pc, #20]	; (8008d68 <std+0x3c>)
 8008d54:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d56:	4b05      	ldr	r3, [pc, #20]	; (8008d6c <std+0x40>)
 8008d58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d5a:	4b05      	ldr	r3, [pc, #20]	; (8008d70 <std+0x44>)
 8008d5c:	6224      	str	r4, [r4, #32]
 8008d5e:	6323      	str	r3, [r4, #48]	; 0x30
 8008d60:	bd10      	pop	{r4, pc}
 8008d62:	bf00      	nop
 8008d64:	08008739 	.word	0x08008739
 8008d68:	0800875f 	.word	0x0800875f
 8008d6c:	08008797 	.word	0x08008797
 8008d70:	080087bb 	.word	0x080087bb

08008d74 <_cleanup_r>:
 8008d74:	4901      	ldr	r1, [pc, #4]	; (8008d7c <_cleanup_r+0x8>)
 8008d76:	f000 b8c1 	b.w	8008efc <_fwalk_reent>
 8008d7a:	bf00      	nop
 8008d7c:	08008cb5 	.word	0x08008cb5

08008d80 <__sfmoreglue>:
 8008d80:	b570      	push	{r4, r5, r6, lr}
 8008d82:	2268      	movs	r2, #104	; 0x68
 8008d84:	1e4d      	subs	r5, r1, #1
 8008d86:	4355      	muls	r5, r2
 8008d88:	460e      	mov	r6, r1
 8008d8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d8e:	f000 f9c3 	bl	8009118 <_malloc_r>
 8008d92:	4604      	mov	r4, r0
 8008d94:	b140      	cbz	r0, 8008da8 <__sfmoreglue+0x28>
 8008d96:	2100      	movs	r1, #0
 8008d98:	e9c0 1600 	strd	r1, r6, [r0]
 8008d9c:	300c      	adds	r0, #12
 8008d9e:	60a0      	str	r0, [r4, #8]
 8008da0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008da4:	f7ff fc06 	bl	80085b4 <memset>
 8008da8:	4620      	mov	r0, r4
 8008daa:	bd70      	pop	{r4, r5, r6, pc}

08008dac <__sfp_lock_acquire>:
 8008dac:	4801      	ldr	r0, [pc, #4]	; (8008db4 <__sfp_lock_acquire+0x8>)
 8008dae:	f000 b8c5 	b.w	8008f3c <__retarget_lock_acquire_recursive>
 8008db2:	bf00      	nop
 8008db4:	20003849 	.word	0x20003849

08008db8 <__sfp_lock_release>:
 8008db8:	4801      	ldr	r0, [pc, #4]	; (8008dc0 <__sfp_lock_release+0x8>)
 8008dba:	f000 b8c0 	b.w	8008f3e <__retarget_lock_release_recursive>
 8008dbe:	bf00      	nop
 8008dc0:	20003849 	.word	0x20003849

08008dc4 <__sinit_lock_acquire>:
 8008dc4:	4801      	ldr	r0, [pc, #4]	; (8008dcc <__sinit_lock_acquire+0x8>)
 8008dc6:	f000 b8b9 	b.w	8008f3c <__retarget_lock_acquire_recursive>
 8008dca:	bf00      	nop
 8008dcc:	2000384a 	.word	0x2000384a

08008dd0 <__sinit_lock_release>:
 8008dd0:	4801      	ldr	r0, [pc, #4]	; (8008dd8 <__sinit_lock_release+0x8>)
 8008dd2:	f000 b8b4 	b.w	8008f3e <__retarget_lock_release_recursive>
 8008dd6:	bf00      	nop
 8008dd8:	2000384a 	.word	0x2000384a

08008ddc <__sinit>:
 8008ddc:	b510      	push	{r4, lr}
 8008dde:	4604      	mov	r4, r0
 8008de0:	f7ff fff0 	bl	8008dc4 <__sinit_lock_acquire>
 8008de4:	69a3      	ldr	r3, [r4, #24]
 8008de6:	b11b      	cbz	r3, 8008df0 <__sinit+0x14>
 8008de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dec:	f7ff bff0 	b.w	8008dd0 <__sinit_lock_release>
 8008df0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008df4:	6523      	str	r3, [r4, #80]	; 0x50
 8008df6:	4b13      	ldr	r3, [pc, #76]	; (8008e44 <__sinit+0x68>)
 8008df8:	4a13      	ldr	r2, [pc, #76]	; (8008e48 <__sinit+0x6c>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	62a2      	str	r2, [r4, #40]	; 0x28
 8008dfe:	42a3      	cmp	r3, r4
 8008e00:	bf04      	itt	eq
 8008e02:	2301      	moveq	r3, #1
 8008e04:	61a3      	streq	r3, [r4, #24]
 8008e06:	4620      	mov	r0, r4
 8008e08:	f000 f820 	bl	8008e4c <__sfp>
 8008e0c:	6060      	str	r0, [r4, #4]
 8008e0e:	4620      	mov	r0, r4
 8008e10:	f000 f81c 	bl	8008e4c <__sfp>
 8008e14:	60a0      	str	r0, [r4, #8]
 8008e16:	4620      	mov	r0, r4
 8008e18:	f000 f818 	bl	8008e4c <__sfp>
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	60e0      	str	r0, [r4, #12]
 8008e20:	2104      	movs	r1, #4
 8008e22:	6860      	ldr	r0, [r4, #4]
 8008e24:	f7ff ff82 	bl	8008d2c <std>
 8008e28:	68a0      	ldr	r0, [r4, #8]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	2109      	movs	r1, #9
 8008e2e:	f7ff ff7d 	bl	8008d2c <std>
 8008e32:	68e0      	ldr	r0, [r4, #12]
 8008e34:	2202      	movs	r2, #2
 8008e36:	2112      	movs	r1, #18
 8008e38:	f7ff ff78 	bl	8008d2c <std>
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	61a3      	str	r3, [r4, #24]
 8008e40:	e7d2      	b.n	8008de8 <__sinit+0xc>
 8008e42:	bf00      	nop
 8008e44:	0800a47c 	.word	0x0800a47c
 8008e48:	08008d75 	.word	0x08008d75

08008e4c <__sfp>:
 8008e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e4e:	4607      	mov	r7, r0
 8008e50:	f7ff ffac 	bl	8008dac <__sfp_lock_acquire>
 8008e54:	4b1e      	ldr	r3, [pc, #120]	; (8008ed0 <__sfp+0x84>)
 8008e56:	681e      	ldr	r6, [r3, #0]
 8008e58:	69b3      	ldr	r3, [r6, #24]
 8008e5a:	b913      	cbnz	r3, 8008e62 <__sfp+0x16>
 8008e5c:	4630      	mov	r0, r6
 8008e5e:	f7ff ffbd 	bl	8008ddc <__sinit>
 8008e62:	3648      	adds	r6, #72	; 0x48
 8008e64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	d503      	bpl.n	8008e74 <__sfp+0x28>
 8008e6c:	6833      	ldr	r3, [r6, #0]
 8008e6e:	b30b      	cbz	r3, 8008eb4 <__sfp+0x68>
 8008e70:	6836      	ldr	r6, [r6, #0]
 8008e72:	e7f7      	b.n	8008e64 <__sfp+0x18>
 8008e74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e78:	b9d5      	cbnz	r5, 8008eb0 <__sfp+0x64>
 8008e7a:	4b16      	ldr	r3, [pc, #88]	; (8008ed4 <__sfp+0x88>)
 8008e7c:	60e3      	str	r3, [r4, #12]
 8008e7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e82:	6665      	str	r5, [r4, #100]	; 0x64
 8008e84:	f000 f859 	bl	8008f3a <__retarget_lock_init_recursive>
 8008e88:	f7ff ff96 	bl	8008db8 <__sfp_lock_release>
 8008e8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008e90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008e94:	6025      	str	r5, [r4, #0]
 8008e96:	61a5      	str	r5, [r4, #24]
 8008e98:	2208      	movs	r2, #8
 8008e9a:	4629      	mov	r1, r5
 8008e9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008ea0:	f7ff fb88 	bl	80085b4 <memset>
 8008ea4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ea8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008eac:	4620      	mov	r0, r4
 8008eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eb0:	3468      	adds	r4, #104	; 0x68
 8008eb2:	e7d9      	b.n	8008e68 <__sfp+0x1c>
 8008eb4:	2104      	movs	r1, #4
 8008eb6:	4638      	mov	r0, r7
 8008eb8:	f7ff ff62 	bl	8008d80 <__sfmoreglue>
 8008ebc:	4604      	mov	r4, r0
 8008ebe:	6030      	str	r0, [r6, #0]
 8008ec0:	2800      	cmp	r0, #0
 8008ec2:	d1d5      	bne.n	8008e70 <__sfp+0x24>
 8008ec4:	f7ff ff78 	bl	8008db8 <__sfp_lock_release>
 8008ec8:	230c      	movs	r3, #12
 8008eca:	603b      	str	r3, [r7, #0]
 8008ecc:	e7ee      	b.n	8008eac <__sfp+0x60>
 8008ece:	bf00      	nop
 8008ed0:	0800a47c 	.word	0x0800a47c
 8008ed4:	ffff0001 	.word	0xffff0001

08008ed8 <fiprintf>:
 8008ed8:	b40e      	push	{r1, r2, r3}
 8008eda:	b503      	push	{r0, r1, lr}
 8008edc:	4601      	mov	r1, r0
 8008ede:	ab03      	add	r3, sp, #12
 8008ee0:	4805      	ldr	r0, [pc, #20]	; (8008ef8 <fiprintf+0x20>)
 8008ee2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ee6:	6800      	ldr	r0, [r0, #0]
 8008ee8:	9301      	str	r3, [sp, #4]
 8008eea:	f000 fb85 	bl	80095f8 <_vfiprintf_r>
 8008eee:	b002      	add	sp, #8
 8008ef0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ef4:	b003      	add	sp, #12
 8008ef6:	4770      	bx	lr
 8008ef8:	20000420 	.word	0x20000420

08008efc <_fwalk_reent>:
 8008efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f00:	4606      	mov	r6, r0
 8008f02:	4688      	mov	r8, r1
 8008f04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f08:	2700      	movs	r7, #0
 8008f0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f0e:	f1b9 0901 	subs.w	r9, r9, #1
 8008f12:	d505      	bpl.n	8008f20 <_fwalk_reent+0x24>
 8008f14:	6824      	ldr	r4, [r4, #0]
 8008f16:	2c00      	cmp	r4, #0
 8008f18:	d1f7      	bne.n	8008f0a <_fwalk_reent+0xe>
 8008f1a:	4638      	mov	r0, r7
 8008f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f20:	89ab      	ldrh	r3, [r5, #12]
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d907      	bls.n	8008f36 <_fwalk_reent+0x3a>
 8008f26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	d003      	beq.n	8008f36 <_fwalk_reent+0x3a>
 8008f2e:	4629      	mov	r1, r5
 8008f30:	4630      	mov	r0, r6
 8008f32:	47c0      	blx	r8
 8008f34:	4307      	orrs	r7, r0
 8008f36:	3568      	adds	r5, #104	; 0x68
 8008f38:	e7e9      	b.n	8008f0e <_fwalk_reent+0x12>

08008f3a <__retarget_lock_init_recursive>:
 8008f3a:	4770      	bx	lr

08008f3c <__retarget_lock_acquire_recursive>:
 8008f3c:	4770      	bx	lr

08008f3e <__retarget_lock_release_recursive>:
 8008f3e:	4770      	bx	lr

08008f40 <_lseek_r>:
 8008f40:	b538      	push	{r3, r4, r5, lr}
 8008f42:	4d07      	ldr	r5, [pc, #28]	; (8008f60 <_lseek_r+0x20>)
 8008f44:	4604      	mov	r4, r0
 8008f46:	4608      	mov	r0, r1
 8008f48:	4611      	mov	r1, r2
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	602a      	str	r2, [r5, #0]
 8008f4e:	461a      	mov	r2, r3
 8008f50:	f7f8 fadc 	bl	800150c <_lseek>
 8008f54:	1c43      	adds	r3, r0, #1
 8008f56:	d102      	bne.n	8008f5e <_lseek_r+0x1e>
 8008f58:	682b      	ldr	r3, [r5, #0]
 8008f5a:	b103      	cbz	r3, 8008f5e <_lseek_r+0x1e>
 8008f5c:	6023      	str	r3, [r4, #0]
 8008f5e:	bd38      	pop	{r3, r4, r5, pc}
 8008f60:	20003854 	.word	0x20003854

08008f64 <__swhatbuf_r>:
 8008f64:	b570      	push	{r4, r5, r6, lr}
 8008f66:	460e      	mov	r6, r1
 8008f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f6c:	2900      	cmp	r1, #0
 8008f6e:	b096      	sub	sp, #88	; 0x58
 8008f70:	4614      	mov	r4, r2
 8008f72:	461d      	mov	r5, r3
 8008f74:	da08      	bge.n	8008f88 <__swhatbuf_r+0x24>
 8008f76:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	602a      	str	r2, [r5, #0]
 8008f7e:	061a      	lsls	r2, r3, #24
 8008f80:	d410      	bmi.n	8008fa4 <__swhatbuf_r+0x40>
 8008f82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f86:	e00e      	b.n	8008fa6 <__swhatbuf_r+0x42>
 8008f88:	466a      	mov	r2, sp
 8008f8a:	f001 f85b 	bl	800a044 <_fstat_r>
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	dbf1      	blt.n	8008f76 <__swhatbuf_r+0x12>
 8008f92:	9a01      	ldr	r2, [sp, #4]
 8008f94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008f98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008f9c:	425a      	negs	r2, r3
 8008f9e:	415a      	adcs	r2, r3
 8008fa0:	602a      	str	r2, [r5, #0]
 8008fa2:	e7ee      	b.n	8008f82 <__swhatbuf_r+0x1e>
 8008fa4:	2340      	movs	r3, #64	; 0x40
 8008fa6:	2000      	movs	r0, #0
 8008fa8:	6023      	str	r3, [r4, #0]
 8008faa:	b016      	add	sp, #88	; 0x58
 8008fac:	bd70      	pop	{r4, r5, r6, pc}
	...

08008fb0 <__smakebuf_r>:
 8008fb0:	898b      	ldrh	r3, [r1, #12]
 8008fb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008fb4:	079d      	lsls	r5, r3, #30
 8008fb6:	4606      	mov	r6, r0
 8008fb8:	460c      	mov	r4, r1
 8008fba:	d507      	bpl.n	8008fcc <__smakebuf_r+0x1c>
 8008fbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008fc0:	6023      	str	r3, [r4, #0]
 8008fc2:	6123      	str	r3, [r4, #16]
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	6163      	str	r3, [r4, #20]
 8008fc8:	b002      	add	sp, #8
 8008fca:	bd70      	pop	{r4, r5, r6, pc}
 8008fcc:	ab01      	add	r3, sp, #4
 8008fce:	466a      	mov	r2, sp
 8008fd0:	f7ff ffc8 	bl	8008f64 <__swhatbuf_r>
 8008fd4:	9900      	ldr	r1, [sp, #0]
 8008fd6:	4605      	mov	r5, r0
 8008fd8:	4630      	mov	r0, r6
 8008fda:	f000 f89d 	bl	8009118 <_malloc_r>
 8008fde:	b948      	cbnz	r0, 8008ff4 <__smakebuf_r+0x44>
 8008fe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fe4:	059a      	lsls	r2, r3, #22
 8008fe6:	d4ef      	bmi.n	8008fc8 <__smakebuf_r+0x18>
 8008fe8:	f023 0303 	bic.w	r3, r3, #3
 8008fec:	f043 0302 	orr.w	r3, r3, #2
 8008ff0:	81a3      	strh	r3, [r4, #12]
 8008ff2:	e7e3      	b.n	8008fbc <__smakebuf_r+0xc>
 8008ff4:	4b0d      	ldr	r3, [pc, #52]	; (800902c <__smakebuf_r+0x7c>)
 8008ff6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ff8:	89a3      	ldrh	r3, [r4, #12]
 8008ffa:	6020      	str	r0, [r4, #0]
 8008ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009000:	81a3      	strh	r3, [r4, #12]
 8009002:	9b00      	ldr	r3, [sp, #0]
 8009004:	6163      	str	r3, [r4, #20]
 8009006:	9b01      	ldr	r3, [sp, #4]
 8009008:	6120      	str	r0, [r4, #16]
 800900a:	b15b      	cbz	r3, 8009024 <__smakebuf_r+0x74>
 800900c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009010:	4630      	mov	r0, r6
 8009012:	f001 f829 	bl	800a068 <_isatty_r>
 8009016:	b128      	cbz	r0, 8009024 <__smakebuf_r+0x74>
 8009018:	89a3      	ldrh	r3, [r4, #12]
 800901a:	f023 0303 	bic.w	r3, r3, #3
 800901e:	f043 0301 	orr.w	r3, r3, #1
 8009022:	81a3      	strh	r3, [r4, #12]
 8009024:	89a0      	ldrh	r0, [r4, #12]
 8009026:	4305      	orrs	r5, r0
 8009028:	81a5      	strh	r5, [r4, #12]
 800902a:	e7cd      	b.n	8008fc8 <__smakebuf_r+0x18>
 800902c:	08008d75 	.word	0x08008d75

08009030 <malloc>:
 8009030:	4b02      	ldr	r3, [pc, #8]	; (800903c <malloc+0xc>)
 8009032:	4601      	mov	r1, r0
 8009034:	6818      	ldr	r0, [r3, #0]
 8009036:	f000 b86f 	b.w	8009118 <_malloc_r>
 800903a:	bf00      	nop
 800903c:	20000420 	.word	0x20000420

08009040 <_free_r>:
 8009040:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009042:	2900      	cmp	r1, #0
 8009044:	d044      	beq.n	80090d0 <_free_r+0x90>
 8009046:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800904a:	9001      	str	r0, [sp, #4]
 800904c:	2b00      	cmp	r3, #0
 800904e:	f1a1 0404 	sub.w	r4, r1, #4
 8009052:	bfb8      	it	lt
 8009054:	18e4      	addlt	r4, r4, r3
 8009056:	f001 f817 	bl	800a088 <__malloc_lock>
 800905a:	4a1e      	ldr	r2, [pc, #120]	; (80090d4 <_free_r+0x94>)
 800905c:	9801      	ldr	r0, [sp, #4]
 800905e:	6813      	ldr	r3, [r2, #0]
 8009060:	b933      	cbnz	r3, 8009070 <_free_r+0x30>
 8009062:	6063      	str	r3, [r4, #4]
 8009064:	6014      	str	r4, [r2, #0]
 8009066:	b003      	add	sp, #12
 8009068:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800906c:	f001 b812 	b.w	800a094 <__malloc_unlock>
 8009070:	42a3      	cmp	r3, r4
 8009072:	d908      	bls.n	8009086 <_free_r+0x46>
 8009074:	6825      	ldr	r5, [r4, #0]
 8009076:	1961      	adds	r1, r4, r5
 8009078:	428b      	cmp	r3, r1
 800907a:	bf01      	itttt	eq
 800907c:	6819      	ldreq	r1, [r3, #0]
 800907e:	685b      	ldreq	r3, [r3, #4]
 8009080:	1949      	addeq	r1, r1, r5
 8009082:	6021      	streq	r1, [r4, #0]
 8009084:	e7ed      	b.n	8009062 <_free_r+0x22>
 8009086:	461a      	mov	r2, r3
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	b10b      	cbz	r3, 8009090 <_free_r+0x50>
 800908c:	42a3      	cmp	r3, r4
 800908e:	d9fa      	bls.n	8009086 <_free_r+0x46>
 8009090:	6811      	ldr	r1, [r2, #0]
 8009092:	1855      	adds	r5, r2, r1
 8009094:	42a5      	cmp	r5, r4
 8009096:	d10b      	bne.n	80090b0 <_free_r+0x70>
 8009098:	6824      	ldr	r4, [r4, #0]
 800909a:	4421      	add	r1, r4
 800909c:	1854      	adds	r4, r2, r1
 800909e:	42a3      	cmp	r3, r4
 80090a0:	6011      	str	r1, [r2, #0]
 80090a2:	d1e0      	bne.n	8009066 <_free_r+0x26>
 80090a4:	681c      	ldr	r4, [r3, #0]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	6053      	str	r3, [r2, #4]
 80090aa:	4421      	add	r1, r4
 80090ac:	6011      	str	r1, [r2, #0]
 80090ae:	e7da      	b.n	8009066 <_free_r+0x26>
 80090b0:	d902      	bls.n	80090b8 <_free_r+0x78>
 80090b2:	230c      	movs	r3, #12
 80090b4:	6003      	str	r3, [r0, #0]
 80090b6:	e7d6      	b.n	8009066 <_free_r+0x26>
 80090b8:	6825      	ldr	r5, [r4, #0]
 80090ba:	1961      	adds	r1, r4, r5
 80090bc:	428b      	cmp	r3, r1
 80090be:	bf04      	itt	eq
 80090c0:	6819      	ldreq	r1, [r3, #0]
 80090c2:	685b      	ldreq	r3, [r3, #4]
 80090c4:	6063      	str	r3, [r4, #4]
 80090c6:	bf04      	itt	eq
 80090c8:	1949      	addeq	r1, r1, r5
 80090ca:	6021      	streq	r1, [r4, #0]
 80090cc:	6054      	str	r4, [r2, #4]
 80090ce:	e7ca      	b.n	8009066 <_free_r+0x26>
 80090d0:	b003      	add	sp, #12
 80090d2:	bd30      	pop	{r4, r5, pc}
 80090d4:	2000384c 	.word	0x2000384c

080090d8 <sbrk_aligned>:
 80090d8:	b570      	push	{r4, r5, r6, lr}
 80090da:	4e0e      	ldr	r6, [pc, #56]	; (8009114 <sbrk_aligned+0x3c>)
 80090dc:	460c      	mov	r4, r1
 80090de:	6831      	ldr	r1, [r6, #0]
 80090e0:	4605      	mov	r5, r0
 80090e2:	b911      	cbnz	r1, 80090ea <sbrk_aligned+0x12>
 80090e4:	f000 feb0 	bl	8009e48 <_sbrk_r>
 80090e8:	6030      	str	r0, [r6, #0]
 80090ea:	4621      	mov	r1, r4
 80090ec:	4628      	mov	r0, r5
 80090ee:	f000 feab 	bl	8009e48 <_sbrk_r>
 80090f2:	1c43      	adds	r3, r0, #1
 80090f4:	d00a      	beq.n	800910c <sbrk_aligned+0x34>
 80090f6:	1cc4      	adds	r4, r0, #3
 80090f8:	f024 0403 	bic.w	r4, r4, #3
 80090fc:	42a0      	cmp	r0, r4
 80090fe:	d007      	beq.n	8009110 <sbrk_aligned+0x38>
 8009100:	1a21      	subs	r1, r4, r0
 8009102:	4628      	mov	r0, r5
 8009104:	f000 fea0 	bl	8009e48 <_sbrk_r>
 8009108:	3001      	adds	r0, #1
 800910a:	d101      	bne.n	8009110 <sbrk_aligned+0x38>
 800910c:	f04f 34ff 	mov.w	r4, #4294967295
 8009110:	4620      	mov	r0, r4
 8009112:	bd70      	pop	{r4, r5, r6, pc}
 8009114:	20003850 	.word	0x20003850

08009118 <_malloc_r>:
 8009118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800911c:	1ccd      	adds	r5, r1, #3
 800911e:	f025 0503 	bic.w	r5, r5, #3
 8009122:	3508      	adds	r5, #8
 8009124:	2d0c      	cmp	r5, #12
 8009126:	bf38      	it	cc
 8009128:	250c      	movcc	r5, #12
 800912a:	2d00      	cmp	r5, #0
 800912c:	4607      	mov	r7, r0
 800912e:	db01      	blt.n	8009134 <_malloc_r+0x1c>
 8009130:	42a9      	cmp	r1, r5
 8009132:	d905      	bls.n	8009140 <_malloc_r+0x28>
 8009134:	230c      	movs	r3, #12
 8009136:	603b      	str	r3, [r7, #0]
 8009138:	2600      	movs	r6, #0
 800913a:	4630      	mov	r0, r6
 800913c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009140:	4e2e      	ldr	r6, [pc, #184]	; (80091fc <_malloc_r+0xe4>)
 8009142:	f000 ffa1 	bl	800a088 <__malloc_lock>
 8009146:	6833      	ldr	r3, [r6, #0]
 8009148:	461c      	mov	r4, r3
 800914a:	bb34      	cbnz	r4, 800919a <_malloc_r+0x82>
 800914c:	4629      	mov	r1, r5
 800914e:	4638      	mov	r0, r7
 8009150:	f7ff ffc2 	bl	80090d8 <sbrk_aligned>
 8009154:	1c43      	adds	r3, r0, #1
 8009156:	4604      	mov	r4, r0
 8009158:	d14d      	bne.n	80091f6 <_malloc_r+0xde>
 800915a:	6834      	ldr	r4, [r6, #0]
 800915c:	4626      	mov	r6, r4
 800915e:	2e00      	cmp	r6, #0
 8009160:	d140      	bne.n	80091e4 <_malloc_r+0xcc>
 8009162:	6823      	ldr	r3, [r4, #0]
 8009164:	4631      	mov	r1, r6
 8009166:	4638      	mov	r0, r7
 8009168:	eb04 0803 	add.w	r8, r4, r3
 800916c:	f000 fe6c 	bl	8009e48 <_sbrk_r>
 8009170:	4580      	cmp	r8, r0
 8009172:	d13a      	bne.n	80091ea <_malloc_r+0xd2>
 8009174:	6821      	ldr	r1, [r4, #0]
 8009176:	3503      	adds	r5, #3
 8009178:	1a6d      	subs	r5, r5, r1
 800917a:	f025 0503 	bic.w	r5, r5, #3
 800917e:	3508      	adds	r5, #8
 8009180:	2d0c      	cmp	r5, #12
 8009182:	bf38      	it	cc
 8009184:	250c      	movcc	r5, #12
 8009186:	4629      	mov	r1, r5
 8009188:	4638      	mov	r0, r7
 800918a:	f7ff ffa5 	bl	80090d8 <sbrk_aligned>
 800918e:	3001      	adds	r0, #1
 8009190:	d02b      	beq.n	80091ea <_malloc_r+0xd2>
 8009192:	6823      	ldr	r3, [r4, #0]
 8009194:	442b      	add	r3, r5
 8009196:	6023      	str	r3, [r4, #0]
 8009198:	e00e      	b.n	80091b8 <_malloc_r+0xa0>
 800919a:	6822      	ldr	r2, [r4, #0]
 800919c:	1b52      	subs	r2, r2, r5
 800919e:	d41e      	bmi.n	80091de <_malloc_r+0xc6>
 80091a0:	2a0b      	cmp	r2, #11
 80091a2:	d916      	bls.n	80091d2 <_malloc_r+0xba>
 80091a4:	1961      	adds	r1, r4, r5
 80091a6:	42a3      	cmp	r3, r4
 80091a8:	6025      	str	r5, [r4, #0]
 80091aa:	bf18      	it	ne
 80091ac:	6059      	strne	r1, [r3, #4]
 80091ae:	6863      	ldr	r3, [r4, #4]
 80091b0:	bf08      	it	eq
 80091b2:	6031      	streq	r1, [r6, #0]
 80091b4:	5162      	str	r2, [r4, r5]
 80091b6:	604b      	str	r3, [r1, #4]
 80091b8:	4638      	mov	r0, r7
 80091ba:	f104 060b 	add.w	r6, r4, #11
 80091be:	f000 ff69 	bl	800a094 <__malloc_unlock>
 80091c2:	f026 0607 	bic.w	r6, r6, #7
 80091c6:	1d23      	adds	r3, r4, #4
 80091c8:	1af2      	subs	r2, r6, r3
 80091ca:	d0b6      	beq.n	800913a <_malloc_r+0x22>
 80091cc:	1b9b      	subs	r3, r3, r6
 80091ce:	50a3      	str	r3, [r4, r2]
 80091d0:	e7b3      	b.n	800913a <_malloc_r+0x22>
 80091d2:	6862      	ldr	r2, [r4, #4]
 80091d4:	42a3      	cmp	r3, r4
 80091d6:	bf0c      	ite	eq
 80091d8:	6032      	streq	r2, [r6, #0]
 80091da:	605a      	strne	r2, [r3, #4]
 80091dc:	e7ec      	b.n	80091b8 <_malloc_r+0xa0>
 80091de:	4623      	mov	r3, r4
 80091e0:	6864      	ldr	r4, [r4, #4]
 80091e2:	e7b2      	b.n	800914a <_malloc_r+0x32>
 80091e4:	4634      	mov	r4, r6
 80091e6:	6876      	ldr	r6, [r6, #4]
 80091e8:	e7b9      	b.n	800915e <_malloc_r+0x46>
 80091ea:	230c      	movs	r3, #12
 80091ec:	603b      	str	r3, [r7, #0]
 80091ee:	4638      	mov	r0, r7
 80091f0:	f000 ff50 	bl	800a094 <__malloc_unlock>
 80091f4:	e7a1      	b.n	800913a <_malloc_r+0x22>
 80091f6:	6025      	str	r5, [r4, #0]
 80091f8:	e7de      	b.n	80091b8 <_malloc_r+0xa0>
 80091fa:	bf00      	nop
 80091fc:	2000384c 	.word	0x2000384c

08009200 <_sungetc_r>:
 8009200:	b538      	push	{r3, r4, r5, lr}
 8009202:	1c4b      	adds	r3, r1, #1
 8009204:	4614      	mov	r4, r2
 8009206:	d103      	bne.n	8009210 <_sungetc_r+0x10>
 8009208:	f04f 35ff 	mov.w	r5, #4294967295
 800920c:	4628      	mov	r0, r5
 800920e:	bd38      	pop	{r3, r4, r5, pc}
 8009210:	8993      	ldrh	r3, [r2, #12]
 8009212:	f023 0320 	bic.w	r3, r3, #32
 8009216:	8193      	strh	r3, [r2, #12]
 8009218:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800921a:	6852      	ldr	r2, [r2, #4]
 800921c:	b2cd      	uxtb	r5, r1
 800921e:	b18b      	cbz	r3, 8009244 <_sungetc_r+0x44>
 8009220:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009222:	4293      	cmp	r3, r2
 8009224:	dd08      	ble.n	8009238 <_sungetc_r+0x38>
 8009226:	6823      	ldr	r3, [r4, #0]
 8009228:	1e5a      	subs	r2, r3, #1
 800922a:	6022      	str	r2, [r4, #0]
 800922c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009230:	6863      	ldr	r3, [r4, #4]
 8009232:	3301      	adds	r3, #1
 8009234:	6063      	str	r3, [r4, #4]
 8009236:	e7e9      	b.n	800920c <_sungetc_r+0xc>
 8009238:	4621      	mov	r1, r4
 800923a:	f000 fec1 	bl	8009fc0 <__submore>
 800923e:	2800      	cmp	r0, #0
 8009240:	d0f1      	beq.n	8009226 <_sungetc_r+0x26>
 8009242:	e7e1      	b.n	8009208 <_sungetc_r+0x8>
 8009244:	6921      	ldr	r1, [r4, #16]
 8009246:	6823      	ldr	r3, [r4, #0]
 8009248:	b151      	cbz	r1, 8009260 <_sungetc_r+0x60>
 800924a:	4299      	cmp	r1, r3
 800924c:	d208      	bcs.n	8009260 <_sungetc_r+0x60>
 800924e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009252:	42a9      	cmp	r1, r5
 8009254:	d104      	bne.n	8009260 <_sungetc_r+0x60>
 8009256:	3b01      	subs	r3, #1
 8009258:	3201      	adds	r2, #1
 800925a:	6023      	str	r3, [r4, #0]
 800925c:	6062      	str	r2, [r4, #4]
 800925e:	e7d5      	b.n	800920c <_sungetc_r+0xc>
 8009260:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009264:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009268:	6363      	str	r3, [r4, #52]	; 0x34
 800926a:	2303      	movs	r3, #3
 800926c:	63a3      	str	r3, [r4, #56]	; 0x38
 800926e:	4623      	mov	r3, r4
 8009270:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009274:	6023      	str	r3, [r4, #0]
 8009276:	2301      	movs	r3, #1
 8009278:	e7dc      	b.n	8009234 <_sungetc_r+0x34>

0800927a <__ssrefill_r>:
 800927a:	b510      	push	{r4, lr}
 800927c:	460c      	mov	r4, r1
 800927e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009280:	b169      	cbz	r1, 800929e <__ssrefill_r+0x24>
 8009282:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009286:	4299      	cmp	r1, r3
 8009288:	d001      	beq.n	800928e <__ssrefill_r+0x14>
 800928a:	f7ff fed9 	bl	8009040 <_free_r>
 800928e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009290:	6063      	str	r3, [r4, #4]
 8009292:	2000      	movs	r0, #0
 8009294:	6360      	str	r0, [r4, #52]	; 0x34
 8009296:	b113      	cbz	r3, 800929e <__ssrefill_r+0x24>
 8009298:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800929a:	6023      	str	r3, [r4, #0]
 800929c:	bd10      	pop	{r4, pc}
 800929e:	6923      	ldr	r3, [r4, #16]
 80092a0:	6023      	str	r3, [r4, #0]
 80092a2:	2300      	movs	r3, #0
 80092a4:	6063      	str	r3, [r4, #4]
 80092a6:	89a3      	ldrh	r3, [r4, #12]
 80092a8:	f043 0320 	orr.w	r3, r3, #32
 80092ac:	81a3      	strh	r3, [r4, #12]
 80092ae:	f04f 30ff 	mov.w	r0, #4294967295
 80092b2:	e7f3      	b.n	800929c <__ssrefill_r+0x22>

080092b4 <__ssvfiscanf_r>:
 80092b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092b8:	460c      	mov	r4, r1
 80092ba:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80092be:	2100      	movs	r1, #0
 80092c0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80092c4:	49a6      	ldr	r1, [pc, #664]	; (8009560 <__ssvfiscanf_r+0x2ac>)
 80092c6:	91a0      	str	r1, [sp, #640]	; 0x280
 80092c8:	f10d 0804 	add.w	r8, sp, #4
 80092cc:	49a5      	ldr	r1, [pc, #660]	; (8009564 <__ssvfiscanf_r+0x2b0>)
 80092ce:	4fa6      	ldr	r7, [pc, #664]	; (8009568 <__ssvfiscanf_r+0x2b4>)
 80092d0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800956c <__ssvfiscanf_r+0x2b8>
 80092d4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80092d8:	4606      	mov	r6, r0
 80092da:	91a1      	str	r1, [sp, #644]	; 0x284
 80092dc:	9300      	str	r3, [sp, #0]
 80092de:	7813      	ldrb	r3, [r2, #0]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	f000 815a 	beq.w	800959a <__ssvfiscanf_r+0x2e6>
 80092e6:	5dd9      	ldrb	r1, [r3, r7]
 80092e8:	f011 0108 	ands.w	r1, r1, #8
 80092ec:	f102 0501 	add.w	r5, r2, #1
 80092f0:	d019      	beq.n	8009326 <__ssvfiscanf_r+0x72>
 80092f2:	6863      	ldr	r3, [r4, #4]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	dd0f      	ble.n	8009318 <__ssvfiscanf_r+0x64>
 80092f8:	6823      	ldr	r3, [r4, #0]
 80092fa:	781a      	ldrb	r2, [r3, #0]
 80092fc:	5cba      	ldrb	r2, [r7, r2]
 80092fe:	0712      	lsls	r2, r2, #28
 8009300:	d401      	bmi.n	8009306 <__ssvfiscanf_r+0x52>
 8009302:	462a      	mov	r2, r5
 8009304:	e7eb      	b.n	80092de <__ssvfiscanf_r+0x2a>
 8009306:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009308:	3201      	adds	r2, #1
 800930a:	9245      	str	r2, [sp, #276]	; 0x114
 800930c:	6862      	ldr	r2, [r4, #4]
 800930e:	3301      	adds	r3, #1
 8009310:	3a01      	subs	r2, #1
 8009312:	6062      	str	r2, [r4, #4]
 8009314:	6023      	str	r3, [r4, #0]
 8009316:	e7ec      	b.n	80092f2 <__ssvfiscanf_r+0x3e>
 8009318:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800931a:	4621      	mov	r1, r4
 800931c:	4630      	mov	r0, r6
 800931e:	4798      	blx	r3
 8009320:	2800      	cmp	r0, #0
 8009322:	d0e9      	beq.n	80092f8 <__ssvfiscanf_r+0x44>
 8009324:	e7ed      	b.n	8009302 <__ssvfiscanf_r+0x4e>
 8009326:	2b25      	cmp	r3, #37	; 0x25
 8009328:	d012      	beq.n	8009350 <__ssvfiscanf_r+0x9c>
 800932a:	469a      	mov	sl, r3
 800932c:	6863      	ldr	r3, [r4, #4]
 800932e:	2b00      	cmp	r3, #0
 8009330:	f340 8091 	ble.w	8009456 <__ssvfiscanf_r+0x1a2>
 8009334:	6822      	ldr	r2, [r4, #0]
 8009336:	7813      	ldrb	r3, [r2, #0]
 8009338:	4553      	cmp	r3, sl
 800933a:	f040 812e 	bne.w	800959a <__ssvfiscanf_r+0x2e6>
 800933e:	6863      	ldr	r3, [r4, #4]
 8009340:	3b01      	subs	r3, #1
 8009342:	6063      	str	r3, [r4, #4]
 8009344:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009346:	3201      	adds	r2, #1
 8009348:	3301      	adds	r3, #1
 800934a:	6022      	str	r2, [r4, #0]
 800934c:	9345      	str	r3, [sp, #276]	; 0x114
 800934e:	e7d8      	b.n	8009302 <__ssvfiscanf_r+0x4e>
 8009350:	9141      	str	r1, [sp, #260]	; 0x104
 8009352:	9143      	str	r1, [sp, #268]	; 0x10c
 8009354:	7853      	ldrb	r3, [r2, #1]
 8009356:	2b2a      	cmp	r3, #42	; 0x2a
 8009358:	bf02      	ittt	eq
 800935a:	2310      	moveq	r3, #16
 800935c:	1c95      	addeq	r5, r2, #2
 800935e:	9341      	streq	r3, [sp, #260]	; 0x104
 8009360:	220a      	movs	r2, #10
 8009362:	46aa      	mov	sl, r5
 8009364:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009368:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800936c:	2b09      	cmp	r3, #9
 800936e:	d91d      	bls.n	80093ac <__ssvfiscanf_r+0xf8>
 8009370:	487e      	ldr	r0, [pc, #504]	; (800956c <__ssvfiscanf_r+0x2b8>)
 8009372:	2203      	movs	r2, #3
 8009374:	f7f6 ff44 	bl	8000200 <memchr>
 8009378:	b140      	cbz	r0, 800938c <__ssvfiscanf_r+0xd8>
 800937a:	2301      	movs	r3, #1
 800937c:	eba0 0009 	sub.w	r0, r0, r9
 8009380:	fa03 f000 	lsl.w	r0, r3, r0
 8009384:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009386:	4318      	orrs	r0, r3
 8009388:	9041      	str	r0, [sp, #260]	; 0x104
 800938a:	4655      	mov	r5, sl
 800938c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009390:	2b78      	cmp	r3, #120	; 0x78
 8009392:	d806      	bhi.n	80093a2 <__ssvfiscanf_r+0xee>
 8009394:	2b57      	cmp	r3, #87	; 0x57
 8009396:	d810      	bhi.n	80093ba <__ssvfiscanf_r+0x106>
 8009398:	2b25      	cmp	r3, #37	; 0x25
 800939a:	d0c6      	beq.n	800932a <__ssvfiscanf_r+0x76>
 800939c:	d856      	bhi.n	800944c <__ssvfiscanf_r+0x198>
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d064      	beq.n	800946c <__ssvfiscanf_r+0x1b8>
 80093a2:	2303      	movs	r3, #3
 80093a4:	9347      	str	r3, [sp, #284]	; 0x11c
 80093a6:	230a      	movs	r3, #10
 80093a8:	9342      	str	r3, [sp, #264]	; 0x108
 80093aa:	e071      	b.n	8009490 <__ssvfiscanf_r+0x1dc>
 80093ac:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80093ae:	fb02 1103 	mla	r1, r2, r3, r1
 80093b2:	3930      	subs	r1, #48	; 0x30
 80093b4:	9143      	str	r1, [sp, #268]	; 0x10c
 80093b6:	4655      	mov	r5, sl
 80093b8:	e7d3      	b.n	8009362 <__ssvfiscanf_r+0xae>
 80093ba:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80093be:	2a20      	cmp	r2, #32
 80093c0:	d8ef      	bhi.n	80093a2 <__ssvfiscanf_r+0xee>
 80093c2:	a101      	add	r1, pc, #4	; (adr r1, 80093c8 <__ssvfiscanf_r+0x114>)
 80093c4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80093c8:	0800947b 	.word	0x0800947b
 80093cc:	080093a3 	.word	0x080093a3
 80093d0:	080093a3 	.word	0x080093a3
 80093d4:	080094d9 	.word	0x080094d9
 80093d8:	080093a3 	.word	0x080093a3
 80093dc:	080093a3 	.word	0x080093a3
 80093e0:	080093a3 	.word	0x080093a3
 80093e4:	080093a3 	.word	0x080093a3
 80093e8:	080093a3 	.word	0x080093a3
 80093ec:	080093a3 	.word	0x080093a3
 80093f0:	080093a3 	.word	0x080093a3
 80093f4:	080094ef 	.word	0x080094ef
 80093f8:	080094c5 	.word	0x080094c5
 80093fc:	08009453 	.word	0x08009453
 8009400:	08009453 	.word	0x08009453
 8009404:	08009453 	.word	0x08009453
 8009408:	080093a3 	.word	0x080093a3
 800940c:	080094c9 	.word	0x080094c9
 8009410:	080093a3 	.word	0x080093a3
 8009414:	080093a3 	.word	0x080093a3
 8009418:	080093a3 	.word	0x080093a3
 800941c:	080093a3 	.word	0x080093a3
 8009420:	080094ff 	.word	0x080094ff
 8009424:	080094d1 	.word	0x080094d1
 8009428:	08009473 	.word	0x08009473
 800942c:	080093a3 	.word	0x080093a3
 8009430:	080093a3 	.word	0x080093a3
 8009434:	080094fb 	.word	0x080094fb
 8009438:	080093a3 	.word	0x080093a3
 800943c:	080094c5 	.word	0x080094c5
 8009440:	080093a3 	.word	0x080093a3
 8009444:	080093a3 	.word	0x080093a3
 8009448:	0800947b 	.word	0x0800947b
 800944c:	3b45      	subs	r3, #69	; 0x45
 800944e:	2b02      	cmp	r3, #2
 8009450:	d8a7      	bhi.n	80093a2 <__ssvfiscanf_r+0xee>
 8009452:	2305      	movs	r3, #5
 8009454:	e01b      	b.n	800948e <__ssvfiscanf_r+0x1da>
 8009456:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009458:	4621      	mov	r1, r4
 800945a:	4630      	mov	r0, r6
 800945c:	4798      	blx	r3
 800945e:	2800      	cmp	r0, #0
 8009460:	f43f af68 	beq.w	8009334 <__ssvfiscanf_r+0x80>
 8009464:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009466:	2800      	cmp	r0, #0
 8009468:	f040 808d 	bne.w	8009586 <__ssvfiscanf_r+0x2d2>
 800946c:	f04f 30ff 	mov.w	r0, #4294967295
 8009470:	e08f      	b.n	8009592 <__ssvfiscanf_r+0x2de>
 8009472:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009474:	f042 0220 	orr.w	r2, r2, #32
 8009478:	9241      	str	r2, [sp, #260]	; 0x104
 800947a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800947c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009480:	9241      	str	r2, [sp, #260]	; 0x104
 8009482:	2210      	movs	r2, #16
 8009484:	2b6f      	cmp	r3, #111	; 0x6f
 8009486:	9242      	str	r2, [sp, #264]	; 0x108
 8009488:	bf34      	ite	cc
 800948a:	2303      	movcc	r3, #3
 800948c:	2304      	movcs	r3, #4
 800948e:	9347      	str	r3, [sp, #284]	; 0x11c
 8009490:	6863      	ldr	r3, [r4, #4]
 8009492:	2b00      	cmp	r3, #0
 8009494:	dd42      	ble.n	800951c <__ssvfiscanf_r+0x268>
 8009496:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009498:	0659      	lsls	r1, r3, #25
 800949a:	d404      	bmi.n	80094a6 <__ssvfiscanf_r+0x1f2>
 800949c:	6823      	ldr	r3, [r4, #0]
 800949e:	781a      	ldrb	r2, [r3, #0]
 80094a0:	5cba      	ldrb	r2, [r7, r2]
 80094a2:	0712      	lsls	r2, r2, #28
 80094a4:	d441      	bmi.n	800952a <__ssvfiscanf_r+0x276>
 80094a6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80094a8:	2b02      	cmp	r3, #2
 80094aa:	dc50      	bgt.n	800954e <__ssvfiscanf_r+0x29a>
 80094ac:	466b      	mov	r3, sp
 80094ae:	4622      	mov	r2, r4
 80094b0:	a941      	add	r1, sp, #260	; 0x104
 80094b2:	4630      	mov	r0, r6
 80094b4:	f000 fb64 	bl	8009b80 <_scanf_chars>
 80094b8:	2801      	cmp	r0, #1
 80094ba:	d06e      	beq.n	800959a <__ssvfiscanf_r+0x2e6>
 80094bc:	2802      	cmp	r0, #2
 80094be:	f47f af20 	bne.w	8009302 <__ssvfiscanf_r+0x4e>
 80094c2:	e7cf      	b.n	8009464 <__ssvfiscanf_r+0x1b0>
 80094c4:	220a      	movs	r2, #10
 80094c6:	e7dd      	b.n	8009484 <__ssvfiscanf_r+0x1d0>
 80094c8:	2300      	movs	r3, #0
 80094ca:	9342      	str	r3, [sp, #264]	; 0x108
 80094cc:	2303      	movs	r3, #3
 80094ce:	e7de      	b.n	800948e <__ssvfiscanf_r+0x1da>
 80094d0:	2308      	movs	r3, #8
 80094d2:	9342      	str	r3, [sp, #264]	; 0x108
 80094d4:	2304      	movs	r3, #4
 80094d6:	e7da      	b.n	800948e <__ssvfiscanf_r+0x1da>
 80094d8:	4629      	mov	r1, r5
 80094da:	4640      	mov	r0, r8
 80094dc:	f000 fcc4 	bl	8009e68 <__sccl>
 80094e0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80094e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094e6:	9341      	str	r3, [sp, #260]	; 0x104
 80094e8:	4605      	mov	r5, r0
 80094ea:	2301      	movs	r3, #1
 80094ec:	e7cf      	b.n	800948e <__ssvfiscanf_r+0x1da>
 80094ee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80094f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094f4:	9341      	str	r3, [sp, #260]	; 0x104
 80094f6:	2300      	movs	r3, #0
 80094f8:	e7c9      	b.n	800948e <__ssvfiscanf_r+0x1da>
 80094fa:	2302      	movs	r3, #2
 80094fc:	e7c7      	b.n	800948e <__ssvfiscanf_r+0x1da>
 80094fe:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009500:	06c3      	lsls	r3, r0, #27
 8009502:	f53f aefe 	bmi.w	8009302 <__ssvfiscanf_r+0x4e>
 8009506:	9b00      	ldr	r3, [sp, #0]
 8009508:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800950a:	1d19      	adds	r1, r3, #4
 800950c:	9100      	str	r1, [sp, #0]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f010 0f01 	tst.w	r0, #1
 8009514:	bf14      	ite	ne
 8009516:	801a      	strhne	r2, [r3, #0]
 8009518:	601a      	streq	r2, [r3, #0]
 800951a:	e6f2      	b.n	8009302 <__ssvfiscanf_r+0x4e>
 800951c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800951e:	4621      	mov	r1, r4
 8009520:	4630      	mov	r0, r6
 8009522:	4798      	blx	r3
 8009524:	2800      	cmp	r0, #0
 8009526:	d0b6      	beq.n	8009496 <__ssvfiscanf_r+0x1e2>
 8009528:	e79c      	b.n	8009464 <__ssvfiscanf_r+0x1b0>
 800952a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800952c:	3201      	adds	r2, #1
 800952e:	9245      	str	r2, [sp, #276]	; 0x114
 8009530:	6862      	ldr	r2, [r4, #4]
 8009532:	3a01      	subs	r2, #1
 8009534:	2a00      	cmp	r2, #0
 8009536:	6062      	str	r2, [r4, #4]
 8009538:	dd02      	ble.n	8009540 <__ssvfiscanf_r+0x28c>
 800953a:	3301      	adds	r3, #1
 800953c:	6023      	str	r3, [r4, #0]
 800953e:	e7ad      	b.n	800949c <__ssvfiscanf_r+0x1e8>
 8009540:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009542:	4621      	mov	r1, r4
 8009544:	4630      	mov	r0, r6
 8009546:	4798      	blx	r3
 8009548:	2800      	cmp	r0, #0
 800954a:	d0a7      	beq.n	800949c <__ssvfiscanf_r+0x1e8>
 800954c:	e78a      	b.n	8009464 <__ssvfiscanf_r+0x1b0>
 800954e:	2b04      	cmp	r3, #4
 8009550:	dc0e      	bgt.n	8009570 <__ssvfiscanf_r+0x2bc>
 8009552:	466b      	mov	r3, sp
 8009554:	4622      	mov	r2, r4
 8009556:	a941      	add	r1, sp, #260	; 0x104
 8009558:	4630      	mov	r0, r6
 800955a:	f000 fb6b 	bl	8009c34 <_scanf_i>
 800955e:	e7ab      	b.n	80094b8 <__ssvfiscanf_r+0x204>
 8009560:	08009201 	.word	0x08009201
 8009564:	0800927b 	.word	0x0800927b
 8009568:	0800a531 	.word	0x0800a531
 800956c:	0800a694 	.word	0x0800a694
 8009570:	4b0b      	ldr	r3, [pc, #44]	; (80095a0 <__ssvfiscanf_r+0x2ec>)
 8009572:	2b00      	cmp	r3, #0
 8009574:	f43f aec5 	beq.w	8009302 <__ssvfiscanf_r+0x4e>
 8009578:	466b      	mov	r3, sp
 800957a:	4622      	mov	r2, r4
 800957c:	a941      	add	r1, sp, #260	; 0x104
 800957e:	4630      	mov	r0, r6
 8009580:	f3af 8000 	nop.w
 8009584:	e798      	b.n	80094b8 <__ssvfiscanf_r+0x204>
 8009586:	89a3      	ldrh	r3, [r4, #12]
 8009588:	f013 0f40 	tst.w	r3, #64	; 0x40
 800958c:	bf18      	it	ne
 800958e:	f04f 30ff 	movne.w	r0, #4294967295
 8009592:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8009596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800959a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800959c:	e7f9      	b.n	8009592 <__ssvfiscanf_r+0x2de>
 800959e:	bf00      	nop
 80095a0:	00000000 	.word	0x00000000

080095a4 <__sfputc_r>:
 80095a4:	6893      	ldr	r3, [r2, #8]
 80095a6:	3b01      	subs	r3, #1
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	b410      	push	{r4}
 80095ac:	6093      	str	r3, [r2, #8]
 80095ae:	da08      	bge.n	80095c2 <__sfputc_r+0x1e>
 80095b0:	6994      	ldr	r4, [r2, #24]
 80095b2:	42a3      	cmp	r3, r4
 80095b4:	db01      	blt.n	80095ba <__sfputc_r+0x16>
 80095b6:	290a      	cmp	r1, #10
 80095b8:	d103      	bne.n	80095c2 <__sfputc_r+0x1e>
 80095ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095be:	f7ff b9f3 	b.w	80089a8 <__swbuf_r>
 80095c2:	6813      	ldr	r3, [r2, #0]
 80095c4:	1c58      	adds	r0, r3, #1
 80095c6:	6010      	str	r0, [r2, #0]
 80095c8:	7019      	strb	r1, [r3, #0]
 80095ca:	4608      	mov	r0, r1
 80095cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095d0:	4770      	bx	lr

080095d2 <__sfputs_r>:
 80095d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095d4:	4606      	mov	r6, r0
 80095d6:	460f      	mov	r7, r1
 80095d8:	4614      	mov	r4, r2
 80095da:	18d5      	adds	r5, r2, r3
 80095dc:	42ac      	cmp	r4, r5
 80095de:	d101      	bne.n	80095e4 <__sfputs_r+0x12>
 80095e0:	2000      	movs	r0, #0
 80095e2:	e007      	b.n	80095f4 <__sfputs_r+0x22>
 80095e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095e8:	463a      	mov	r2, r7
 80095ea:	4630      	mov	r0, r6
 80095ec:	f7ff ffda 	bl	80095a4 <__sfputc_r>
 80095f0:	1c43      	adds	r3, r0, #1
 80095f2:	d1f3      	bne.n	80095dc <__sfputs_r+0xa>
 80095f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080095f8 <_vfiprintf_r>:
 80095f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095fc:	460d      	mov	r5, r1
 80095fe:	b09d      	sub	sp, #116	; 0x74
 8009600:	4614      	mov	r4, r2
 8009602:	4698      	mov	r8, r3
 8009604:	4606      	mov	r6, r0
 8009606:	b118      	cbz	r0, 8009610 <_vfiprintf_r+0x18>
 8009608:	6983      	ldr	r3, [r0, #24]
 800960a:	b90b      	cbnz	r3, 8009610 <_vfiprintf_r+0x18>
 800960c:	f7ff fbe6 	bl	8008ddc <__sinit>
 8009610:	4b89      	ldr	r3, [pc, #548]	; (8009838 <_vfiprintf_r+0x240>)
 8009612:	429d      	cmp	r5, r3
 8009614:	d11b      	bne.n	800964e <_vfiprintf_r+0x56>
 8009616:	6875      	ldr	r5, [r6, #4]
 8009618:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800961a:	07d9      	lsls	r1, r3, #31
 800961c:	d405      	bmi.n	800962a <_vfiprintf_r+0x32>
 800961e:	89ab      	ldrh	r3, [r5, #12]
 8009620:	059a      	lsls	r2, r3, #22
 8009622:	d402      	bmi.n	800962a <_vfiprintf_r+0x32>
 8009624:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009626:	f7ff fc89 	bl	8008f3c <__retarget_lock_acquire_recursive>
 800962a:	89ab      	ldrh	r3, [r5, #12]
 800962c:	071b      	lsls	r3, r3, #28
 800962e:	d501      	bpl.n	8009634 <_vfiprintf_r+0x3c>
 8009630:	692b      	ldr	r3, [r5, #16]
 8009632:	b9eb      	cbnz	r3, 8009670 <_vfiprintf_r+0x78>
 8009634:	4629      	mov	r1, r5
 8009636:	4630      	mov	r0, r6
 8009638:	f7ff fa1a 	bl	8008a70 <__swsetup_r>
 800963c:	b1c0      	cbz	r0, 8009670 <_vfiprintf_r+0x78>
 800963e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009640:	07dc      	lsls	r4, r3, #31
 8009642:	d50e      	bpl.n	8009662 <_vfiprintf_r+0x6a>
 8009644:	f04f 30ff 	mov.w	r0, #4294967295
 8009648:	b01d      	add	sp, #116	; 0x74
 800964a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800964e:	4b7b      	ldr	r3, [pc, #492]	; (800983c <_vfiprintf_r+0x244>)
 8009650:	429d      	cmp	r5, r3
 8009652:	d101      	bne.n	8009658 <_vfiprintf_r+0x60>
 8009654:	68b5      	ldr	r5, [r6, #8]
 8009656:	e7df      	b.n	8009618 <_vfiprintf_r+0x20>
 8009658:	4b79      	ldr	r3, [pc, #484]	; (8009840 <_vfiprintf_r+0x248>)
 800965a:	429d      	cmp	r5, r3
 800965c:	bf08      	it	eq
 800965e:	68f5      	ldreq	r5, [r6, #12]
 8009660:	e7da      	b.n	8009618 <_vfiprintf_r+0x20>
 8009662:	89ab      	ldrh	r3, [r5, #12]
 8009664:	0598      	lsls	r0, r3, #22
 8009666:	d4ed      	bmi.n	8009644 <_vfiprintf_r+0x4c>
 8009668:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800966a:	f7ff fc68 	bl	8008f3e <__retarget_lock_release_recursive>
 800966e:	e7e9      	b.n	8009644 <_vfiprintf_r+0x4c>
 8009670:	2300      	movs	r3, #0
 8009672:	9309      	str	r3, [sp, #36]	; 0x24
 8009674:	2320      	movs	r3, #32
 8009676:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800967a:	f8cd 800c 	str.w	r8, [sp, #12]
 800967e:	2330      	movs	r3, #48	; 0x30
 8009680:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009844 <_vfiprintf_r+0x24c>
 8009684:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009688:	f04f 0901 	mov.w	r9, #1
 800968c:	4623      	mov	r3, r4
 800968e:	469a      	mov	sl, r3
 8009690:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009694:	b10a      	cbz	r2, 800969a <_vfiprintf_r+0xa2>
 8009696:	2a25      	cmp	r2, #37	; 0x25
 8009698:	d1f9      	bne.n	800968e <_vfiprintf_r+0x96>
 800969a:	ebba 0b04 	subs.w	fp, sl, r4
 800969e:	d00b      	beq.n	80096b8 <_vfiprintf_r+0xc0>
 80096a0:	465b      	mov	r3, fp
 80096a2:	4622      	mov	r2, r4
 80096a4:	4629      	mov	r1, r5
 80096a6:	4630      	mov	r0, r6
 80096a8:	f7ff ff93 	bl	80095d2 <__sfputs_r>
 80096ac:	3001      	adds	r0, #1
 80096ae:	f000 80aa 	beq.w	8009806 <_vfiprintf_r+0x20e>
 80096b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096b4:	445a      	add	r2, fp
 80096b6:	9209      	str	r2, [sp, #36]	; 0x24
 80096b8:	f89a 3000 	ldrb.w	r3, [sl]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f000 80a2 	beq.w	8009806 <_vfiprintf_r+0x20e>
 80096c2:	2300      	movs	r3, #0
 80096c4:	f04f 32ff 	mov.w	r2, #4294967295
 80096c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096cc:	f10a 0a01 	add.w	sl, sl, #1
 80096d0:	9304      	str	r3, [sp, #16]
 80096d2:	9307      	str	r3, [sp, #28]
 80096d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096d8:	931a      	str	r3, [sp, #104]	; 0x68
 80096da:	4654      	mov	r4, sl
 80096dc:	2205      	movs	r2, #5
 80096de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096e2:	4858      	ldr	r0, [pc, #352]	; (8009844 <_vfiprintf_r+0x24c>)
 80096e4:	f7f6 fd8c 	bl	8000200 <memchr>
 80096e8:	9a04      	ldr	r2, [sp, #16]
 80096ea:	b9d8      	cbnz	r0, 8009724 <_vfiprintf_r+0x12c>
 80096ec:	06d1      	lsls	r1, r2, #27
 80096ee:	bf44      	itt	mi
 80096f0:	2320      	movmi	r3, #32
 80096f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096f6:	0713      	lsls	r3, r2, #28
 80096f8:	bf44      	itt	mi
 80096fa:	232b      	movmi	r3, #43	; 0x2b
 80096fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009700:	f89a 3000 	ldrb.w	r3, [sl]
 8009704:	2b2a      	cmp	r3, #42	; 0x2a
 8009706:	d015      	beq.n	8009734 <_vfiprintf_r+0x13c>
 8009708:	9a07      	ldr	r2, [sp, #28]
 800970a:	4654      	mov	r4, sl
 800970c:	2000      	movs	r0, #0
 800970e:	f04f 0c0a 	mov.w	ip, #10
 8009712:	4621      	mov	r1, r4
 8009714:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009718:	3b30      	subs	r3, #48	; 0x30
 800971a:	2b09      	cmp	r3, #9
 800971c:	d94e      	bls.n	80097bc <_vfiprintf_r+0x1c4>
 800971e:	b1b0      	cbz	r0, 800974e <_vfiprintf_r+0x156>
 8009720:	9207      	str	r2, [sp, #28]
 8009722:	e014      	b.n	800974e <_vfiprintf_r+0x156>
 8009724:	eba0 0308 	sub.w	r3, r0, r8
 8009728:	fa09 f303 	lsl.w	r3, r9, r3
 800972c:	4313      	orrs	r3, r2
 800972e:	9304      	str	r3, [sp, #16]
 8009730:	46a2      	mov	sl, r4
 8009732:	e7d2      	b.n	80096da <_vfiprintf_r+0xe2>
 8009734:	9b03      	ldr	r3, [sp, #12]
 8009736:	1d19      	adds	r1, r3, #4
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	9103      	str	r1, [sp, #12]
 800973c:	2b00      	cmp	r3, #0
 800973e:	bfbb      	ittet	lt
 8009740:	425b      	neglt	r3, r3
 8009742:	f042 0202 	orrlt.w	r2, r2, #2
 8009746:	9307      	strge	r3, [sp, #28]
 8009748:	9307      	strlt	r3, [sp, #28]
 800974a:	bfb8      	it	lt
 800974c:	9204      	strlt	r2, [sp, #16]
 800974e:	7823      	ldrb	r3, [r4, #0]
 8009750:	2b2e      	cmp	r3, #46	; 0x2e
 8009752:	d10c      	bne.n	800976e <_vfiprintf_r+0x176>
 8009754:	7863      	ldrb	r3, [r4, #1]
 8009756:	2b2a      	cmp	r3, #42	; 0x2a
 8009758:	d135      	bne.n	80097c6 <_vfiprintf_r+0x1ce>
 800975a:	9b03      	ldr	r3, [sp, #12]
 800975c:	1d1a      	adds	r2, r3, #4
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	9203      	str	r2, [sp, #12]
 8009762:	2b00      	cmp	r3, #0
 8009764:	bfb8      	it	lt
 8009766:	f04f 33ff 	movlt.w	r3, #4294967295
 800976a:	3402      	adds	r4, #2
 800976c:	9305      	str	r3, [sp, #20]
 800976e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009854 <_vfiprintf_r+0x25c>
 8009772:	7821      	ldrb	r1, [r4, #0]
 8009774:	2203      	movs	r2, #3
 8009776:	4650      	mov	r0, sl
 8009778:	f7f6 fd42 	bl	8000200 <memchr>
 800977c:	b140      	cbz	r0, 8009790 <_vfiprintf_r+0x198>
 800977e:	2340      	movs	r3, #64	; 0x40
 8009780:	eba0 000a 	sub.w	r0, r0, sl
 8009784:	fa03 f000 	lsl.w	r0, r3, r0
 8009788:	9b04      	ldr	r3, [sp, #16]
 800978a:	4303      	orrs	r3, r0
 800978c:	3401      	adds	r4, #1
 800978e:	9304      	str	r3, [sp, #16]
 8009790:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009794:	482c      	ldr	r0, [pc, #176]	; (8009848 <_vfiprintf_r+0x250>)
 8009796:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800979a:	2206      	movs	r2, #6
 800979c:	f7f6 fd30 	bl	8000200 <memchr>
 80097a0:	2800      	cmp	r0, #0
 80097a2:	d03f      	beq.n	8009824 <_vfiprintf_r+0x22c>
 80097a4:	4b29      	ldr	r3, [pc, #164]	; (800984c <_vfiprintf_r+0x254>)
 80097a6:	bb1b      	cbnz	r3, 80097f0 <_vfiprintf_r+0x1f8>
 80097a8:	9b03      	ldr	r3, [sp, #12]
 80097aa:	3307      	adds	r3, #7
 80097ac:	f023 0307 	bic.w	r3, r3, #7
 80097b0:	3308      	adds	r3, #8
 80097b2:	9303      	str	r3, [sp, #12]
 80097b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097b6:	443b      	add	r3, r7
 80097b8:	9309      	str	r3, [sp, #36]	; 0x24
 80097ba:	e767      	b.n	800968c <_vfiprintf_r+0x94>
 80097bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80097c0:	460c      	mov	r4, r1
 80097c2:	2001      	movs	r0, #1
 80097c4:	e7a5      	b.n	8009712 <_vfiprintf_r+0x11a>
 80097c6:	2300      	movs	r3, #0
 80097c8:	3401      	adds	r4, #1
 80097ca:	9305      	str	r3, [sp, #20]
 80097cc:	4619      	mov	r1, r3
 80097ce:	f04f 0c0a 	mov.w	ip, #10
 80097d2:	4620      	mov	r0, r4
 80097d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097d8:	3a30      	subs	r2, #48	; 0x30
 80097da:	2a09      	cmp	r2, #9
 80097dc:	d903      	bls.n	80097e6 <_vfiprintf_r+0x1ee>
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d0c5      	beq.n	800976e <_vfiprintf_r+0x176>
 80097e2:	9105      	str	r1, [sp, #20]
 80097e4:	e7c3      	b.n	800976e <_vfiprintf_r+0x176>
 80097e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80097ea:	4604      	mov	r4, r0
 80097ec:	2301      	movs	r3, #1
 80097ee:	e7f0      	b.n	80097d2 <_vfiprintf_r+0x1da>
 80097f0:	ab03      	add	r3, sp, #12
 80097f2:	9300      	str	r3, [sp, #0]
 80097f4:	462a      	mov	r2, r5
 80097f6:	4b16      	ldr	r3, [pc, #88]	; (8009850 <_vfiprintf_r+0x258>)
 80097f8:	a904      	add	r1, sp, #16
 80097fa:	4630      	mov	r0, r6
 80097fc:	f3af 8000 	nop.w
 8009800:	4607      	mov	r7, r0
 8009802:	1c78      	adds	r0, r7, #1
 8009804:	d1d6      	bne.n	80097b4 <_vfiprintf_r+0x1bc>
 8009806:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009808:	07d9      	lsls	r1, r3, #31
 800980a:	d405      	bmi.n	8009818 <_vfiprintf_r+0x220>
 800980c:	89ab      	ldrh	r3, [r5, #12]
 800980e:	059a      	lsls	r2, r3, #22
 8009810:	d402      	bmi.n	8009818 <_vfiprintf_r+0x220>
 8009812:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009814:	f7ff fb93 	bl	8008f3e <__retarget_lock_release_recursive>
 8009818:	89ab      	ldrh	r3, [r5, #12]
 800981a:	065b      	lsls	r3, r3, #25
 800981c:	f53f af12 	bmi.w	8009644 <_vfiprintf_r+0x4c>
 8009820:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009822:	e711      	b.n	8009648 <_vfiprintf_r+0x50>
 8009824:	ab03      	add	r3, sp, #12
 8009826:	9300      	str	r3, [sp, #0]
 8009828:	462a      	mov	r2, r5
 800982a:	4b09      	ldr	r3, [pc, #36]	; (8009850 <_vfiprintf_r+0x258>)
 800982c:	a904      	add	r1, sp, #16
 800982e:	4630      	mov	r0, r6
 8009830:	f000 f880 	bl	8009934 <_printf_i>
 8009834:	e7e4      	b.n	8009800 <_vfiprintf_r+0x208>
 8009836:	bf00      	nop
 8009838:	0800a654 	.word	0x0800a654
 800983c:	0800a674 	.word	0x0800a674
 8009840:	0800a634 	.word	0x0800a634
 8009844:	0800a698 	.word	0x0800a698
 8009848:	0800a69e 	.word	0x0800a69e
 800984c:	00000000 	.word	0x00000000
 8009850:	080095d3 	.word	0x080095d3
 8009854:	0800a694 	.word	0x0800a694

08009858 <_printf_common>:
 8009858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800985c:	4616      	mov	r6, r2
 800985e:	4699      	mov	r9, r3
 8009860:	688a      	ldr	r2, [r1, #8]
 8009862:	690b      	ldr	r3, [r1, #16]
 8009864:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009868:	4293      	cmp	r3, r2
 800986a:	bfb8      	it	lt
 800986c:	4613      	movlt	r3, r2
 800986e:	6033      	str	r3, [r6, #0]
 8009870:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009874:	4607      	mov	r7, r0
 8009876:	460c      	mov	r4, r1
 8009878:	b10a      	cbz	r2, 800987e <_printf_common+0x26>
 800987a:	3301      	adds	r3, #1
 800987c:	6033      	str	r3, [r6, #0]
 800987e:	6823      	ldr	r3, [r4, #0]
 8009880:	0699      	lsls	r1, r3, #26
 8009882:	bf42      	ittt	mi
 8009884:	6833      	ldrmi	r3, [r6, #0]
 8009886:	3302      	addmi	r3, #2
 8009888:	6033      	strmi	r3, [r6, #0]
 800988a:	6825      	ldr	r5, [r4, #0]
 800988c:	f015 0506 	ands.w	r5, r5, #6
 8009890:	d106      	bne.n	80098a0 <_printf_common+0x48>
 8009892:	f104 0a19 	add.w	sl, r4, #25
 8009896:	68e3      	ldr	r3, [r4, #12]
 8009898:	6832      	ldr	r2, [r6, #0]
 800989a:	1a9b      	subs	r3, r3, r2
 800989c:	42ab      	cmp	r3, r5
 800989e:	dc26      	bgt.n	80098ee <_printf_common+0x96>
 80098a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80098a4:	1e13      	subs	r3, r2, #0
 80098a6:	6822      	ldr	r2, [r4, #0]
 80098a8:	bf18      	it	ne
 80098aa:	2301      	movne	r3, #1
 80098ac:	0692      	lsls	r2, r2, #26
 80098ae:	d42b      	bmi.n	8009908 <_printf_common+0xb0>
 80098b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80098b4:	4649      	mov	r1, r9
 80098b6:	4638      	mov	r0, r7
 80098b8:	47c0      	blx	r8
 80098ba:	3001      	adds	r0, #1
 80098bc:	d01e      	beq.n	80098fc <_printf_common+0xa4>
 80098be:	6823      	ldr	r3, [r4, #0]
 80098c0:	68e5      	ldr	r5, [r4, #12]
 80098c2:	6832      	ldr	r2, [r6, #0]
 80098c4:	f003 0306 	and.w	r3, r3, #6
 80098c8:	2b04      	cmp	r3, #4
 80098ca:	bf08      	it	eq
 80098cc:	1aad      	subeq	r5, r5, r2
 80098ce:	68a3      	ldr	r3, [r4, #8]
 80098d0:	6922      	ldr	r2, [r4, #16]
 80098d2:	bf0c      	ite	eq
 80098d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80098d8:	2500      	movne	r5, #0
 80098da:	4293      	cmp	r3, r2
 80098dc:	bfc4      	itt	gt
 80098de:	1a9b      	subgt	r3, r3, r2
 80098e0:	18ed      	addgt	r5, r5, r3
 80098e2:	2600      	movs	r6, #0
 80098e4:	341a      	adds	r4, #26
 80098e6:	42b5      	cmp	r5, r6
 80098e8:	d11a      	bne.n	8009920 <_printf_common+0xc8>
 80098ea:	2000      	movs	r0, #0
 80098ec:	e008      	b.n	8009900 <_printf_common+0xa8>
 80098ee:	2301      	movs	r3, #1
 80098f0:	4652      	mov	r2, sl
 80098f2:	4649      	mov	r1, r9
 80098f4:	4638      	mov	r0, r7
 80098f6:	47c0      	blx	r8
 80098f8:	3001      	adds	r0, #1
 80098fa:	d103      	bne.n	8009904 <_printf_common+0xac>
 80098fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009904:	3501      	adds	r5, #1
 8009906:	e7c6      	b.n	8009896 <_printf_common+0x3e>
 8009908:	18e1      	adds	r1, r4, r3
 800990a:	1c5a      	adds	r2, r3, #1
 800990c:	2030      	movs	r0, #48	; 0x30
 800990e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009912:	4422      	add	r2, r4
 8009914:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009918:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800991c:	3302      	adds	r3, #2
 800991e:	e7c7      	b.n	80098b0 <_printf_common+0x58>
 8009920:	2301      	movs	r3, #1
 8009922:	4622      	mov	r2, r4
 8009924:	4649      	mov	r1, r9
 8009926:	4638      	mov	r0, r7
 8009928:	47c0      	blx	r8
 800992a:	3001      	adds	r0, #1
 800992c:	d0e6      	beq.n	80098fc <_printf_common+0xa4>
 800992e:	3601      	adds	r6, #1
 8009930:	e7d9      	b.n	80098e6 <_printf_common+0x8e>
	...

08009934 <_printf_i>:
 8009934:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009938:	7e0f      	ldrb	r7, [r1, #24]
 800993a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800993c:	2f78      	cmp	r7, #120	; 0x78
 800993e:	4691      	mov	r9, r2
 8009940:	4680      	mov	r8, r0
 8009942:	460c      	mov	r4, r1
 8009944:	469a      	mov	sl, r3
 8009946:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800994a:	d807      	bhi.n	800995c <_printf_i+0x28>
 800994c:	2f62      	cmp	r7, #98	; 0x62
 800994e:	d80a      	bhi.n	8009966 <_printf_i+0x32>
 8009950:	2f00      	cmp	r7, #0
 8009952:	f000 80d8 	beq.w	8009b06 <_printf_i+0x1d2>
 8009956:	2f58      	cmp	r7, #88	; 0x58
 8009958:	f000 80a3 	beq.w	8009aa2 <_printf_i+0x16e>
 800995c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009960:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009964:	e03a      	b.n	80099dc <_printf_i+0xa8>
 8009966:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800996a:	2b15      	cmp	r3, #21
 800996c:	d8f6      	bhi.n	800995c <_printf_i+0x28>
 800996e:	a101      	add	r1, pc, #4	; (adr r1, 8009974 <_printf_i+0x40>)
 8009970:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009974:	080099cd 	.word	0x080099cd
 8009978:	080099e1 	.word	0x080099e1
 800997c:	0800995d 	.word	0x0800995d
 8009980:	0800995d 	.word	0x0800995d
 8009984:	0800995d 	.word	0x0800995d
 8009988:	0800995d 	.word	0x0800995d
 800998c:	080099e1 	.word	0x080099e1
 8009990:	0800995d 	.word	0x0800995d
 8009994:	0800995d 	.word	0x0800995d
 8009998:	0800995d 	.word	0x0800995d
 800999c:	0800995d 	.word	0x0800995d
 80099a0:	08009aed 	.word	0x08009aed
 80099a4:	08009a11 	.word	0x08009a11
 80099a8:	08009acf 	.word	0x08009acf
 80099ac:	0800995d 	.word	0x0800995d
 80099b0:	0800995d 	.word	0x0800995d
 80099b4:	08009b0f 	.word	0x08009b0f
 80099b8:	0800995d 	.word	0x0800995d
 80099bc:	08009a11 	.word	0x08009a11
 80099c0:	0800995d 	.word	0x0800995d
 80099c4:	0800995d 	.word	0x0800995d
 80099c8:	08009ad7 	.word	0x08009ad7
 80099cc:	682b      	ldr	r3, [r5, #0]
 80099ce:	1d1a      	adds	r2, r3, #4
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	602a      	str	r2, [r5, #0]
 80099d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80099dc:	2301      	movs	r3, #1
 80099de:	e0a3      	b.n	8009b28 <_printf_i+0x1f4>
 80099e0:	6820      	ldr	r0, [r4, #0]
 80099e2:	6829      	ldr	r1, [r5, #0]
 80099e4:	0606      	lsls	r6, r0, #24
 80099e6:	f101 0304 	add.w	r3, r1, #4
 80099ea:	d50a      	bpl.n	8009a02 <_printf_i+0xce>
 80099ec:	680e      	ldr	r6, [r1, #0]
 80099ee:	602b      	str	r3, [r5, #0]
 80099f0:	2e00      	cmp	r6, #0
 80099f2:	da03      	bge.n	80099fc <_printf_i+0xc8>
 80099f4:	232d      	movs	r3, #45	; 0x2d
 80099f6:	4276      	negs	r6, r6
 80099f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099fc:	485e      	ldr	r0, [pc, #376]	; (8009b78 <_printf_i+0x244>)
 80099fe:	230a      	movs	r3, #10
 8009a00:	e019      	b.n	8009a36 <_printf_i+0x102>
 8009a02:	680e      	ldr	r6, [r1, #0]
 8009a04:	602b      	str	r3, [r5, #0]
 8009a06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009a0a:	bf18      	it	ne
 8009a0c:	b236      	sxthne	r6, r6
 8009a0e:	e7ef      	b.n	80099f0 <_printf_i+0xbc>
 8009a10:	682b      	ldr	r3, [r5, #0]
 8009a12:	6820      	ldr	r0, [r4, #0]
 8009a14:	1d19      	adds	r1, r3, #4
 8009a16:	6029      	str	r1, [r5, #0]
 8009a18:	0601      	lsls	r1, r0, #24
 8009a1a:	d501      	bpl.n	8009a20 <_printf_i+0xec>
 8009a1c:	681e      	ldr	r6, [r3, #0]
 8009a1e:	e002      	b.n	8009a26 <_printf_i+0xf2>
 8009a20:	0646      	lsls	r6, r0, #25
 8009a22:	d5fb      	bpl.n	8009a1c <_printf_i+0xe8>
 8009a24:	881e      	ldrh	r6, [r3, #0]
 8009a26:	4854      	ldr	r0, [pc, #336]	; (8009b78 <_printf_i+0x244>)
 8009a28:	2f6f      	cmp	r7, #111	; 0x6f
 8009a2a:	bf0c      	ite	eq
 8009a2c:	2308      	moveq	r3, #8
 8009a2e:	230a      	movne	r3, #10
 8009a30:	2100      	movs	r1, #0
 8009a32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a36:	6865      	ldr	r5, [r4, #4]
 8009a38:	60a5      	str	r5, [r4, #8]
 8009a3a:	2d00      	cmp	r5, #0
 8009a3c:	bfa2      	ittt	ge
 8009a3e:	6821      	ldrge	r1, [r4, #0]
 8009a40:	f021 0104 	bicge.w	r1, r1, #4
 8009a44:	6021      	strge	r1, [r4, #0]
 8009a46:	b90e      	cbnz	r6, 8009a4c <_printf_i+0x118>
 8009a48:	2d00      	cmp	r5, #0
 8009a4a:	d04d      	beq.n	8009ae8 <_printf_i+0x1b4>
 8009a4c:	4615      	mov	r5, r2
 8009a4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009a52:	fb03 6711 	mls	r7, r3, r1, r6
 8009a56:	5dc7      	ldrb	r7, [r0, r7]
 8009a58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009a5c:	4637      	mov	r7, r6
 8009a5e:	42bb      	cmp	r3, r7
 8009a60:	460e      	mov	r6, r1
 8009a62:	d9f4      	bls.n	8009a4e <_printf_i+0x11a>
 8009a64:	2b08      	cmp	r3, #8
 8009a66:	d10b      	bne.n	8009a80 <_printf_i+0x14c>
 8009a68:	6823      	ldr	r3, [r4, #0]
 8009a6a:	07de      	lsls	r6, r3, #31
 8009a6c:	d508      	bpl.n	8009a80 <_printf_i+0x14c>
 8009a6e:	6923      	ldr	r3, [r4, #16]
 8009a70:	6861      	ldr	r1, [r4, #4]
 8009a72:	4299      	cmp	r1, r3
 8009a74:	bfde      	ittt	le
 8009a76:	2330      	movle	r3, #48	; 0x30
 8009a78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009a7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009a80:	1b52      	subs	r2, r2, r5
 8009a82:	6122      	str	r2, [r4, #16]
 8009a84:	f8cd a000 	str.w	sl, [sp]
 8009a88:	464b      	mov	r3, r9
 8009a8a:	aa03      	add	r2, sp, #12
 8009a8c:	4621      	mov	r1, r4
 8009a8e:	4640      	mov	r0, r8
 8009a90:	f7ff fee2 	bl	8009858 <_printf_common>
 8009a94:	3001      	adds	r0, #1
 8009a96:	d14c      	bne.n	8009b32 <_printf_i+0x1fe>
 8009a98:	f04f 30ff 	mov.w	r0, #4294967295
 8009a9c:	b004      	add	sp, #16
 8009a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aa2:	4835      	ldr	r0, [pc, #212]	; (8009b78 <_printf_i+0x244>)
 8009aa4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009aa8:	6829      	ldr	r1, [r5, #0]
 8009aaa:	6823      	ldr	r3, [r4, #0]
 8009aac:	f851 6b04 	ldr.w	r6, [r1], #4
 8009ab0:	6029      	str	r1, [r5, #0]
 8009ab2:	061d      	lsls	r5, r3, #24
 8009ab4:	d514      	bpl.n	8009ae0 <_printf_i+0x1ac>
 8009ab6:	07df      	lsls	r7, r3, #31
 8009ab8:	bf44      	itt	mi
 8009aba:	f043 0320 	orrmi.w	r3, r3, #32
 8009abe:	6023      	strmi	r3, [r4, #0]
 8009ac0:	b91e      	cbnz	r6, 8009aca <_printf_i+0x196>
 8009ac2:	6823      	ldr	r3, [r4, #0]
 8009ac4:	f023 0320 	bic.w	r3, r3, #32
 8009ac8:	6023      	str	r3, [r4, #0]
 8009aca:	2310      	movs	r3, #16
 8009acc:	e7b0      	b.n	8009a30 <_printf_i+0xfc>
 8009ace:	6823      	ldr	r3, [r4, #0]
 8009ad0:	f043 0320 	orr.w	r3, r3, #32
 8009ad4:	6023      	str	r3, [r4, #0]
 8009ad6:	2378      	movs	r3, #120	; 0x78
 8009ad8:	4828      	ldr	r0, [pc, #160]	; (8009b7c <_printf_i+0x248>)
 8009ada:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009ade:	e7e3      	b.n	8009aa8 <_printf_i+0x174>
 8009ae0:	0659      	lsls	r1, r3, #25
 8009ae2:	bf48      	it	mi
 8009ae4:	b2b6      	uxthmi	r6, r6
 8009ae6:	e7e6      	b.n	8009ab6 <_printf_i+0x182>
 8009ae8:	4615      	mov	r5, r2
 8009aea:	e7bb      	b.n	8009a64 <_printf_i+0x130>
 8009aec:	682b      	ldr	r3, [r5, #0]
 8009aee:	6826      	ldr	r6, [r4, #0]
 8009af0:	6961      	ldr	r1, [r4, #20]
 8009af2:	1d18      	adds	r0, r3, #4
 8009af4:	6028      	str	r0, [r5, #0]
 8009af6:	0635      	lsls	r5, r6, #24
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	d501      	bpl.n	8009b00 <_printf_i+0x1cc>
 8009afc:	6019      	str	r1, [r3, #0]
 8009afe:	e002      	b.n	8009b06 <_printf_i+0x1d2>
 8009b00:	0670      	lsls	r0, r6, #25
 8009b02:	d5fb      	bpl.n	8009afc <_printf_i+0x1c8>
 8009b04:	8019      	strh	r1, [r3, #0]
 8009b06:	2300      	movs	r3, #0
 8009b08:	6123      	str	r3, [r4, #16]
 8009b0a:	4615      	mov	r5, r2
 8009b0c:	e7ba      	b.n	8009a84 <_printf_i+0x150>
 8009b0e:	682b      	ldr	r3, [r5, #0]
 8009b10:	1d1a      	adds	r2, r3, #4
 8009b12:	602a      	str	r2, [r5, #0]
 8009b14:	681d      	ldr	r5, [r3, #0]
 8009b16:	6862      	ldr	r2, [r4, #4]
 8009b18:	2100      	movs	r1, #0
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	f7f6 fb70 	bl	8000200 <memchr>
 8009b20:	b108      	cbz	r0, 8009b26 <_printf_i+0x1f2>
 8009b22:	1b40      	subs	r0, r0, r5
 8009b24:	6060      	str	r0, [r4, #4]
 8009b26:	6863      	ldr	r3, [r4, #4]
 8009b28:	6123      	str	r3, [r4, #16]
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b30:	e7a8      	b.n	8009a84 <_printf_i+0x150>
 8009b32:	6923      	ldr	r3, [r4, #16]
 8009b34:	462a      	mov	r2, r5
 8009b36:	4649      	mov	r1, r9
 8009b38:	4640      	mov	r0, r8
 8009b3a:	47d0      	blx	sl
 8009b3c:	3001      	adds	r0, #1
 8009b3e:	d0ab      	beq.n	8009a98 <_printf_i+0x164>
 8009b40:	6823      	ldr	r3, [r4, #0]
 8009b42:	079b      	lsls	r3, r3, #30
 8009b44:	d413      	bmi.n	8009b6e <_printf_i+0x23a>
 8009b46:	68e0      	ldr	r0, [r4, #12]
 8009b48:	9b03      	ldr	r3, [sp, #12]
 8009b4a:	4298      	cmp	r0, r3
 8009b4c:	bfb8      	it	lt
 8009b4e:	4618      	movlt	r0, r3
 8009b50:	e7a4      	b.n	8009a9c <_printf_i+0x168>
 8009b52:	2301      	movs	r3, #1
 8009b54:	4632      	mov	r2, r6
 8009b56:	4649      	mov	r1, r9
 8009b58:	4640      	mov	r0, r8
 8009b5a:	47d0      	blx	sl
 8009b5c:	3001      	adds	r0, #1
 8009b5e:	d09b      	beq.n	8009a98 <_printf_i+0x164>
 8009b60:	3501      	adds	r5, #1
 8009b62:	68e3      	ldr	r3, [r4, #12]
 8009b64:	9903      	ldr	r1, [sp, #12]
 8009b66:	1a5b      	subs	r3, r3, r1
 8009b68:	42ab      	cmp	r3, r5
 8009b6a:	dcf2      	bgt.n	8009b52 <_printf_i+0x21e>
 8009b6c:	e7eb      	b.n	8009b46 <_printf_i+0x212>
 8009b6e:	2500      	movs	r5, #0
 8009b70:	f104 0619 	add.w	r6, r4, #25
 8009b74:	e7f5      	b.n	8009b62 <_printf_i+0x22e>
 8009b76:	bf00      	nop
 8009b78:	0800a6a5 	.word	0x0800a6a5
 8009b7c:	0800a6b6 	.word	0x0800a6b6

08009b80 <_scanf_chars>:
 8009b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b84:	4615      	mov	r5, r2
 8009b86:	688a      	ldr	r2, [r1, #8]
 8009b88:	4680      	mov	r8, r0
 8009b8a:	460c      	mov	r4, r1
 8009b8c:	b932      	cbnz	r2, 8009b9c <_scanf_chars+0x1c>
 8009b8e:	698a      	ldr	r2, [r1, #24]
 8009b90:	2a00      	cmp	r2, #0
 8009b92:	bf0c      	ite	eq
 8009b94:	2201      	moveq	r2, #1
 8009b96:	f04f 32ff 	movne.w	r2, #4294967295
 8009b9a:	608a      	str	r2, [r1, #8]
 8009b9c:	6822      	ldr	r2, [r4, #0]
 8009b9e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8009c30 <_scanf_chars+0xb0>
 8009ba2:	06d1      	lsls	r1, r2, #27
 8009ba4:	bf5f      	itttt	pl
 8009ba6:	681a      	ldrpl	r2, [r3, #0]
 8009ba8:	1d11      	addpl	r1, r2, #4
 8009baa:	6019      	strpl	r1, [r3, #0]
 8009bac:	6816      	ldrpl	r6, [r2, #0]
 8009bae:	2700      	movs	r7, #0
 8009bb0:	69a0      	ldr	r0, [r4, #24]
 8009bb2:	b188      	cbz	r0, 8009bd8 <_scanf_chars+0x58>
 8009bb4:	2801      	cmp	r0, #1
 8009bb6:	d107      	bne.n	8009bc8 <_scanf_chars+0x48>
 8009bb8:	682a      	ldr	r2, [r5, #0]
 8009bba:	7811      	ldrb	r1, [r2, #0]
 8009bbc:	6962      	ldr	r2, [r4, #20]
 8009bbe:	5c52      	ldrb	r2, [r2, r1]
 8009bc0:	b952      	cbnz	r2, 8009bd8 <_scanf_chars+0x58>
 8009bc2:	2f00      	cmp	r7, #0
 8009bc4:	d031      	beq.n	8009c2a <_scanf_chars+0xaa>
 8009bc6:	e022      	b.n	8009c0e <_scanf_chars+0x8e>
 8009bc8:	2802      	cmp	r0, #2
 8009bca:	d120      	bne.n	8009c0e <_scanf_chars+0x8e>
 8009bcc:	682b      	ldr	r3, [r5, #0]
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	f813 3009 	ldrb.w	r3, [r3, r9]
 8009bd4:	071b      	lsls	r3, r3, #28
 8009bd6:	d41a      	bmi.n	8009c0e <_scanf_chars+0x8e>
 8009bd8:	6823      	ldr	r3, [r4, #0]
 8009bda:	06da      	lsls	r2, r3, #27
 8009bdc:	bf5e      	ittt	pl
 8009bde:	682b      	ldrpl	r3, [r5, #0]
 8009be0:	781b      	ldrbpl	r3, [r3, #0]
 8009be2:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009be6:	682a      	ldr	r2, [r5, #0]
 8009be8:	686b      	ldr	r3, [r5, #4]
 8009bea:	3201      	adds	r2, #1
 8009bec:	602a      	str	r2, [r5, #0]
 8009bee:	68a2      	ldr	r2, [r4, #8]
 8009bf0:	3b01      	subs	r3, #1
 8009bf2:	3a01      	subs	r2, #1
 8009bf4:	606b      	str	r3, [r5, #4]
 8009bf6:	3701      	adds	r7, #1
 8009bf8:	60a2      	str	r2, [r4, #8]
 8009bfa:	b142      	cbz	r2, 8009c0e <_scanf_chars+0x8e>
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	dcd7      	bgt.n	8009bb0 <_scanf_chars+0x30>
 8009c00:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009c04:	4629      	mov	r1, r5
 8009c06:	4640      	mov	r0, r8
 8009c08:	4798      	blx	r3
 8009c0a:	2800      	cmp	r0, #0
 8009c0c:	d0d0      	beq.n	8009bb0 <_scanf_chars+0x30>
 8009c0e:	6823      	ldr	r3, [r4, #0]
 8009c10:	f013 0310 	ands.w	r3, r3, #16
 8009c14:	d105      	bne.n	8009c22 <_scanf_chars+0xa2>
 8009c16:	68e2      	ldr	r2, [r4, #12]
 8009c18:	3201      	adds	r2, #1
 8009c1a:	60e2      	str	r2, [r4, #12]
 8009c1c:	69a2      	ldr	r2, [r4, #24]
 8009c1e:	b102      	cbz	r2, 8009c22 <_scanf_chars+0xa2>
 8009c20:	7033      	strb	r3, [r6, #0]
 8009c22:	6923      	ldr	r3, [r4, #16]
 8009c24:	443b      	add	r3, r7
 8009c26:	6123      	str	r3, [r4, #16]
 8009c28:	2000      	movs	r0, #0
 8009c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c2e:	bf00      	nop
 8009c30:	0800a531 	.word	0x0800a531

08009c34 <_scanf_i>:
 8009c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c38:	4698      	mov	r8, r3
 8009c3a:	4b76      	ldr	r3, [pc, #472]	; (8009e14 <_scanf_i+0x1e0>)
 8009c3c:	460c      	mov	r4, r1
 8009c3e:	4682      	mov	sl, r0
 8009c40:	4616      	mov	r6, r2
 8009c42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009c46:	b087      	sub	sp, #28
 8009c48:	ab03      	add	r3, sp, #12
 8009c4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009c4e:	4b72      	ldr	r3, [pc, #456]	; (8009e18 <_scanf_i+0x1e4>)
 8009c50:	69a1      	ldr	r1, [r4, #24]
 8009c52:	4a72      	ldr	r2, [pc, #456]	; (8009e1c <_scanf_i+0x1e8>)
 8009c54:	2903      	cmp	r1, #3
 8009c56:	bf18      	it	ne
 8009c58:	461a      	movne	r2, r3
 8009c5a:	68a3      	ldr	r3, [r4, #8]
 8009c5c:	9201      	str	r2, [sp, #4]
 8009c5e:	1e5a      	subs	r2, r3, #1
 8009c60:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009c64:	bf88      	it	hi
 8009c66:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009c6a:	4627      	mov	r7, r4
 8009c6c:	bf82      	ittt	hi
 8009c6e:	eb03 0905 	addhi.w	r9, r3, r5
 8009c72:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009c76:	60a3      	strhi	r3, [r4, #8]
 8009c78:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009c7c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009c80:	bf98      	it	ls
 8009c82:	f04f 0900 	movls.w	r9, #0
 8009c86:	6023      	str	r3, [r4, #0]
 8009c88:	463d      	mov	r5, r7
 8009c8a:	f04f 0b00 	mov.w	fp, #0
 8009c8e:	6831      	ldr	r1, [r6, #0]
 8009c90:	ab03      	add	r3, sp, #12
 8009c92:	7809      	ldrb	r1, [r1, #0]
 8009c94:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009c98:	2202      	movs	r2, #2
 8009c9a:	f7f6 fab1 	bl	8000200 <memchr>
 8009c9e:	b328      	cbz	r0, 8009cec <_scanf_i+0xb8>
 8009ca0:	f1bb 0f01 	cmp.w	fp, #1
 8009ca4:	d159      	bne.n	8009d5a <_scanf_i+0x126>
 8009ca6:	6862      	ldr	r2, [r4, #4]
 8009ca8:	b92a      	cbnz	r2, 8009cb6 <_scanf_i+0x82>
 8009caa:	6822      	ldr	r2, [r4, #0]
 8009cac:	2308      	movs	r3, #8
 8009cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cb2:	6063      	str	r3, [r4, #4]
 8009cb4:	6022      	str	r2, [r4, #0]
 8009cb6:	6822      	ldr	r2, [r4, #0]
 8009cb8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009cbc:	6022      	str	r2, [r4, #0]
 8009cbe:	68a2      	ldr	r2, [r4, #8]
 8009cc0:	1e51      	subs	r1, r2, #1
 8009cc2:	60a1      	str	r1, [r4, #8]
 8009cc4:	b192      	cbz	r2, 8009cec <_scanf_i+0xb8>
 8009cc6:	6832      	ldr	r2, [r6, #0]
 8009cc8:	1c51      	adds	r1, r2, #1
 8009cca:	6031      	str	r1, [r6, #0]
 8009ccc:	7812      	ldrb	r2, [r2, #0]
 8009cce:	f805 2b01 	strb.w	r2, [r5], #1
 8009cd2:	6872      	ldr	r2, [r6, #4]
 8009cd4:	3a01      	subs	r2, #1
 8009cd6:	2a00      	cmp	r2, #0
 8009cd8:	6072      	str	r2, [r6, #4]
 8009cda:	dc07      	bgt.n	8009cec <_scanf_i+0xb8>
 8009cdc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009ce0:	4631      	mov	r1, r6
 8009ce2:	4650      	mov	r0, sl
 8009ce4:	4790      	blx	r2
 8009ce6:	2800      	cmp	r0, #0
 8009ce8:	f040 8085 	bne.w	8009df6 <_scanf_i+0x1c2>
 8009cec:	f10b 0b01 	add.w	fp, fp, #1
 8009cf0:	f1bb 0f03 	cmp.w	fp, #3
 8009cf4:	d1cb      	bne.n	8009c8e <_scanf_i+0x5a>
 8009cf6:	6863      	ldr	r3, [r4, #4]
 8009cf8:	b90b      	cbnz	r3, 8009cfe <_scanf_i+0xca>
 8009cfa:	230a      	movs	r3, #10
 8009cfc:	6063      	str	r3, [r4, #4]
 8009cfe:	6863      	ldr	r3, [r4, #4]
 8009d00:	4947      	ldr	r1, [pc, #284]	; (8009e20 <_scanf_i+0x1ec>)
 8009d02:	6960      	ldr	r0, [r4, #20]
 8009d04:	1ac9      	subs	r1, r1, r3
 8009d06:	f000 f8af 	bl	8009e68 <__sccl>
 8009d0a:	f04f 0b00 	mov.w	fp, #0
 8009d0e:	68a3      	ldr	r3, [r4, #8]
 8009d10:	6822      	ldr	r2, [r4, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d03d      	beq.n	8009d92 <_scanf_i+0x15e>
 8009d16:	6831      	ldr	r1, [r6, #0]
 8009d18:	6960      	ldr	r0, [r4, #20]
 8009d1a:	f891 c000 	ldrb.w	ip, [r1]
 8009d1e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009d22:	2800      	cmp	r0, #0
 8009d24:	d035      	beq.n	8009d92 <_scanf_i+0x15e>
 8009d26:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009d2a:	d124      	bne.n	8009d76 <_scanf_i+0x142>
 8009d2c:	0510      	lsls	r0, r2, #20
 8009d2e:	d522      	bpl.n	8009d76 <_scanf_i+0x142>
 8009d30:	f10b 0b01 	add.w	fp, fp, #1
 8009d34:	f1b9 0f00 	cmp.w	r9, #0
 8009d38:	d003      	beq.n	8009d42 <_scanf_i+0x10e>
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	f109 39ff 	add.w	r9, r9, #4294967295
 8009d40:	60a3      	str	r3, [r4, #8]
 8009d42:	6873      	ldr	r3, [r6, #4]
 8009d44:	3b01      	subs	r3, #1
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	6073      	str	r3, [r6, #4]
 8009d4a:	dd1b      	ble.n	8009d84 <_scanf_i+0x150>
 8009d4c:	6833      	ldr	r3, [r6, #0]
 8009d4e:	3301      	adds	r3, #1
 8009d50:	6033      	str	r3, [r6, #0]
 8009d52:	68a3      	ldr	r3, [r4, #8]
 8009d54:	3b01      	subs	r3, #1
 8009d56:	60a3      	str	r3, [r4, #8]
 8009d58:	e7d9      	b.n	8009d0e <_scanf_i+0xda>
 8009d5a:	f1bb 0f02 	cmp.w	fp, #2
 8009d5e:	d1ae      	bne.n	8009cbe <_scanf_i+0x8a>
 8009d60:	6822      	ldr	r2, [r4, #0]
 8009d62:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009d66:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009d6a:	d1bf      	bne.n	8009cec <_scanf_i+0xb8>
 8009d6c:	2310      	movs	r3, #16
 8009d6e:	6063      	str	r3, [r4, #4]
 8009d70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d74:	e7a2      	b.n	8009cbc <_scanf_i+0x88>
 8009d76:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009d7a:	6022      	str	r2, [r4, #0]
 8009d7c:	780b      	ldrb	r3, [r1, #0]
 8009d7e:	f805 3b01 	strb.w	r3, [r5], #1
 8009d82:	e7de      	b.n	8009d42 <_scanf_i+0x10e>
 8009d84:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009d88:	4631      	mov	r1, r6
 8009d8a:	4650      	mov	r0, sl
 8009d8c:	4798      	blx	r3
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	d0df      	beq.n	8009d52 <_scanf_i+0x11e>
 8009d92:	6823      	ldr	r3, [r4, #0]
 8009d94:	05db      	lsls	r3, r3, #23
 8009d96:	d50d      	bpl.n	8009db4 <_scanf_i+0x180>
 8009d98:	42bd      	cmp	r5, r7
 8009d9a:	d909      	bls.n	8009db0 <_scanf_i+0x17c>
 8009d9c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009da0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009da4:	4632      	mov	r2, r6
 8009da6:	4650      	mov	r0, sl
 8009da8:	4798      	blx	r3
 8009daa:	f105 39ff 	add.w	r9, r5, #4294967295
 8009dae:	464d      	mov	r5, r9
 8009db0:	42bd      	cmp	r5, r7
 8009db2:	d02d      	beq.n	8009e10 <_scanf_i+0x1dc>
 8009db4:	6822      	ldr	r2, [r4, #0]
 8009db6:	f012 0210 	ands.w	r2, r2, #16
 8009dba:	d113      	bne.n	8009de4 <_scanf_i+0x1b0>
 8009dbc:	702a      	strb	r2, [r5, #0]
 8009dbe:	6863      	ldr	r3, [r4, #4]
 8009dc0:	9e01      	ldr	r6, [sp, #4]
 8009dc2:	4639      	mov	r1, r7
 8009dc4:	4650      	mov	r0, sl
 8009dc6:	47b0      	blx	r6
 8009dc8:	6821      	ldr	r1, [r4, #0]
 8009dca:	f8d8 3000 	ldr.w	r3, [r8]
 8009dce:	f011 0f20 	tst.w	r1, #32
 8009dd2:	d013      	beq.n	8009dfc <_scanf_i+0x1c8>
 8009dd4:	1d1a      	adds	r2, r3, #4
 8009dd6:	f8c8 2000 	str.w	r2, [r8]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	6018      	str	r0, [r3, #0]
 8009dde:	68e3      	ldr	r3, [r4, #12]
 8009de0:	3301      	adds	r3, #1
 8009de2:	60e3      	str	r3, [r4, #12]
 8009de4:	1bed      	subs	r5, r5, r7
 8009de6:	44ab      	add	fp, r5
 8009de8:	6925      	ldr	r5, [r4, #16]
 8009dea:	445d      	add	r5, fp
 8009dec:	6125      	str	r5, [r4, #16]
 8009dee:	2000      	movs	r0, #0
 8009df0:	b007      	add	sp, #28
 8009df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009df6:	f04f 0b00 	mov.w	fp, #0
 8009dfa:	e7ca      	b.n	8009d92 <_scanf_i+0x15e>
 8009dfc:	1d1a      	adds	r2, r3, #4
 8009dfe:	f8c8 2000 	str.w	r2, [r8]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f011 0f01 	tst.w	r1, #1
 8009e08:	bf14      	ite	ne
 8009e0a:	8018      	strhne	r0, [r3, #0]
 8009e0c:	6018      	streq	r0, [r3, #0]
 8009e0e:	e7e6      	b.n	8009dde <_scanf_i+0x1aa>
 8009e10:	2001      	movs	r0, #1
 8009e12:	e7ed      	b.n	8009df0 <_scanf_i+0x1bc>
 8009e14:	0800a398 	.word	0x0800a398
 8009e18:	08009fbd 	.word	0x08009fbd
 8009e1c:	08008991 	.word	0x08008991
 8009e20:	0800a6e0 	.word	0x0800a6e0

08009e24 <_read_r>:
 8009e24:	b538      	push	{r3, r4, r5, lr}
 8009e26:	4d07      	ldr	r5, [pc, #28]	; (8009e44 <_read_r+0x20>)
 8009e28:	4604      	mov	r4, r0
 8009e2a:	4608      	mov	r0, r1
 8009e2c:	4611      	mov	r1, r2
 8009e2e:	2200      	movs	r2, #0
 8009e30:	602a      	str	r2, [r5, #0]
 8009e32:	461a      	mov	r2, r3
 8009e34:	f7f7 fb26 	bl	8001484 <_read>
 8009e38:	1c43      	adds	r3, r0, #1
 8009e3a:	d102      	bne.n	8009e42 <_read_r+0x1e>
 8009e3c:	682b      	ldr	r3, [r5, #0]
 8009e3e:	b103      	cbz	r3, 8009e42 <_read_r+0x1e>
 8009e40:	6023      	str	r3, [r4, #0]
 8009e42:	bd38      	pop	{r3, r4, r5, pc}
 8009e44:	20003854 	.word	0x20003854

08009e48 <_sbrk_r>:
 8009e48:	b538      	push	{r3, r4, r5, lr}
 8009e4a:	4d06      	ldr	r5, [pc, #24]	; (8009e64 <_sbrk_r+0x1c>)
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	4604      	mov	r4, r0
 8009e50:	4608      	mov	r0, r1
 8009e52:	602b      	str	r3, [r5, #0]
 8009e54:	f7f7 fb68 	bl	8001528 <_sbrk>
 8009e58:	1c43      	adds	r3, r0, #1
 8009e5a:	d102      	bne.n	8009e62 <_sbrk_r+0x1a>
 8009e5c:	682b      	ldr	r3, [r5, #0]
 8009e5e:	b103      	cbz	r3, 8009e62 <_sbrk_r+0x1a>
 8009e60:	6023      	str	r3, [r4, #0]
 8009e62:	bd38      	pop	{r3, r4, r5, pc}
 8009e64:	20003854 	.word	0x20003854

08009e68 <__sccl>:
 8009e68:	b570      	push	{r4, r5, r6, lr}
 8009e6a:	780b      	ldrb	r3, [r1, #0]
 8009e6c:	4604      	mov	r4, r0
 8009e6e:	2b5e      	cmp	r3, #94	; 0x5e
 8009e70:	bf0b      	itete	eq
 8009e72:	784b      	ldrbeq	r3, [r1, #1]
 8009e74:	1c48      	addne	r0, r1, #1
 8009e76:	1c88      	addeq	r0, r1, #2
 8009e78:	2200      	movne	r2, #0
 8009e7a:	bf08      	it	eq
 8009e7c:	2201      	moveq	r2, #1
 8009e7e:	1e61      	subs	r1, r4, #1
 8009e80:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009e84:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009e88:	42a9      	cmp	r1, r5
 8009e8a:	d1fb      	bne.n	8009e84 <__sccl+0x1c>
 8009e8c:	b90b      	cbnz	r3, 8009e92 <__sccl+0x2a>
 8009e8e:	3801      	subs	r0, #1
 8009e90:	bd70      	pop	{r4, r5, r6, pc}
 8009e92:	f082 0201 	eor.w	r2, r2, #1
 8009e96:	54e2      	strb	r2, [r4, r3]
 8009e98:	4605      	mov	r5, r0
 8009e9a:	4628      	mov	r0, r5
 8009e9c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8009ea0:	292d      	cmp	r1, #45	; 0x2d
 8009ea2:	d006      	beq.n	8009eb2 <__sccl+0x4a>
 8009ea4:	295d      	cmp	r1, #93	; 0x5d
 8009ea6:	d0f3      	beq.n	8009e90 <__sccl+0x28>
 8009ea8:	b909      	cbnz	r1, 8009eae <__sccl+0x46>
 8009eaa:	4628      	mov	r0, r5
 8009eac:	e7f0      	b.n	8009e90 <__sccl+0x28>
 8009eae:	460b      	mov	r3, r1
 8009eb0:	e7f1      	b.n	8009e96 <__sccl+0x2e>
 8009eb2:	786e      	ldrb	r6, [r5, #1]
 8009eb4:	2e5d      	cmp	r6, #93	; 0x5d
 8009eb6:	d0fa      	beq.n	8009eae <__sccl+0x46>
 8009eb8:	42b3      	cmp	r3, r6
 8009eba:	dcf8      	bgt.n	8009eae <__sccl+0x46>
 8009ebc:	3502      	adds	r5, #2
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	3101      	adds	r1, #1
 8009ec2:	428e      	cmp	r6, r1
 8009ec4:	5462      	strb	r2, [r4, r1]
 8009ec6:	dcfb      	bgt.n	8009ec0 <__sccl+0x58>
 8009ec8:	1af1      	subs	r1, r6, r3
 8009eca:	3901      	subs	r1, #1
 8009ecc:	1c58      	adds	r0, r3, #1
 8009ece:	42b3      	cmp	r3, r6
 8009ed0:	bfa8      	it	ge
 8009ed2:	2100      	movge	r1, #0
 8009ed4:	1843      	adds	r3, r0, r1
 8009ed6:	e7e0      	b.n	8009e9a <__sccl+0x32>

08009ed8 <_strtoul_l.constprop.0>:
 8009ed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009edc:	4f36      	ldr	r7, [pc, #216]	; (8009fb8 <_strtoul_l.constprop.0+0xe0>)
 8009ede:	4686      	mov	lr, r0
 8009ee0:	460d      	mov	r5, r1
 8009ee2:	4628      	mov	r0, r5
 8009ee4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ee8:	5de6      	ldrb	r6, [r4, r7]
 8009eea:	f016 0608 	ands.w	r6, r6, #8
 8009eee:	d1f8      	bne.n	8009ee2 <_strtoul_l.constprop.0+0xa>
 8009ef0:	2c2d      	cmp	r4, #45	; 0x2d
 8009ef2:	d12f      	bne.n	8009f54 <_strtoul_l.constprop.0+0x7c>
 8009ef4:	782c      	ldrb	r4, [r5, #0]
 8009ef6:	2601      	movs	r6, #1
 8009ef8:	1c85      	adds	r5, r0, #2
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d057      	beq.n	8009fae <_strtoul_l.constprop.0+0xd6>
 8009efe:	2b10      	cmp	r3, #16
 8009f00:	d109      	bne.n	8009f16 <_strtoul_l.constprop.0+0x3e>
 8009f02:	2c30      	cmp	r4, #48	; 0x30
 8009f04:	d107      	bne.n	8009f16 <_strtoul_l.constprop.0+0x3e>
 8009f06:	7828      	ldrb	r0, [r5, #0]
 8009f08:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009f0c:	2858      	cmp	r0, #88	; 0x58
 8009f0e:	d149      	bne.n	8009fa4 <_strtoul_l.constprop.0+0xcc>
 8009f10:	786c      	ldrb	r4, [r5, #1]
 8009f12:	2310      	movs	r3, #16
 8009f14:	3502      	adds	r5, #2
 8009f16:	f04f 38ff 	mov.w	r8, #4294967295
 8009f1a:	2700      	movs	r7, #0
 8009f1c:	fbb8 f8f3 	udiv	r8, r8, r3
 8009f20:	fb03 f908 	mul.w	r9, r3, r8
 8009f24:	ea6f 0909 	mvn.w	r9, r9
 8009f28:	4638      	mov	r0, r7
 8009f2a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009f2e:	f1bc 0f09 	cmp.w	ip, #9
 8009f32:	d814      	bhi.n	8009f5e <_strtoul_l.constprop.0+0x86>
 8009f34:	4664      	mov	r4, ip
 8009f36:	42a3      	cmp	r3, r4
 8009f38:	dd22      	ble.n	8009f80 <_strtoul_l.constprop.0+0xa8>
 8009f3a:	2f00      	cmp	r7, #0
 8009f3c:	db1d      	blt.n	8009f7a <_strtoul_l.constprop.0+0xa2>
 8009f3e:	4580      	cmp	r8, r0
 8009f40:	d31b      	bcc.n	8009f7a <_strtoul_l.constprop.0+0xa2>
 8009f42:	d101      	bne.n	8009f48 <_strtoul_l.constprop.0+0x70>
 8009f44:	45a1      	cmp	r9, r4
 8009f46:	db18      	blt.n	8009f7a <_strtoul_l.constprop.0+0xa2>
 8009f48:	fb00 4003 	mla	r0, r0, r3, r4
 8009f4c:	2701      	movs	r7, #1
 8009f4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f52:	e7ea      	b.n	8009f2a <_strtoul_l.constprop.0+0x52>
 8009f54:	2c2b      	cmp	r4, #43	; 0x2b
 8009f56:	bf04      	itt	eq
 8009f58:	782c      	ldrbeq	r4, [r5, #0]
 8009f5a:	1c85      	addeq	r5, r0, #2
 8009f5c:	e7cd      	b.n	8009efa <_strtoul_l.constprop.0+0x22>
 8009f5e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009f62:	f1bc 0f19 	cmp.w	ip, #25
 8009f66:	d801      	bhi.n	8009f6c <_strtoul_l.constprop.0+0x94>
 8009f68:	3c37      	subs	r4, #55	; 0x37
 8009f6a:	e7e4      	b.n	8009f36 <_strtoul_l.constprop.0+0x5e>
 8009f6c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009f70:	f1bc 0f19 	cmp.w	ip, #25
 8009f74:	d804      	bhi.n	8009f80 <_strtoul_l.constprop.0+0xa8>
 8009f76:	3c57      	subs	r4, #87	; 0x57
 8009f78:	e7dd      	b.n	8009f36 <_strtoul_l.constprop.0+0x5e>
 8009f7a:	f04f 37ff 	mov.w	r7, #4294967295
 8009f7e:	e7e6      	b.n	8009f4e <_strtoul_l.constprop.0+0x76>
 8009f80:	2f00      	cmp	r7, #0
 8009f82:	da07      	bge.n	8009f94 <_strtoul_l.constprop.0+0xbc>
 8009f84:	2322      	movs	r3, #34	; 0x22
 8009f86:	f8ce 3000 	str.w	r3, [lr]
 8009f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f8e:	b932      	cbnz	r2, 8009f9e <_strtoul_l.constprop.0+0xc6>
 8009f90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f94:	b106      	cbz	r6, 8009f98 <_strtoul_l.constprop.0+0xc0>
 8009f96:	4240      	negs	r0, r0
 8009f98:	2a00      	cmp	r2, #0
 8009f9a:	d0f9      	beq.n	8009f90 <_strtoul_l.constprop.0+0xb8>
 8009f9c:	b107      	cbz	r7, 8009fa0 <_strtoul_l.constprop.0+0xc8>
 8009f9e:	1e69      	subs	r1, r5, #1
 8009fa0:	6011      	str	r1, [r2, #0]
 8009fa2:	e7f5      	b.n	8009f90 <_strtoul_l.constprop.0+0xb8>
 8009fa4:	2430      	movs	r4, #48	; 0x30
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d1b5      	bne.n	8009f16 <_strtoul_l.constprop.0+0x3e>
 8009faa:	2308      	movs	r3, #8
 8009fac:	e7b3      	b.n	8009f16 <_strtoul_l.constprop.0+0x3e>
 8009fae:	2c30      	cmp	r4, #48	; 0x30
 8009fb0:	d0a9      	beq.n	8009f06 <_strtoul_l.constprop.0+0x2e>
 8009fb2:	230a      	movs	r3, #10
 8009fb4:	e7af      	b.n	8009f16 <_strtoul_l.constprop.0+0x3e>
 8009fb6:	bf00      	nop
 8009fb8:	0800a531 	.word	0x0800a531

08009fbc <_strtoul_r>:
 8009fbc:	f7ff bf8c 	b.w	8009ed8 <_strtoul_l.constprop.0>

08009fc0 <__submore>:
 8009fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fc4:	460c      	mov	r4, r1
 8009fc6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009fc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fcc:	4299      	cmp	r1, r3
 8009fce:	d11d      	bne.n	800a00c <__submore+0x4c>
 8009fd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009fd4:	f7ff f8a0 	bl	8009118 <_malloc_r>
 8009fd8:	b918      	cbnz	r0, 8009fe2 <__submore+0x22>
 8009fda:	f04f 30ff 	mov.w	r0, #4294967295
 8009fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fe6:	63a3      	str	r3, [r4, #56]	; 0x38
 8009fe8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009fec:	6360      	str	r0, [r4, #52]	; 0x34
 8009fee:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009ff2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009ff6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009ffa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009ffe:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800a002:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a006:	6020      	str	r0, [r4, #0]
 800a008:	2000      	movs	r0, #0
 800a00a:	e7e8      	b.n	8009fde <__submore+0x1e>
 800a00c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a00e:	0077      	lsls	r7, r6, #1
 800a010:	463a      	mov	r2, r7
 800a012:	f000 f845 	bl	800a0a0 <_realloc_r>
 800a016:	4605      	mov	r5, r0
 800a018:	2800      	cmp	r0, #0
 800a01a:	d0de      	beq.n	8009fda <__submore+0x1a>
 800a01c:	eb00 0806 	add.w	r8, r0, r6
 800a020:	4601      	mov	r1, r0
 800a022:	4632      	mov	r2, r6
 800a024:	4640      	mov	r0, r8
 800a026:	f7fe fab7 	bl	8008598 <memcpy>
 800a02a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a02e:	f8c4 8000 	str.w	r8, [r4]
 800a032:	e7e9      	b.n	800a008 <__submore+0x48>

0800a034 <abort>:
 800a034:	b508      	push	{r3, lr}
 800a036:	2006      	movs	r0, #6
 800a038:	f000 f88a 	bl	800a150 <raise>
 800a03c:	2001      	movs	r0, #1
 800a03e:	f7f7 fa17 	bl	8001470 <_exit>
	...

0800a044 <_fstat_r>:
 800a044:	b538      	push	{r3, r4, r5, lr}
 800a046:	4d07      	ldr	r5, [pc, #28]	; (800a064 <_fstat_r+0x20>)
 800a048:	2300      	movs	r3, #0
 800a04a:	4604      	mov	r4, r0
 800a04c:	4608      	mov	r0, r1
 800a04e:	4611      	mov	r1, r2
 800a050:	602b      	str	r3, [r5, #0]
 800a052:	f7f7 fa40 	bl	80014d6 <_fstat>
 800a056:	1c43      	adds	r3, r0, #1
 800a058:	d102      	bne.n	800a060 <_fstat_r+0x1c>
 800a05a:	682b      	ldr	r3, [r5, #0]
 800a05c:	b103      	cbz	r3, 800a060 <_fstat_r+0x1c>
 800a05e:	6023      	str	r3, [r4, #0]
 800a060:	bd38      	pop	{r3, r4, r5, pc}
 800a062:	bf00      	nop
 800a064:	20003854 	.word	0x20003854

0800a068 <_isatty_r>:
 800a068:	b538      	push	{r3, r4, r5, lr}
 800a06a:	4d06      	ldr	r5, [pc, #24]	; (800a084 <_isatty_r+0x1c>)
 800a06c:	2300      	movs	r3, #0
 800a06e:	4604      	mov	r4, r0
 800a070:	4608      	mov	r0, r1
 800a072:	602b      	str	r3, [r5, #0]
 800a074:	f7f7 fa3f 	bl	80014f6 <_isatty>
 800a078:	1c43      	adds	r3, r0, #1
 800a07a:	d102      	bne.n	800a082 <_isatty_r+0x1a>
 800a07c:	682b      	ldr	r3, [r5, #0]
 800a07e:	b103      	cbz	r3, 800a082 <_isatty_r+0x1a>
 800a080:	6023      	str	r3, [r4, #0]
 800a082:	bd38      	pop	{r3, r4, r5, pc}
 800a084:	20003854 	.word	0x20003854

0800a088 <__malloc_lock>:
 800a088:	4801      	ldr	r0, [pc, #4]	; (800a090 <__malloc_lock+0x8>)
 800a08a:	f7fe bf57 	b.w	8008f3c <__retarget_lock_acquire_recursive>
 800a08e:	bf00      	nop
 800a090:	20003848 	.word	0x20003848

0800a094 <__malloc_unlock>:
 800a094:	4801      	ldr	r0, [pc, #4]	; (800a09c <__malloc_unlock+0x8>)
 800a096:	f7fe bf52 	b.w	8008f3e <__retarget_lock_release_recursive>
 800a09a:	bf00      	nop
 800a09c:	20003848 	.word	0x20003848

0800a0a0 <_realloc_r>:
 800a0a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0a4:	4680      	mov	r8, r0
 800a0a6:	4614      	mov	r4, r2
 800a0a8:	460e      	mov	r6, r1
 800a0aa:	b921      	cbnz	r1, 800a0b6 <_realloc_r+0x16>
 800a0ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0b0:	4611      	mov	r1, r2
 800a0b2:	f7ff b831 	b.w	8009118 <_malloc_r>
 800a0b6:	b92a      	cbnz	r2, 800a0c4 <_realloc_r+0x24>
 800a0b8:	f7fe ffc2 	bl	8009040 <_free_r>
 800a0bc:	4625      	mov	r5, r4
 800a0be:	4628      	mov	r0, r5
 800a0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0c4:	f000 f860 	bl	800a188 <_malloc_usable_size_r>
 800a0c8:	4284      	cmp	r4, r0
 800a0ca:	4607      	mov	r7, r0
 800a0cc:	d802      	bhi.n	800a0d4 <_realloc_r+0x34>
 800a0ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a0d2:	d812      	bhi.n	800a0fa <_realloc_r+0x5a>
 800a0d4:	4621      	mov	r1, r4
 800a0d6:	4640      	mov	r0, r8
 800a0d8:	f7ff f81e 	bl	8009118 <_malloc_r>
 800a0dc:	4605      	mov	r5, r0
 800a0de:	2800      	cmp	r0, #0
 800a0e0:	d0ed      	beq.n	800a0be <_realloc_r+0x1e>
 800a0e2:	42bc      	cmp	r4, r7
 800a0e4:	4622      	mov	r2, r4
 800a0e6:	4631      	mov	r1, r6
 800a0e8:	bf28      	it	cs
 800a0ea:	463a      	movcs	r2, r7
 800a0ec:	f7fe fa54 	bl	8008598 <memcpy>
 800a0f0:	4631      	mov	r1, r6
 800a0f2:	4640      	mov	r0, r8
 800a0f4:	f7fe ffa4 	bl	8009040 <_free_r>
 800a0f8:	e7e1      	b.n	800a0be <_realloc_r+0x1e>
 800a0fa:	4635      	mov	r5, r6
 800a0fc:	e7df      	b.n	800a0be <_realloc_r+0x1e>

0800a0fe <_raise_r>:
 800a0fe:	291f      	cmp	r1, #31
 800a100:	b538      	push	{r3, r4, r5, lr}
 800a102:	4604      	mov	r4, r0
 800a104:	460d      	mov	r5, r1
 800a106:	d904      	bls.n	800a112 <_raise_r+0x14>
 800a108:	2316      	movs	r3, #22
 800a10a:	6003      	str	r3, [r0, #0]
 800a10c:	f04f 30ff 	mov.w	r0, #4294967295
 800a110:	bd38      	pop	{r3, r4, r5, pc}
 800a112:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a114:	b112      	cbz	r2, 800a11c <_raise_r+0x1e>
 800a116:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a11a:	b94b      	cbnz	r3, 800a130 <_raise_r+0x32>
 800a11c:	4620      	mov	r0, r4
 800a11e:	f000 f831 	bl	800a184 <_getpid_r>
 800a122:	462a      	mov	r2, r5
 800a124:	4601      	mov	r1, r0
 800a126:	4620      	mov	r0, r4
 800a128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a12c:	f000 b818 	b.w	800a160 <_kill_r>
 800a130:	2b01      	cmp	r3, #1
 800a132:	d00a      	beq.n	800a14a <_raise_r+0x4c>
 800a134:	1c59      	adds	r1, r3, #1
 800a136:	d103      	bne.n	800a140 <_raise_r+0x42>
 800a138:	2316      	movs	r3, #22
 800a13a:	6003      	str	r3, [r0, #0]
 800a13c:	2001      	movs	r0, #1
 800a13e:	e7e7      	b.n	800a110 <_raise_r+0x12>
 800a140:	2400      	movs	r4, #0
 800a142:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a146:	4628      	mov	r0, r5
 800a148:	4798      	blx	r3
 800a14a:	2000      	movs	r0, #0
 800a14c:	e7e0      	b.n	800a110 <_raise_r+0x12>
	...

0800a150 <raise>:
 800a150:	4b02      	ldr	r3, [pc, #8]	; (800a15c <raise+0xc>)
 800a152:	4601      	mov	r1, r0
 800a154:	6818      	ldr	r0, [r3, #0]
 800a156:	f7ff bfd2 	b.w	800a0fe <_raise_r>
 800a15a:	bf00      	nop
 800a15c:	20000420 	.word	0x20000420

0800a160 <_kill_r>:
 800a160:	b538      	push	{r3, r4, r5, lr}
 800a162:	4d07      	ldr	r5, [pc, #28]	; (800a180 <_kill_r+0x20>)
 800a164:	2300      	movs	r3, #0
 800a166:	4604      	mov	r4, r0
 800a168:	4608      	mov	r0, r1
 800a16a:	4611      	mov	r1, r2
 800a16c:	602b      	str	r3, [r5, #0]
 800a16e:	f7f7 f96f 	bl	8001450 <_kill>
 800a172:	1c43      	adds	r3, r0, #1
 800a174:	d102      	bne.n	800a17c <_kill_r+0x1c>
 800a176:	682b      	ldr	r3, [r5, #0]
 800a178:	b103      	cbz	r3, 800a17c <_kill_r+0x1c>
 800a17a:	6023      	str	r3, [r4, #0]
 800a17c:	bd38      	pop	{r3, r4, r5, pc}
 800a17e:	bf00      	nop
 800a180:	20003854 	.word	0x20003854

0800a184 <_getpid_r>:
 800a184:	f7f7 b95c 	b.w	8001440 <_getpid>

0800a188 <_malloc_usable_size_r>:
 800a188:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a18c:	1f18      	subs	r0, r3, #4
 800a18e:	2b00      	cmp	r3, #0
 800a190:	bfbc      	itt	lt
 800a192:	580b      	ldrlt	r3, [r1, r0]
 800a194:	18c0      	addlt	r0, r0, r3
 800a196:	4770      	bx	lr

0800a198 <_init>:
 800a198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a19a:	bf00      	nop
 800a19c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a19e:	bc08      	pop	{r3}
 800a1a0:	469e      	mov	lr, r3
 800a1a2:	4770      	bx	lr

0800a1a4 <_fini>:
 800a1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1a6:	bf00      	nop
 800a1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1aa:	bc08      	pop	{r3}
 800a1ac:	469e      	mov	lr, r3
 800a1ae:	4770      	bx	lr
